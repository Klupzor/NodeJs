{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/bel/index.js","node_modules/browser-resolve/empty.js","node_modules/empty-element/index.js","node_modules/global/document.js","node_modules/global/window.js","node_modules/hyperscript-attribute-to-property/index.js","node_modules/hyperx/index.js","node_modules/intl-messageformat-parser/index.js","node_modules/intl-messageformat-parser/lib/parser.js","node_modules/intl-messageformat/index.js","node_modules/intl-messageformat/lib/compiler.js","node_modules/intl-messageformat/lib/core.js","node_modules/intl-messageformat/lib/en.js","node_modules/intl-messageformat/lib/es5.js","node_modules/intl-messageformat/lib/main.js","node_modules/intl-messageformat/lib/utils.js","node_modules/intl-relativeformat/dist/locale-data/en.js","node_modules/intl-relativeformat/dist/locale-data/es.js","node_modules/intl-relativeformat/index.js","node_modules/intl-relativeformat/lib/core.js","node_modules/intl-relativeformat/lib/diff.js","node_modules/intl-relativeformat/lib/en.js","node_modules/intl-relativeformat/lib/es5.js","node_modules/intl/index.js","node_modules/intl/lib/core.js","node_modules/intl/locale-data/jsonp/en-US.js","node_modules/intl/locale-data/jsonp/es.js","node_modules/isarray/index.js","node_modules/morphdom/dist/morphdom.js","node_modules/nanoassert/index.js","node_modules/on-load/index.js","node_modules/page/index.js","node_modules/page/node_modules/path-to-regexp/index.js","node_modules/process/browser.js","node_modules/yo-yo/index.js","node_modules/yo-yo/update-events.js","src/footer/index.js","src/homepage/index.js","src/homepage/template.js","src/index.js","src/landing/index.js","src/layout/index.js","src/picture-card/index.js","src/signin/index.js","src/signin/template.js","src/signup/index.js","src/signup/template.js","src/translate/en-US.js","src/translate/es.js","src/translate/index.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzJA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnx3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfhpRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACflTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACfvqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttxttxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA,IAAI,KAAK,QAAQ,OAAR,CAAT;AACA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;AAEA,IAAI,KAAK,EAAI;;;;gHAImG,UAAU,OAAV,CAAkB,UAAlB,CAA8B;;6BAEjH,UAAU,OAAV,CAAkB,SAAlB,CAA6B;6BAC7B,UAAU,OAAV,CAAkB,SAAlB,CAA6B;;;;;;UAP1D;;AAeA,SAAS,IAAT,CAAc,WAAd,CAA0B,EAA1B;;;AClBA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,eAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAKA,KAAK,GAAL,EAAU,UAAU,GAAV,EAAc,IAAd,EAAmB;AACzB;AACA,aAAS,KAAT,GAAe,YAAf;AACA,QAAI,OAAO,SAAS,cAAT,CAAwB,gBAAxB,CAAX;;AAEA,QAAI,WAAW,CAAC;AACZ,cAAM;AACF,sBAAU,QADR;AAEF,oBAAQ;;AAFN,SADM;AAMZ,aAAK,YANO;AAOZ,eAAO,CAPK;AAQZ,eAAO,KARK;AASZ,mBAAW,IAAI,IAAJ;AATC,KAAD,EAWf;AACI,cAAM;AACF,sBAAU,OADR;AAEF,oBAAQ;;AAFN,SADV;AAMI,aAAK,YANT;AAOI,eAAO,CAPX;AAQI,eAAO,IARX;AASI,mBAAW,IAAI,IAAJ,GAAW,OAAX,CAAmB,IAAI,IAAJ,GAAW,OAAX,KAAuB,EAA1C;AATf,KAXe,CAAf;;AAyBA,UAAM,IAAN,EAAY,WAAZ,CAAwB,SAAS,QAAT,CAAxB;AACH,CA/BD;;;ACPA,IAAI,KAAK,QAAQ,OAAR,CAAT;AACA,IAAI,SAAS,QAAQ,WAAR,CAAb;AACA,IAAI,UAAU,QAAQ,iBAAR,CAAd;;AAGA,OAAO,OAAP,GAAiB,UAAU,QAAV,EAAmB;AACpC,QAAI,KAAM,EAAG;;;;cAIC,SAAS,GAAT,CAAa,UAAU,GAAV,EAAc;AACzB,eAAO,QAAS,GAAT,CAAP;AACH,KAFC,CAEC;;;OANf;;AAWA,WAAO,OAAO,EAAP,CAAP;AACC,CAbD;;;ACLA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,QAAQ,YAAR;AACA,QAAQ,UAAR;AACA,QAAQ,UAAR;AACA,QAAQ,UAAR;;AAEA;;;ACPA,IAAI,KAAK,QAAQ,OAAR,CAAT;;AAEA,OAAO,OAAP,GAAiB,SAAS,OAAT,CAAkB,GAAlB,EAAuB;AACpC,SAAO,EAAI;;;;;;;;;WASJ,GAAI;;;;SATX;AAcH,CAfD;;;ACFA,IAAI,KAAK,QAAQ,OAAR,CAAT;AACA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;AAEA,OAAO,OAAP,GAAiB,SAAS,MAAT,CAAiB,OAAjB,EAAyB;AAC1C,WAAO,EAAG;;;;;;;;;;;;;;8CAcoC,UAAU,OAAV,CAAkB,QAAlB,CAA4B;;;;;;;;UAQhE,OAAQ;;OAtBlB;AA0BC,CA3BD;;;ACHA,IAAI,KAAK,QAAQ,OAAR,CAAT;AACA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;AAEA,OAAO,OAAP,GAAiB,SAAS,YAAT,CAAsB,GAAtB,EAA0B;AACzC,MAAI,EAAJ;;AAEA,WAAS,MAAT,CAAgB,OAAhB,EAAyB;AACvB,WAAO,EAAG;uBACS,QAAQ,KAAR,GAAgB,OAAhB,GAA0B,EAAG;;wCAEZ,IAAI,GAAI;;;yBAGvB,IAAI,IAAJ,CAAS,QAAS;sBACrB,IAAI,IAAJ,CAAS,MAAO;mCACH,IAAI,IAAJ,CAAS,QAAS;;oCAEjB,UAAU,IAAV,CAAe,MAAf,CAAsB,QAAQ,SAA9B,CAAyC;;4CAEjC,KAAK,IAAL,CAAU,KAAV,EAAiB,IAAjB,CAAuB;4CACvB,KAAK,IAAL,CAAU,KAAV,EAAiB,KAAjB,CAAwB;qCAC/B,UAAU,OAAV,CAAkB,OAAlB,EAA2B,EAAC,OAAQ,QAAQ,KAAjB,EAA3B,CAAoD;;;;OAdrF;AAoBD;AACD,WAAS,IAAT,CAAc,KAAd,EAAoB;AAClB,QAAI,KAAJ,GAAY,KAAZ;AACA,QAAI,KAAJ,IAAa,QAAQ,CAAR,GAAY,CAAC,CAA1B;AACA,QAAI,QAAQ,OAAO,GAAP,CAAZ;AACA,OAAG,MAAH,CAAU,EAAV,EAAc,KAAd;AACA,WAAO,KAAP;AACD;;AAED,OAAK,OAAO,GAAP,CAAL;AACA,SAAO,EAAP;AACD,CAnCD;;;ACHA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,eAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAKA,KAAK,SAAL,EAAgB,UAAU,GAAV,EAAc,IAAd,EAAmB;AAC/B;AACA,aAAS,KAAT,GAAe,mBAAf;AACA,QAAI,OAAO,SAAS,cAAT,CAAwB,gBAAxB,CAAX;AACA,UAAM,IAAN,EAAY,WAAZ,CAAwB,QAAxB;AACH,CALD;;;ACPA,IAAI,KAAK,QAAQ,OAAR,CAAT;AACA,IAAI,UAAU,QAAQ,YAAR,CAAd;AACA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;AAGA,IAAI,aAAa,EAAG;;;;;;4DAMwC,UAAU,OAAV,CAAkB,iBAAlB,CAAqC;mGACE,UAAU,OAAV,CAAkB,aAAlB,CAAiC;;;;0DAI1E,UAAU,OAAV,CAAkB,UAAlB,CAA8B;8DAC1B,UAAU,OAAV,CAAkB,UAAlB,CAA8B;8FACE,UAAU,OAAV,CAAkB,aAAlB,CAAiC;;;;;;;IAO3H,UAAU,OAAV,CAAkB,yBAAlB,CAA6C,sBAAqB,UAAU,OAAV,CAAkB,uBAAlB,CAA2C;;;OApBjH;;AAyBA,OAAO,OAAP,GAAiB,QAAQ,UAAR,CAAjB;;;AC9BA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,eAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAIA,KAAK,SAAL,EAAgB,UAAU,GAAV,EAAc,IAAd,EAAmB;AAC/B;AACA,aAAS,KAAT,GAAe,mBAAf;AACA,QAAI,OAAO,SAAS,cAAT,CAAwB,gBAAxB,CAAX;AACA,UAAM,IAAN,EAAY,WAAZ,CAAwB,QAAxB;AACH,CALD;;;ACNA,IAAI,KAAK,QAAQ,OAAR,CAAT;AACA,IAAI,UAAU,QAAQ,YAAR,CAAd;AACA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;AAEA,IAAI,aAAa,EAAG;;;;;YAKR,UAAU,OAAV,CAAkB,mBAAlB,CAAuC;;4DAES,UAAU,OAAV,CAAkB,iBAAlB,CAAqC;mGACE,UAAU,OAAV,CAAkB,aAAlB,CAAiC;;;;wDAI5E,UAAU,OAAV,CAAkB,OAAlB,CAA2B;sDAC7B,UAAU,OAAV,CAAkB,UAAlB,CAA8B;0DAC1B,UAAU,OAAV,CAAkB,UAAlB,CAA8B;8DAC1B,UAAU,OAAV,CAAkB,UAAlB,CAA8B;8FACE,UAAU,OAAV,CAAkB,uBAAlB,CAA2C;;;;;;;IAOrI,UAAU,OAAV,CAAkB,qBAAlB,CAAyC,sBAAqB,UAAU,OAAV,CAAkB,QAAlB,CAA4B;;;OAvB9F;;AA4BA;AACA,IAAI,IAAI,QAAQ,UAAR,CAAR;AACA;AACA,OAAO,OAAP,GAAiB,CAAjB;;;ACnCA,OAAO,OAAP,GAAiB;AACb,eAAO,sBACC,iBADD,GAEC,eAFD,GAGC,oBAJK;AAKb,kBAAU,QALG;AAMb,mBAAW,SANE;AAOb,mBAAW,SAPE;AAQb,6BAAqB,4DARR;AASb,2BAAmB,sBATN;AAUb,uBAAe,QAVF;AAWb,iBAAS,OAXI;AAYb,oBAAY,UAZC;AAab,oBAAY,UAbC;AAcb,oBAAY,UAdC;AAeb,iCAAyB,QAfZ;AAgBb,+BAAuB,0BAhBV;AAiBb,kBAAU,QAjBG;AAkBb,mCAA2B,0BAlBd;AAmBb,oBAAY;AAnBC,CAAjB;;;ACAA,OAAO,OAAP,GAAiB;AACb,aAAS,4BADI;AAEb,cAAU,OAFG;AAGb,eAAW,QAHE;AAIb,eAAW,SAJE;AAKb,yBAAqB,8DALR;AAMb,uBAAmB,6BANN;AAOb,mBAAe,gBAPF;AAQb,aAAS,oBARI;AASb,gBAAY,mBATC;AAUb,gBAAY,iBAVC;AAWb,gBAAY,YAXC;AAYb,6BAAyB,YAZZ;AAab,2BAAuB,qBAbV;AAcb,cAAU,QAdG;AAeb,+BAA2B,wBAfd;AAgBb,gBAAY;AAhBC,CAAjB;;;ACAA,IAAI,CAAC,OAAO,IAAZ,EAAiB;AACb,WAAO,IAAP,GAAc,QAAQ,MAAR,CAAd;AACA,YAAQ,iCAAR;AACA,YAAQ,8BAAR;AACD;;AAEH,IAAI,qBAAqB,OAAO,kBAAP,GAA4B,QAAQ,qBAAR,CAArD;AACA,IAAI,oBAAoB,QAAQ,oBAAR,CAAxB;AACA,QAAQ,4CAAR;AACA,QAAQ,4CAAR;;AAGA,IAAI,KAAK,QAAQ,MAAR,CAAT;AACA,IAAI,KAAK,QAAQ,SAAR,CAAT;;AAEA,IAAI,WAAW,EAAf;AACA,SAAS,EAAT,GAAc,EAAd;AACA,SAAS,OAAT,IAAoB,EAApB;;AAEA,IAAI,SAAS,IAAb;;AAEA,OAAO,OAAP,GAAiB;AACb,aAAS,UAAU,IAAV,EAAgB,IAAhB,EAAsB;AAC3B,eAAO,QAAQ,EAAf;AACA,YAAI,MAAM,IAAI,iBAAJ,CAAsB,SAAS,MAAT,EAAiB,IAAjB,CAAtB,EAA8C,MAA9C,EAAsD,IAAtD,CAAV;AACA,eAAO,IAAI,MAAJ,CAAW,IAAX,CAAP;AACH,KALY;AAMb,UAAM,IAAI,kBAAJ,CAAuB,MAAvB;AANO,CAAjB","file":"app.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","var document = require('global/document')\nvar hyperx = require('hyperx')\nvar onload = require('on-load')\n\nvar SVGNS = 'http://www.w3.org/2000/svg'\nvar XLINKNS = 'http://www.w3.org/1999/xlink'\n\nvar BOOL_PROPS = {\n  autofocus: 1,\n  checked: 1,\n  defaultchecked: 1,\n  disabled: 1,\n  formnovalidate: 1,\n  indeterminate: 1,\n  readonly: 1,\n  required: 1,\n  selected: 1,\n  willvalidate: 1\n}\nvar COMMENT_TAG = '!--'\nvar SVG_TAGS = [\n  'svg',\n  'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor',\n  'animateMotion', 'animateTransform', 'circle', 'clipPath', 'color-profile',\n  'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',\n  'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting',\n  'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB',\n  'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode',\n  'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting',\n  'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'font', 'font-face',\n  'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri',\n  'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image', 'line',\n  'linearGradient', 'marker', 'mask', 'metadata', 'missing-glyph', 'mpath',\n  'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect',\n  'set', 'stop', 'switch', 'symbol', 'text', 'textPath', 'title', 'tref',\n  'tspan', 'use', 'view', 'vkern'\n]\n\nfunction belCreateElement (tag, props, children) {\n  var el\n\n  // If an svg tag, it needs a namespace\n  if (SVG_TAGS.indexOf(tag) !== -1) {\n    props.namespace = SVGNS\n  }\n\n  // If we are using a namespace\n  var ns = false\n  if (props.namespace) {\n    ns = props.namespace\n    delete props.namespace\n  }\n\n  // Create the element\n  if (ns) {\n    el = document.createElementNS(ns, tag)\n  } else if (tag === COMMENT_TAG) {\n    return document.createComment(props.comment)\n  } else {\n    el = document.createElement(tag)\n  }\n\n  // If adding onload events\n  if (props.onload || props.onunload) {\n    var load = props.onload || function () {}\n    var unload = props.onunload || function () {}\n    onload(el, function belOnload () {\n      load(el)\n    }, function belOnunload () {\n      unload(el)\n    },\n    // We have to use non-standard `caller` to find who invokes `belCreateElement`\n    belCreateElement.caller.caller.caller)\n    delete props.onload\n    delete props.onunload\n  }\n\n  // Create the properties\n  for (var p in props) {\n    if (props.hasOwnProperty(p)) {\n      var key = p.toLowerCase()\n      var val = props[p]\n      // Normalize className\n      if (key === 'classname') {\n        key = 'class'\n        p = 'class'\n      }\n      // The for attribute gets transformed to htmlFor, but we just set as for\n      if (p === 'htmlFor') {\n        p = 'for'\n      }\n      // If a property is boolean, set itself to the key\n      if (BOOL_PROPS[key]) {\n        if (val === 'true') val = key\n        else if (val === 'false') continue\n      }\n      // If a property prefers being set directly vs setAttribute\n      if (key.slice(0, 2) === 'on') {\n        el[p] = val\n      } else {\n        if (ns) {\n          if (p === 'xlink:href') {\n            el.setAttributeNS(XLINKNS, p, val)\n          } else if (/^xmlns($|:)/i.test(p)) {\n            // skip xmlns definitions\n          } else {\n            el.setAttributeNS(null, p, val)\n          }\n        } else {\n          el.setAttribute(p, val)\n        }\n      }\n    }\n  }\n\n  function appendChild (childs) {\n    if (!Array.isArray(childs)) return\n    for (var i = 0; i < childs.length; i++) {\n      var node = childs[i]\n      if (Array.isArray(node)) {\n        appendChild(node)\n        continue\n      }\n\n      if (typeof node === 'number' ||\n        typeof node === 'boolean' ||\n        typeof node === 'function' ||\n        node instanceof Date ||\n        node instanceof RegExp) {\n        node = node.toString()\n      }\n\n      if (typeof node === 'string') {\n        if (el.lastChild && el.lastChild.nodeName === '#text') {\n          el.lastChild.nodeValue += node\n          continue\n        }\n        node = document.createTextNode(node)\n      }\n\n      if (node && node.nodeType) {\n        el.appendChild(node)\n      }\n    }\n  }\n  appendChild(children)\n\n  return el\n}\n\nmodule.exports = hyperx(belCreateElement, {comments: true})\nmodule.exports.default = module.exports\nmodule.exports.createElement = belCreateElement\n","","/* global HTMLElement */\n\n'use strict'\n\nmodule.exports = function emptyElement (element) {\n  if (!(element instanceof HTMLElement)) {\n    throw new TypeError('Expected an element')\n  }\n\n  var node\n  while ((node = element.lastChild)) element.removeChild(node)\n  return element\n}\n","var topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","module.exports = attributeToProperty\n\nvar transform = {\n  'class': 'className',\n  'for': 'htmlFor',\n  'http-equiv': 'httpEquiv'\n}\n\nfunction attributeToProperty (h) {\n  return function (tagName, attrs, children) {\n    for (var attr in attrs) {\n      if (attr in transform) {\n        attrs[transform[attr]] = attrs[attr]\n        delete attrs[attr]\n      }\n    }\n    return h(tagName, attrs, children)\n  }\n}\n","var attrToProp = require('hyperscript-attribute-to-property')\n\nvar VAR = 0, TEXT = 1, OPEN = 2, CLOSE = 3, ATTR = 4\nvar ATTR_KEY = 5, ATTR_KEY_W = 6\nvar ATTR_VALUE_W = 7, ATTR_VALUE = 8\nvar ATTR_VALUE_SQ = 9, ATTR_VALUE_DQ = 10\nvar ATTR_EQ = 11, ATTR_BREAK = 12\nvar COMMENT = 13\n\nmodule.exports = function (h, opts) {\n  if (!opts) opts = {}\n  var concat = opts.concat || function (a, b) {\n    return String(a) + String(b)\n  }\n  if (opts.attrToProp !== false) {\n    h = attrToProp(h)\n  }\n\n  return function (strings) {\n    var state = TEXT, reg = ''\n    var arglen = arguments.length\n    var parts = []\n\n    for (var i = 0; i < strings.length; i++) {\n      if (i < arglen - 1) {\n        var arg = arguments[i+1]\n        var p = parse(strings[i])\n        var xstate = state\n        if (xstate === ATTR_VALUE_DQ) xstate = ATTR_VALUE\n        if (xstate === ATTR_VALUE_SQ) xstate = ATTR_VALUE\n        if (xstate === ATTR_VALUE_W) xstate = ATTR_VALUE\n        if (xstate === ATTR) xstate = ATTR_KEY\n        p.push([ VAR, xstate, arg ])\n        parts.push.apply(parts, p)\n      } else parts.push.apply(parts, parse(strings[i]))\n    }\n\n    var tree = [null,{},[]]\n    var stack = [[tree,-1]]\n    for (var i = 0; i < parts.length; i++) {\n      var cur = stack[stack.length-1][0]\n      var p = parts[i], s = p[0]\n      if (s === OPEN && /^\\//.test(p[1])) {\n        var ix = stack[stack.length-1][1]\n        if (stack.length > 1) {\n          stack.pop()\n          stack[stack.length-1][0][2][ix] = h(\n            cur[0], cur[1], cur[2].length ? cur[2] : undefined\n          )\n        }\n      } else if (s === OPEN) {\n        var c = [p[1],{},[]]\n        cur[2].push(c)\n        stack.push([c,cur[2].length-1])\n      } else if (s === ATTR_KEY || (s === VAR && p[1] === ATTR_KEY)) {\n        var key = ''\n        var copyKey\n        for (; i < parts.length; i++) {\n          if (parts[i][0] === ATTR_KEY) {\n            key = concat(key, parts[i][1])\n          } else if (parts[i][0] === VAR && parts[i][1] === ATTR_KEY) {\n            if (typeof parts[i][2] === 'object' && !key) {\n              for (copyKey in parts[i][2]) {\n                if (parts[i][2].hasOwnProperty(copyKey) && !cur[1][copyKey]) {\n                  cur[1][copyKey] = parts[i][2][copyKey]\n                }\n              }\n            } else {\n              key = concat(key, parts[i][2])\n            }\n          } else break\n        }\n        if (parts[i][0] === ATTR_EQ) i++\n        var j = i\n        for (; i < parts.length; i++) {\n          if (parts[i][0] === ATTR_VALUE || parts[i][0] === ATTR_KEY) {\n            if (!cur[1][key]) cur[1][key] = strfn(parts[i][1])\n            else parts[i][1]===\"\" || (cur[1][key] = concat(cur[1][key], parts[i][1]));\n          } else if (parts[i][0] === VAR\n          && (parts[i][1] === ATTR_VALUE || parts[i][1] === ATTR_KEY)) {\n            if (!cur[1][key]) cur[1][key] = strfn(parts[i][2])\n            else parts[i][2]===\"\" || (cur[1][key] = concat(cur[1][key], parts[i][2]));\n          } else {\n            if (key.length && !cur[1][key] && i === j\n            && (parts[i][0] === CLOSE || parts[i][0] === ATTR_BREAK)) {\n              // https://html.spec.whatwg.org/multipage/infrastructure.html#boolean-attributes\n              // empty string is falsy, not well behaved value in browser\n              cur[1][key] = key.toLowerCase()\n            }\n            if (parts[i][0] === CLOSE) {\n              i--\n            }\n            break\n          }\n        }\n      } else if (s === ATTR_KEY) {\n        cur[1][p[1]] = true\n      } else if (s === VAR && p[1] === ATTR_KEY) {\n        cur[1][p[2]] = true\n      } else if (s === CLOSE) {\n        if (selfClosing(cur[0]) && stack.length) {\n          var ix = stack[stack.length-1][1]\n          stack.pop()\n          stack[stack.length-1][0][2][ix] = h(\n            cur[0], cur[1], cur[2].length ? cur[2] : undefined\n          )\n        }\n      } else if (s === VAR && p[1] === TEXT) {\n        if (p[2] === undefined || p[2] === null) p[2] = ''\n        else if (!p[2]) p[2] = concat('', p[2])\n        if (Array.isArray(p[2][0])) {\n          cur[2].push.apply(cur[2], p[2])\n        } else {\n          cur[2].push(p[2])\n        }\n      } else if (s === TEXT) {\n        cur[2].push(p[1])\n      } else if (s === ATTR_EQ || s === ATTR_BREAK) {\n        // no-op\n      } else {\n        throw new Error('unhandled: ' + s)\n      }\n    }\n\n    if (tree[2].length > 1 && /^\\s*$/.test(tree[2][0])) {\n      tree[2].shift()\n    }\n\n    if (tree[2].length > 2\n    || (tree[2].length === 2 && /\\S/.test(tree[2][1]))) {\n      throw new Error(\n        'multiple root elements must be wrapped in an enclosing tag'\n      )\n    }\n    if (Array.isArray(tree[2][0]) && typeof tree[2][0][0] === 'string'\n    && Array.isArray(tree[2][0][2])) {\n      tree[2][0] = h(tree[2][0][0], tree[2][0][1], tree[2][0][2])\n    }\n    return tree[2][0]\n\n    function parse (str) {\n      var res = []\n      if (state === ATTR_VALUE_W) state = ATTR\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i)\n        if (state === TEXT && c === '<') {\n          if (reg.length) res.push([TEXT, reg])\n          reg = ''\n          state = OPEN\n        } else if (c === '>' && !quot(state) && state !== COMMENT) {\n          if (state === OPEN) {\n            res.push([OPEN,reg])\n          } else if (state === ATTR_KEY) {\n            res.push([ATTR_KEY,reg])\n          } else if (state === ATTR_VALUE && reg.length) {\n            res.push([ATTR_VALUE,reg])\n          }\n          res.push([CLOSE])\n          reg = ''\n          state = TEXT\n        } else if (state === COMMENT && /-$/.test(reg) && c === '-') {\n          if (opts.comments) {\n            res.push([ATTR_VALUE,reg.substr(0, reg.length - 1)],[CLOSE])\n          }\n          reg = ''\n          state = TEXT\n        } else if (state === OPEN && /^!--$/.test(reg)) {\n          if (opts.comments) {\n            res.push([OPEN, reg],[ATTR_KEY,'comment'],[ATTR_EQ])\n          }\n          reg = c\n          state = COMMENT\n        } else if (state === TEXT || state === COMMENT) {\n          reg += c\n        } else if (state === OPEN && c === '/' && reg.length) {\n          // no-op, self closing tag without a space <br/>\n        } else if (state === OPEN && /\\s/.test(c)) {\n          res.push([OPEN, reg])\n          reg = ''\n          state = ATTR\n        } else if (state === OPEN) {\n          reg += c\n        } else if (state === ATTR && /[^\\s\"'=/]/.test(c)) {\n          state = ATTR_KEY\n          reg = c\n        } else if (state === ATTR && /\\s/.test(c)) {\n          if (reg.length) res.push([ATTR_KEY,reg])\n          res.push([ATTR_BREAK])\n        } else if (state === ATTR_KEY && /\\s/.test(c)) {\n          res.push([ATTR_KEY,reg])\n          reg = ''\n          state = ATTR_KEY_W\n        } else if (state === ATTR_KEY && c === '=') {\n          res.push([ATTR_KEY,reg],[ATTR_EQ])\n          reg = ''\n          state = ATTR_VALUE_W\n        } else if (state === ATTR_KEY) {\n          reg += c\n        } else if ((state === ATTR_KEY_W || state === ATTR) && c === '=') {\n          res.push([ATTR_EQ])\n          state = ATTR_VALUE_W\n        } else if ((state === ATTR_KEY_W || state === ATTR) && !/\\s/.test(c)) {\n          res.push([ATTR_BREAK])\n          if (/[\\w-]/.test(c)) {\n            reg += c\n            state = ATTR_KEY\n          } else state = ATTR\n        } else if (state === ATTR_VALUE_W && c === '\"') {\n          state = ATTR_VALUE_DQ\n        } else if (state === ATTR_VALUE_W && c === \"'\") {\n          state = ATTR_VALUE_SQ\n        } else if (state === ATTR_VALUE_DQ && c === '\"') {\n          res.push([ATTR_VALUE,reg],[ATTR_BREAK])\n          reg = ''\n          state = ATTR\n        } else if (state === ATTR_VALUE_SQ && c === \"'\") {\n          res.push([ATTR_VALUE,reg],[ATTR_BREAK])\n          reg = ''\n          state = ATTR\n        } else if (state === ATTR_VALUE_W && !/\\s/.test(c)) {\n          state = ATTR_VALUE\n          i--\n        } else if (state === ATTR_VALUE && /\\s/.test(c)) {\n          res.push([ATTR_VALUE,reg],[ATTR_BREAK])\n          reg = ''\n          state = ATTR\n        } else if (state === ATTR_VALUE || state === ATTR_VALUE_SQ\n        || state === ATTR_VALUE_DQ) {\n          reg += c\n        }\n      }\n      if (state === TEXT && reg.length) {\n        res.push([TEXT,reg])\n        reg = ''\n      } else if (state === ATTR_VALUE && reg.length) {\n        res.push([ATTR_VALUE,reg])\n        reg = ''\n      } else if (state === ATTR_VALUE_DQ && reg.length) {\n        res.push([ATTR_VALUE,reg])\n        reg = ''\n      } else if (state === ATTR_VALUE_SQ && reg.length) {\n        res.push([ATTR_VALUE,reg])\n        reg = ''\n      } else if (state === ATTR_KEY) {\n        res.push([ATTR_KEY,reg])\n        reg = ''\n      }\n      return res\n    }\n  }\n\n  function strfn (x) {\n    if (typeof x === 'function') return x\n    else if (typeof x === 'string') return x\n    else if (x && typeof x === 'object') return x\n    else return concat('', x)\n  }\n}\n\nfunction quot (state) {\n  return state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty\nfunction has (obj, key) { return hasOwn.call(obj, key) }\n\nvar closeRE = RegExp('^(' + [\n  'area', 'base', 'basefont', 'bgsound', 'br', 'col', 'command', 'embed',\n  'frame', 'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',\n  'source', 'track', 'wbr', '!--',\n  // SVG TAGS\n  'animate', 'animateTransform', 'circle', 'cursor', 'desc', 'ellipse',\n  'feBlend', 'feColorMatrix', 'feComposite',\n  'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap',\n  'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR',\n  'feGaussianBlur', 'feImage', 'feMergeNode', 'feMorphology',\n  'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile',\n  'feTurbulence', 'font-face-format', 'font-face-name', 'font-face-uri',\n  'glyph', 'glyphRef', 'hkern', 'image', 'line', 'missing-glyph', 'mpath',\n  'path', 'polygon', 'polyline', 'rect', 'set', 'stop', 'tref', 'use', 'view',\n  'vkern'\n].join('|') + ')(?:[\\.#][a-zA-Z0-9\\u007F-\\uFFFF_:-]+)*$')\nfunction selfClosing (tag) { return closeRE.test(tag) }\n","'use strict';\n\nexports = module.exports = require('./lib/parser')['default'];\nexports['default'] = exports;\n","\"use strict\";\n\nexports[\"default\"] = (function() {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser  = this,\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = function(elements) {\n                return {\n                    type    : 'messageFormatPattern',\n                    elements: elements,\n                    location: location()\n                };\n            },\n        peg$c1 = function(text) {\n                var string = '',\n                    i, j, outerLen, inner, innerLen;\n\n                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {\n                    inner = text[i];\n\n                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {\n                        string += inner[j];\n                    }\n                }\n\n                return string;\n            },\n        peg$c2 = function(messageText) {\n                return {\n                    type : 'messageTextElement',\n                    value: messageText,\n                    location: location()\n                };\n            },\n        peg$c3 = /^[^ \\t\\n\\r,.+={}#]/,\n        peg$c4 = { type: \"class\", value: \"[^ \\\\t\\\\n\\\\r,.+={}#]\", description: \"[^ \\\\t\\\\n\\\\r,.+={}#]\" },\n        peg$c5 = \"{\",\n        peg$c6 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c7 = \",\",\n        peg$c8 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c9 = \"}\",\n        peg$c10 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c11 = function(id, format) {\n                return {\n                    type  : 'argumentElement',\n                    id    : id,\n                    format: format && format[2],\n                    location: location()\n                };\n            },\n        peg$c12 = \"number\",\n        peg$c13 = { type: \"literal\", value: \"number\", description: \"\\\"number\\\"\" },\n        peg$c14 = \"date\",\n        peg$c15 = { type: \"literal\", value: \"date\", description: \"\\\"date\\\"\" },\n        peg$c16 = \"time\",\n        peg$c17 = { type: \"literal\", value: \"time\", description: \"\\\"time\\\"\" },\n        peg$c18 = function(type, style) {\n                return {\n                    type : type + 'Format',\n                    style: style && style[2],\n                    location: location()\n                };\n            },\n        peg$c19 = \"plural\",\n        peg$c20 = { type: \"literal\", value: \"plural\", description: \"\\\"plural\\\"\" },\n        peg$c21 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: false,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                };\n            },\n        peg$c22 = \"selectordinal\",\n        peg$c23 = { type: \"literal\", value: \"selectordinal\", description: \"\\\"selectordinal\\\"\" },\n        peg$c24 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: true,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                }\n            },\n        peg$c25 = \"select\",\n        peg$c26 = { type: \"literal\", value: \"select\", description: \"\\\"select\\\"\" },\n        peg$c27 = function(options) {\n                return {\n                    type   : 'selectFormat',\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c28 = \"=\",\n        peg$c29 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n        peg$c30 = function(selector, pattern) {\n                return {\n                    type    : 'optionalFormatPattern',\n                    selector: selector,\n                    value   : pattern,\n                    location: location()\n                };\n            },\n        peg$c31 = \"offset:\",\n        peg$c32 = { type: \"literal\", value: \"offset:\", description: \"\\\"offset:\\\"\" },\n        peg$c33 = function(number) {\n                return number;\n            },\n        peg$c34 = function(offset, options) {\n                return {\n                    type   : 'pluralFormat',\n                    offset : offset,\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c35 = { type: \"other\", description: \"whitespace\" },\n        peg$c36 = /^[ \\t\\n\\r]/,\n        peg$c37 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n        peg$c38 = { type: \"other\", description: \"optionalWhitespace\" },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c41 = /^[0-9a-f]/i,\n        peg$c42 = { type: \"class\", value: \"[0-9a-f]i\", description: \"[0-9a-f]i\" },\n        peg$c43 = \"0\",\n        peg$c44 = { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n        peg$c45 = /^[1-9]/,\n        peg$c46 = { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n        peg$c47 = function(digits) {\n            return parseInt(digits, 10);\n        },\n        peg$c48 = /^[^{}\\\\\\0-\\x1F \\t\\n\\r]/,\n        peg$c49 = { type: \"class\", value: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\", description: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\" },\n        peg$c50 = \"\\\\\\\\\",\n        peg$c51 = { type: \"literal\", value: \"\\\\\\\\\", description: \"\\\"\\\\\\\\\\\\\\\\\\\"\" },\n        peg$c52 = function() { return '\\\\'; },\n        peg$c53 = \"\\\\#\",\n        peg$c54 = { type: \"literal\", value: \"\\\\#\", description: \"\\\"\\\\\\\\#\\\"\" },\n        peg$c55 = function() { return '\\\\#'; },\n        peg$c56 = \"\\\\{\",\n        peg$c57 = { type: \"literal\", value: \"\\\\{\", description: \"\\\"\\\\\\\\{\\\"\" },\n        peg$c58 = function() { return '\\u007B'; },\n        peg$c59 = \"\\\\}\",\n        peg$c60 = { type: \"literal\", value: \"\\\\}\", description: \"\\\"\\\\\\\\}\\\"\" },\n        peg$c61 = function() { return '\\u007D'; },\n        peg$c62 = \"\\\\u\",\n        peg$c63 = { type: \"literal\", value: \"\\\\u\", description: \"\\\"\\\\\\\\u\\\"\" },\n        peg$c64 = function(digits) {\n                return String.fromCharCode(parseInt(digits, 16));\n            },\n        peg$c65 = function(chars) { return chars.join(''); },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(\n        message,\n        null,\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p, ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0;\n\n      s0 = peg$parsemessageFormatPattern();\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatPattern() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsemessageFormatElement();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsemessageFormatElement();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatElement() {\n      var s0;\n\n      s0 = peg$parsemessageTextElement();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageText() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsechars();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsews();\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageTextElement() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemessageText();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseargument() {\n      var s0, s1, s2;\n\n      s0 = peg$parsenumber();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c4); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseargumentElement() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseargument();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c7;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c8); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseelementFormat();\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseelementFormat() {\n      var s0;\n\n      s0 = peg$parsesimpleFormat();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepluralFormat();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselectOrdinalFormat();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectFormat();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimpleFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c12) {\n        s1 = peg$c12;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c13); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c14) {\n          s1 = peg$c14;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsechars();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c20); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectOrdinalFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 13) === peg$c22) {\n        s1 = peg$c22;\n        peg$currPos += 13;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseoptionalFormatPattern();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseoptionalFormatPattern();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselector() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsechars();\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptionalFormatPattern() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseselector();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s4 = peg$c5;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsemessageFormatPattern();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c9;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c30(s2, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoffset() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c31) {\n        s1 = peg$c31;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c33(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralStyle() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseoffset();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseoptionalFormatPattern();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoptionalFormatPattern();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c34(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c37); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsews();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsews();\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedigit() {\n      var s0;\n\n      if (peg$c39.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsehexDigit() {\n      var s0;\n\n      if (peg$c41.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c42); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsedigit();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsedigit();\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c50) {\n          s1 = peg$c50;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c51); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c52();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c53) {\n            s1 = peg$c53;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c54); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c56) {\n              s1 = peg$c56;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c59) {\n                s1 = peg$c59;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c60); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c62) {\n                  s1 = peg$c62;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  s3 = peg$currPos;\n                  s4 = peg$parsehexDigit();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsehexDigit();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsehexDigit();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parsehexDigit();\n                        if (s7 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s2 = input.substring(s2, peg$currPos);\n                  } else {\n                    s2 = s3;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c64(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechars() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsechar();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsechar();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(\n        null,\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();\n\n//# sourceMappingURL=parser.js.map","/* jshint node:true */\n\n'use strict';\n\nvar IntlMessageFormat = require('./lib/main')['default'];\n\n// Add all locale data to `IntlMessageFormat`. This module will be ignored when\n// bundling for the browser with Browserify/Webpack.\nrequire('./lib/locales');\n\n// Re-export `IntlMessageFormat` as the CommonJS default exports with all the\n// locale data registered, and with English set as the default locale. Define\n// the `default` prop for use with other compiled ES6 Modules.\nexports = module.exports = IntlMessageFormat;\nexports['default'] = exports;\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\nexports[\"default\"] = Compiler;\n\nfunction Compiler(locales, formats, pluralFn) {\n    this.locales  = locales;\n    this.formats  = formats;\n    this.pluralFn = pluralFn;\n}\n\nCompiler.prototype.compile = function (ast) {\n    this.pluralStack        = [];\n    this.currentPlural      = null;\n    this.pluralNumberFormat = null;\n\n    return this.compileMessage(ast);\n};\n\nCompiler.prototype.compileMessage = function (ast) {\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n    }\n\n    var elements = ast.elements,\n        pattern  = [];\n\n    var i, len, element;\n\n    for (i = 0, len = elements.length; i < len; i += 1) {\n        element = elements[i];\n\n        switch (element.type) {\n            case 'messageTextElement':\n                pattern.push(this.compileMessageText(element));\n                break;\n\n            case 'argumentElement':\n                pattern.push(this.compileArgument(element));\n                break;\n\n            default:\n                throw new Error('Message element does not have a valid type');\n        }\n    }\n\n    return pattern;\n};\n\nCompiler.prototype.compileMessageText = function (element) {\n    // When this `element` is part of plural sub-pattern and its value contains\n    // an unescaped '#', use a `PluralOffsetString` helper to properly output\n    // the number with the correct offset in the string.\n    if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n        // Create a cache a NumberFormat instance that can be reused for any\n        // PluralOffsetString instance in this message.\n        if (!this.pluralNumberFormat) {\n            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n        }\n\n        return new PluralOffsetString(\n                this.currentPlural.id,\n                this.currentPlural.format.offset,\n                this.pluralNumberFormat,\n                element.value);\n    }\n\n    // Unescape the escaped '#'s in the message text.\n    return element.value.replace(/\\\\#/g, '#');\n};\n\nCompiler.prototype.compileArgument = function (element) {\n    var format = element.format;\n\n    if (!format) {\n        return new StringFormat(element.id);\n    }\n\n    var formats  = this.formats,\n        locales  = this.locales,\n        pluralFn = this.pluralFn,\n        options;\n\n    switch (format.type) {\n        case 'numberFormat':\n            options = formats.number[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.NumberFormat(locales, options).format\n            };\n\n        case 'dateFormat':\n            options = formats.date[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'timeFormat':\n            options = formats.time[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'pluralFormat':\n            options = this.compileOptions(element);\n            return new PluralFormat(\n                element.id, format.ordinal, format.offset, options, pluralFn\n            );\n\n        case 'selectFormat':\n            options = this.compileOptions(element);\n            return new SelectFormat(element.id, options);\n\n        default:\n            throw new Error('Message element does not have a valid format type');\n    }\n};\n\nCompiler.prototype.compileOptions = function (element) {\n    var format      = element.format,\n        options     = format.options,\n        optionsHash = {};\n\n    // Save the current plural element, if any, then set it to a new value when\n    // compiling the options sub-patterns. This conforms the spec's algorithm\n    // for handling `\"#\"` syntax in message text.\n    this.pluralStack.push(this.currentPlural);\n    this.currentPlural = format.type === 'pluralFormat' ? element : null;\n\n    var i, len, option;\n\n    for (i = 0, len = options.length; i < len; i += 1) {\n        option = options[i];\n\n        // Compile the sub-pattern and save it under the options's selector.\n        optionsHash[option.selector] = this.compileMessage(option.value);\n    }\n\n    // Pop the plural stack to put back the original current plural value.\n    this.currentPlural = this.pluralStack.pop();\n\n    return optionsHash;\n};\n\n// -- Compiler Helper Classes --------------------------------------------------\n\nfunction StringFormat(id) {\n    this.id = id;\n}\n\nStringFormat.prototype.format = function (value) {\n    if (!value && typeof value !== 'number') {\n        return '';\n    }\n\n    return typeof value === 'string' ? value : String(value);\n};\n\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n    this.id         = id;\n    this.useOrdinal = useOrdinal;\n    this.offset     = offset;\n    this.options    = options;\n    this.pluralFn   = pluralFn;\n}\n\nPluralFormat.prototype.getOption = function (value) {\n    var options = this.options;\n\n    var option = options['=' + value] ||\n            options[this.pluralFn(value - this.offset, this.useOrdinal)];\n\n    return option || options.other;\n};\n\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n    this.id           = id;\n    this.offset       = offset;\n    this.numberFormat = numberFormat;\n    this.string       = string;\n}\n\nPluralOffsetString.prototype.format = function (value) {\n    var number = this.numberFormat.format(value - this.offset);\n\n    return this.string\n            .replace(/(^|[^\\\\])#/g, '$1' + number)\n            .replace(/\\\\#/g, '#');\n};\n\nfunction SelectFormat(id, options) {\n    this.id      = id;\n    this.options = options;\n}\n\nSelectFormat.prototype.getOption = function (value) {\n    var options = this.options;\n    return options[value] || options.other;\n};\n\n//# sourceMappingURL=compiler.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\nvar src$utils$$ = require(\"./utils\"), src$es5$$ = require(\"./es5\"), src$compiler$$ = require(\"./compiler\"), intl$messageformat$parser$$ = require(\"intl-messageformat-parser\");\nexports[\"default\"] = MessageFormat;\n\n// -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n    // Parse string messages into an AST.\n    var ast = typeof message === 'string' ?\n            MessageFormat.__parse(message) : message;\n\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new TypeError('A message must be provided as a String or AST.');\n    }\n\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    formats = this._mergeFormats(MessageFormat.formats, formats);\n\n    // Defined first because it's used to build the format pattern.\n    src$es5$$.defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});\n\n    // Compile the `ast` to a pattern that is highly optimized for repeated\n    // `format()` invocations. **Note:** This passes the `locales` set provided\n    // to the constructor instead of just the resolved locale.\n    var pluralFn = this._findPluralRuleFunction(this._locale);\n    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);\n\n    // \"Bind\" `format()` method to `this` so it can be passed by reference like\n    // the other `Intl` APIs.\n    var messageFormat = this;\n    this.format = function (values) {\n      try {\n        return messageFormat._format(pattern, values);\n      } catch (e) {\n        if (e.variableId) {\n          throw new Error(\n            'The intl string context variable \\'' + e.variableId + '\\'' +\n            ' was not provided to the string \\'' + message + '\\''\n          );\n        } else {\n          throw e;\n        }\n      }\n    };\n}\n\n// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\nsrc$es5$$.defineProperty(MessageFormat, 'formats', {\n    enumerable: true,\n\n    value: {\n        number: {\n            'currency': {\n                style: 'currency'\n            },\n\n            'percent': {\n                style: 'percent'\n            }\n        },\n\n        date: {\n            'short': {\n                month: 'numeric',\n                day  : 'numeric',\n                year : '2-digit'\n            },\n\n            'medium': {\n                month: 'short',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'long': {\n                month: 'long',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'full': {\n                weekday: 'long',\n                month  : 'long',\n                day    : 'numeric',\n                year   : 'numeric'\n            }\n        },\n\n        time: {\n            'short': {\n                hour  : 'numeric',\n                minute: 'numeric'\n            },\n\n            'medium':  {\n                hour  : 'numeric',\n                minute: 'numeric',\n                second: 'numeric'\n            },\n\n            'long': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            },\n\n            'full': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            }\n        }\n    }\n});\n\n// Define internal private properties for dealing with locale data.\nsrc$es5$$.defineProperty(MessageFormat, '__localeData__', {value: src$es5$$.objCreate(null)});\nsrc$es5$$.defineProperty(MessageFormat, '__addLocaleData', {value: function (data) {\n    if (!(data && data.locale)) {\n        throw new Error(\n            'Locale data provided to IntlMessageFormat is missing a ' +\n            '`locale` property'\n        );\n    }\n\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n}});\n\n// Defines `__parse()` static method as an exposed private.\nsrc$es5$$.defineProperty(MessageFormat, '__parse', {value: intl$messageformat$parser$$[\"default\"].parse});\n\n// Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\nsrc$es5$$.defineProperty(MessageFormat, 'defaultLocale', {\n    enumerable: true,\n    writable  : true,\n    value     : undefined\n});\n\nMessageFormat.prototype.resolvedOptions = function () {\n    // TODO: Provide anything else?\n    return {\n        locale: this._locale\n    };\n};\n\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n    var compiler = new src$compiler$$[\"default\"](locales, formats, pluralFn);\n    return compiler.compile(ast);\n};\n\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n    var localeData = MessageFormat.__localeData__;\n    var data       = localeData[locale.toLowerCase()];\n\n    // The locale data is de-duplicated, so we have to traverse the locale's\n    // hierarchy until we find a `pluralRuleFunction` to return.\n    while (data) {\n        if (data.pluralRuleFunction) {\n            return data.pluralRuleFunction;\n        }\n\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n    }\n\n    throw new Error(\n        'Locale data added to IntlMessageFormat is missing a ' +\n        '`pluralRuleFunction` for :' + locale\n    );\n};\n\nMessageFormat.prototype._format = function (pattern, values) {\n    var result = '',\n        i, len, part, id, value, err;\n\n    for (i = 0, len = pattern.length; i < len; i += 1) {\n        part = pattern[i];\n\n        // Exist early for string parts.\n        if (typeof part === 'string') {\n            result += part;\n            continue;\n        }\n\n        id = part.id;\n\n        // Enforce that all required values are provided by the caller.\n        if (!(values && src$utils$$.hop.call(values, id))) {\n          err = new Error('A value must be provided for: ' + id);\n          err.variableId = id;\n          throw err;\n        }\n\n        value = values[id];\n\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (part.options) {\n            result += this._format(part.getOption(value), values);\n        } else {\n            result += part.format(value);\n        }\n    }\n\n    return result;\n};\n\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n    var mergedFormats = {},\n        type, mergedType;\n\n    for (type in defaults) {\n        if (!src$utils$$.hop.call(defaults, type)) { continue; }\n\n        mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);\n\n        if (formats && src$utils$$.hop.call(formats, type)) {\n            src$utils$$.extend(mergedType, formats[type]);\n        }\n    }\n\n    return mergedFormats;\n};\n\nMessageFormat.prototype._resolveLocale = function (locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(MessageFormat.defaultLocale);\n\n    var localeData = MessageFormat.__localeData__;\n    var i, len, localeParts, data;\n\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n        localeParts = locales[i].toLowerCase().split('-');\n\n        while (localeParts.length) {\n            data = localeData[localeParts.join('-')];\n            if (data) {\n                // Return the normalized locale string; e.g., we return \"en-US\",\n                // instead of \"en-us\".\n                return data.locale;\n            }\n\n            localeParts.pop();\n        }\n    }\n\n    var defaultLocale = locales.pop();\n    throw new Error(\n        'No locale data has been added to IntlMessageFormat for: ' +\n        locales.join(', ') + ', or the default locale: ' + defaultLocale\n    );\n};\n\n//# sourceMappingURL=core.js.map","// GENERATED FILE\n\"use strict\";\nexports[\"default\"] = {\"locale\":\"en\",\"pluralRuleFunction\":function (n,ord){var s=String(n).split(\".\"),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?\"one\":n10==2&&n100!=12?\"two\":n10==3&&n100!=13?\"few\":\"other\";return n==1&&v0?\"one\":\"other\"}};\n\n//# sourceMappingURL=en.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\nvar src$utils$$ = require(\"./utils\");\n\n// Purposely using the same implementation as the Intl.js `Intl` polyfill.\n// Copyright 2013 Andy Earnshaw, MIT License\n\nvar realDefineProp = (function () {\n    try { return !!Object.defineProperty({}, 'a', {}); }\n    catch (e) { return false; }\n})();\n\nvar es3 = !realDefineProp && !Object.prototype.__defineGetter__;\n\nvar defineProperty = realDefineProp ? Object.defineProperty :\n        function (obj, name, desc) {\n\n    if ('get' in desc && obj.__defineGetter__) {\n        obj.__defineGetter__(name, desc.get);\n    } else if (!src$utils$$.hop.call(obj, name) || 'value' in desc) {\n        obj[name] = desc.value;\n    }\n};\n\nvar objCreate = Object.create || function (proto, props) {\n    var obj, k;\n\n    function F() {}\n    F.prototype = proto;\n    obj = new F();\n\n    for (k in props) {\n        if (src$utils$$.hop.call(props, k)) {\n            defineProperty(obj, k, props[k]);\n        }\n    }\n\n    return obj;\n};\n\nexports.defineProperty = defineProperty, exports.objCreate = objCreate;\n\n//# sourceMappingURL=es5.js.map","/* jslint esnext: true */\n\n\"use strict\";\nvar src$core$$ = require(\"./core\"), src$en$$ = require(\"./en\");\n\nsrc$core$$[\"default\"].__addLocaleData(src$en$$[\"default\"]);\nsrc$core$$[\"default\"].defaultLocale = 'en';\n\nexports[\"default\"] = src$core$$[\"default\"];\n\n//# sourceMappingURL=main.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\nexports.extend = extend;\nvar hop = Object.prototype.hasOwnProperty;\n\nfunction extend(obj) {\n    var sources = Array.prototype.slice.call(arguments, 1),\n        i, len, source, key;\n\n    for (i = 0, len = sources.length; i < len; i += 1) {\n        source = sources[i];\n        if (!source) { continue; }\n\n        for (key in source) {\n            if (hop.call(source, key)) {\n                obj[key] = source[key];\n            }\n        }\n    }\n\n    return obj;\n}\nexports.hop = hop;\n\n//# sourceMappingURL=utils.js.map","IntlRelativeFormat.__addLocaleData({\"locale\":\"en\",\"pluralRuleFunction\":function (n,ord){var s=String(n).split(\".\"),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?\"one\":n10==2&&n100!=12?\"two\":n10==3&&n100!=13?\"few\":\"other\";return n==1&&v0?\"one\":\"other\"},\"fields\":{\"year\":{\"displayName\":\"year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} year\",\"other\":\"in {0} years\"},\"past\":{\"one\":\"{0} year ago\",\"other\":\"{0} years ago\"}}},\"year-short\":{\"displayName\":\"yr.\",\"relative\":{\"0\":\"this yr.\",\"1\":\"next yr.\",\"-1\":\"last yr.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} yr.\",\"other\":\"in {0} yr.\"},\"past\":{\"one\":\"{0} yr. ago\",\"other\":\"{0} yr. ago\"}}},\"month\":{\"displayName\":\"month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} month\",\"other\":\"in {0} months\"},\"past\":{\"one\":\"{0} month ago\",\"other\":\"{0} months ago\"}}},\"month-short\":{\"displayName\":\"mo.\",\"relative\":{\"0\":\"this mo.\",\"1\":\"next mo.\",\"-1\":\"last mo.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} mo.\",\"other\":\"in {0} mo.\"},\"past\":{\"one\":\"{0} mo. ago\",\"other\":\"{0} mo. ago\"}}},\"day\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"day-short\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"hour\":{\"displayName\":\"hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hour\",\"other\":\"in {0} hours\"},\"past\":{\"one\":\"{0} hour ago\",\"other\":\"{0} hours ago\"}}},\"hour-short\":{\"displayName\":\"hr.\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hr.\",\"other\":\"in {0} hr.\"},\"past\":{\"one\":\"{0} hr. ago\",\"other\":\"{0} hr. ago\"}}},\"minute\":{\"displayName\":\"minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} minute\",\"other\":\"in {0} minutes\"},\"past\":{\"one\":\"{0} minute ago\",\"other\":\"{0} minutes ago\"}}},\"minute-short\":{\"displayName\":\"min.\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} min.\",\"other\":\"in {0} min.\"},\"past\":{\"one\":\"{0} min. ago\",\"other\":\"{0} min. ago\"}}},\"second\":{\"displayName\":\"second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} second\",\"other\":\"in {0} seconds\"},\"past\":{\"one\":\"{0} second ago\",\"other\":\"{0} seconds ago\"}}},\"second-short\":{\"displayName\":\"sec.\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} sec.\",\"other\":\"in {0} sec.\"},\"past\":{\"one\":\"{0} sec. ago\",\"other\":\"{0} sec. ago\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-001\",\"parentLocale\":\"en\",\"fields\":{\"year\":{\"displayName\":\"year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} year\",\"other\":\"in {0} years\"},\"past\":{\"one\":\"{0} year ago\",\"other\":\"{0} years ago\"}}},\"year-short\":{\"displayName\":\"yr\",\"relative\":{\"0\":\"this yr.\",\"1\":\"next yr.\",\"-1\":\"last yr.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} yr\",\"other\":\"in {0} yr\"},\"past\":{\"one\":\"{0} yr ago\",\"other\":\"{0} yr ago\"}}},\"month\":{\"displayName\":\"month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} month\",\"other\":\"in {0} months\"},\"past\":{\"one\":\"{0} month ago\",\"other\":\"{0} months ago\"}}},\"month-short\":{\"displayName\":\"mo\",\"relative\":{\"0\":\"this mo.\",\"1\":\"next mo.\",\"-1\":\"last mo.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} mo\",\"other\":\"in {0} mo\"},\"past\":{\"one\":\"{0} mo ago\",\"other\":\"{0} mo ago\"}}},\"day\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"day-short\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"hour\":{\"displayName\":\"hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hour\",\"other\":\"in {0} hours\"},\"past\":{\"one\":\"{0} hour ago\",\"other\":\"{0} hours ago\"}}},\"hour-short\":{\"displayName\":\"hr\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hr\",\"other\":\"in {0} hr\"},\"past\":{\"one\":\"{0} hr ago\",\"other\":\"{0} hr ago\"}}},\"minute\":{\"displayName\":\"minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} minute\",\"other\":\"in {0} minutes\"},\"past\":{\"one\":\"{0} minute ago\",\"other\":\"{0} minutes ago\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} min\",\"other\":\"in {0} min\"},\"past\":{\"one\":\"{0} min ago\",\"other\":\"{0} min ago\"}}},\"second\":{\"displayName\":\"second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} second\",\"other\":\"in {0} seconds\"},\"past\":{\"one\":\"{0} second ago\",\"other\":\"{0} seconds ago\"}}},\"second-short\":{\"displayName\":\"sec\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} sec\",\"other\":\"in {0} sec\"},\"past\":{\"one\":\"{0} sec ago\",\"other\":\"{0} sec ago\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-150\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-AG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-AI\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-AS\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-AT\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-AU\",\"parentLocale\":\"en-001\",\"fields\":{\"year\":{\"displayName\":\"year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} year\",\"other\":\"in {0} years\"},\"past\":{\"one\":\"{0} year ago\",\"other\":\"{0} years ago\"}}},\"year-short\":{\"displayName\":\"yr\",\"relative\":{\"0\":\"this yr.\",\"1\":\"next yr.\",\"-1\":\"last yr.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} yr\",\"other\":\"in {0} yr\"},\"past\":{\"one\":\"{0} yr ago\",\"other\":\"{0} yr ago\"}}},\"month\":{\"displayName\":\"month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} month\",\"other\":\"in {0} months\"},\"past\":{\"one\":\"{0} month ago\",\"other\":\"{0} months ago\"}}},\"month-short\":{\"displayName\":\"mo\",\"relative\":{\"0\":\"this mo.\",\"1\":\"next mo.\",\"-1\":\"last mo.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} mo\",\"other\":\"in {0} mo\"},\"past\":{\"one\":\"{0} mo ago\",\"other\":\"{0} mo ago\"}}},\"day\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"day-short\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"hour\":{\"displayName\":\"hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hour\",\"other\":\"in {0} hours\"},\"past\":{\"one\":\"{0} hour ago\",\"other\":\"{0} hours ago\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hr\",\"other\":\"in {0} hr\"},\"past\":{\"one\":\"{0} hr ago\",\"other\":\"{0} hr ago\"}}},\"minute\":{\"displayName\":\"minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} minute\",\"other\":\"in {0} minutes\"},\"past\":{\"one\":\"{0} minute ago\",\"other\":\"{0} minutes ago\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} min\",\"other\":\"in {0} min\"},\"past\":{\"one\":\"{0} min ago\",\"other\":\"{0} min ago\"}}},\"second\":{\"displayName\":\"second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} second\",\"other\":\"in {0} seconds\"},\"past\":{\"one\":\"{0} second ago\",\"other\":\"{0} seconds ago\"}}},\"second-short\":{\"displayName\":\"sec\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} sec\",\"other\":\"in {0} sec\"},\"past\":{\"one\":\"{0} sec ago\",\"other\":\"{0} sec ago\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-BB\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-BE\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-BI\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-BM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-BS\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-BW\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-BZ\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-CA\",\"parentLocale\":\"en-001\",\"fields\":{\"year\":{\"displayName\":\"year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} year\",\"other\":\"in {0} years\"},\"past\":{\"one\":\"{0} year ago\",\"other\":\"{0} years ago\"}}},\"year-short\":{\"displayName\":\"yr\",\"relative\":{\"0\":\"this yr.\",\"1\":\"next yr.\",\"-1\":\"last yr.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} yr.\",\"other\":\"in {0} yrs.\"},\"past\":{\"one\":\"{0} yr. ago\",\"other\":\"{0} yrs. ago\"}}},\"month\":{\"displayName\":\"month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} month\",\"other\":\"in {0} months\"},\"past\":{\"one\":\"{0} month ago\",\"other\":\"{0} months ago\"}}},\"month-short\":{\"displayName\":\"mo\",\"relative\":{\"0\":\"this mo.\",\"1\":\"next mo.\",\"-1\":\"last mo.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} mo.\",\"other\":\"in {0} mos.\"},\"past\":{\"one\":\"{0} mo. ago\",\"other\":\"{0} mos. ago\"}}},\"day\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"day-short\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"hour\":{\"displayName\":\"hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hour\",\"other\":\"in {0} hours\"},\"past\":{\"one\":\"{0} hour ago\",\"other\":\"{0} hours ago\"}}},\"hour-short\":{\"displayName\":\"hr\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hr.\",\"other\":\"in {0} hrs.\"},\"past\":{\"one\":\"{0} hr. ago\",\"other\":\"{0} hrs. ago\"}}},\"minute\":{\"displayName\":\"minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} minute\",\"other\":\"in {0} minutes\"},\"past\":{\"one\":\"{0} minute ago\",\"other\":\"{0} minutes ago\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} min.\",\"other\":\"in {0} mins.\"},\"past\":{\"one\":\"{0} min. ago\",\"other\":\"{0} mins. ago\"}}},\"second\":{\"displayName\":\"second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} second\",\"other\":\"in {0} seconds\"},\"past\":{\"one\":\"{0} second ago\",\"other\":\"{0} seconds ago\"}}},\"second-short\":{\"displayName\":\"sec\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} sec.\",\"other\":\"in {0} secs.\"},\"past\":{\"one\":\"{0} sec. ago\",\"other\":\"{0} secs. ago\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-CC\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-CH\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-CK\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-CM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-CX\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-CY\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-DE\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-DG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-DK\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-DM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-Dsrt\",\"pluralRuleFunction\":function (n,ord){if(ord)return\"other\";return\"other\"},\"fields\":{\"year\":{\"displayName\":\"Year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} y\"},\"past\":{\"other\":\"-{0} y\"}}},\"year-short\":{\"displayName\":\"Year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} y\"},\"past\":{\"other\":\"-{0} y\"}}},\"month\":{\"displayName\":\"Month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} m\"},\"past\":{\"other\":\"-{0} m\"}}},\"month-short\":{\"displayName\":\"Month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} m\"},\"past\":{\"other\":\"-{0} m\"}}},\"day\":{\"displayName\":\"Day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} d\"},\"past\":{\"other\":\"-{0} d\"}}},\"day-short\":{\"displayName\":\"Day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} d\"},\"past\":{\"other\":\"-{0} d\"}}},\"hour\":{\"displayName\":\"Hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} h\"},\"past\":{\"other\":\"-{0} h\"}}},\"hour-short\":{\"displayName\":\"Hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} h\"},\"past\":{\"other\":\"-{0} h\"}}},\"minute\":{\"displayName\":\"Minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} min\"},\"past\":{\"other\":\"-{0} min\"}}},\"minute-short\":{\"displayName\":\"Minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} min\"},\"past\":{\"other\":\"-{0} min\"}}},\"second\":{\"displayName\":\"Second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} s\"},\"past\":{\"other\":\"-{0} s\"}}},\"second-short\":{\"displayName\":\"Second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} s\"},\"past\":{\"other\":\"-{0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-ER\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-FI\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-FJ\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-FK\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-FM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GB\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GD\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GH\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GI\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GU\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-GY\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-HK\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-IE\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-IL\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-IM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-IN\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-IO\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-JE\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-JM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-KE\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-KI\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-KN\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-KY\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-LC\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-LR\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-LS\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MH\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MO\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MP\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MS\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MT\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MU\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MW\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-MY\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-NA\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-NF\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-NG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-NL\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-NR\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-NU\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-NZ\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-PG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-PH\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-PK\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-PN\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-PR\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-PW\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-RW\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SB\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SC\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SD\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SE\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SG\",\"parentLocale\":\"en-001\",\"fields\":{\"year\":{\"displayName\":\"year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} year\",\"other\":\"in {0} years\"},\"past\":{\"one\":\"{0} year ago\",\"other\":\"{0} years ago\"}}},\"year-short\":{\"displayName\":\"yr\",\"relative\":{\"0\":\"this yr\",\"1\":\"next yr\",\"-1\":\"last yr\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} yr\",\"other\":\"in {0} yr\"},\"past\":{\"one\":\"{0} yr ago\",\"other\":\"{0} yr ago\"}}},\"month\":{\"displayName\":\"month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} month\",\"other\":\"in {0} months\"},\"past\":{\"one\":\"{0} month ago\",\"other\":\"{0} months ago\"}}},\"month-short\":{\"displayName\":\"mth\",\"relative\":{\"0\":\"this mth\",\"1\":\"next mth\",\"-1\":\"last mth\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} mth\",\"other\":\"in {0} mth\"},\"past\":{\"one\":\"{0} mth ago\",\"other\":\"{0} mth ago\"}}},\"day\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"day-short\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"hour\":{\"displayName\":\"hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hour\",\"other\":\"in {0} hours\"},\"past\":{\"one\":\"{0} hour ago\",\"other\":\"{0} hours ago\"}}},\"hour-short\":{\"displayName\":\"hr\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hr\",\"other\":\"in {0} hr\"},\"past\":{\"one\":\"{0} hr ago\",\"other\":\"{0} hr ago\"}}},\"minute\":{\"displayName\":\"minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} minute\",\"other\":\"in {0} minutes\"},\"past\":{\"one\":\"{0} minute ago\",\"other\":\"{0} minutes ago\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} min\",\"other\":\"in {0} min\"},\"past\":{\"one\":\"{0} min ago\",\"other\":\"{0} min ago\"}}},\"second\":{\"displayName\":\"second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} second\",\"other\":\"in {0} seconds\"},\"past\":{\"one\":\"{0} second ago\",\"other\":\"{0} seconds ago\"}}},\"second-short\":{\"displayName\":\"sec\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} sec\",\"other\":\"in {0} sec\"},\"past\":{\"one\":\"{0} sec ago\",\"other\":\"{0} sec ago\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SH\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SI\",\"parentLocale\":\"en-150\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SL\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SS\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SX\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-SZ\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-Shaw\",\"pluralRuleFunction\":function (n,ord){if(ord)return\"other\";return\"other\"},\"fields\":{\"year\":{\"displayName\":\"Year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} y\"},\"past\":{\"other\":\"-{0} y\"}}},\"year-short\":{\"displayName\":\"Year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} y\"},\"past\":{\"other\":\"-{0} y\"}}},\"month\":{\"displayName\":\"Month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} m\"},\"past\":{\"other\":\"-{0} m\"}}},\"month-short\":{\"displayName\":\"Month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} m\"},\"past\":{\"other\":\"-{0} m\"}}},\"day\":{\"displayName\":\"Day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} d\"},\"past\":{\"other\":\"-{0} d\"}}},\"day-short\":{\"displayName\":\"Day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} d\"},\"past\":{\"other\":\"-{0} d\"}}},\"hour\":{\"displayName\":\"Hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} h\"},\"past\":{\"other\":\"-{0} h\"}}},\"hour-short\":{\"displayName\":\"Hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} h\"},\"past\":{\"other\":\"-{0} h\"}}},\"minute\":{\"displayName\":\"Minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} min\"},\"past\":{\"other\":\"-{0} min\"}}},\"minute-short\":{\"displayName\":\"Minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} min\"},\"past\":{\"other\":\"-{0} min\"}}},\"second\":{\"displayName\":\"Second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} s\"},\"past\":{\"other\":\"-{0} s\"}}},\"second-short\":{\"displayName\":\"Second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"other\":\"+{0} s\"},\"past\":{\"other\":\"-{0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-TC\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-TK\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-TO\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-TT\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-TV\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-TZ\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-UG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-UM\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-US\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-VC\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-VG\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-VI\",\"parentLocale\":\"en\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-VU\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-WS\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-ZA\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-ZM\",\"parentLocale\":\"en-001\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"en-ZW\",\"parentLocale\":\"en-001\"});\n","IntlRelativeFormat.__addLocaleData({\"locale\":\"es\",\"pluralRuleFunction\":function (n,ord){if(ord)return\"other\";return n==1?\"one\":\"other\"},\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-419\",\"parentLocale\":\"es\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-AR\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} días\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} días\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"seg.\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} seg.\",\"other\":\"dentro de {0} seg.\"},\"past\":{\"one\":\"hace {0} seg.\",\"other\":\"hace {0} seg.\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-BO\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-BR\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-BZ\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-CL\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-CO\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-CR\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antier\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-CU\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-DO\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"Año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"Mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"Día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"Minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"Segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-EA\",\"parentLocale\":\"es\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-EC\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-GQ\",\"parentLocale\":\"es\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-GT\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antier\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-HN\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antier\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-IC\",\"parentLocale\":\"es\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-MX\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el año próximo\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"en {0} a\",\"other\":\"en {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el mes próximo\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"en {0} mes\",\"other\":\"en {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"en {0} m\",\"other\":\"en {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antier\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"en {0} día\",\"other\":\"en {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"en {0} h\",\"other\":\"en {0} n\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"en {0} min\",\"other\":\"en {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"en {0} s\",\"other\":\"en {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-NI\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antier\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-PA\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antier\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-PE\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-PH\",\"parentLocale\":\"es\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-PR\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-PY\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antes de ayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"seg.\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} seg.\",\"other\":\"dentro de {0} seg.\"},\"past\":{\"one\":\"hace {0} seg.\",\"other\":\"hace {0} seg.\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-SV\",\"parentLocale\":\"es-419\",\"fields\":{\"year\":{\"displayName\":\"año\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} año\",\"other\":\"dentro de {0} años\"},\"past\":{\"one\":\"hace {0} año\",\"other\":\"hace {0} años\"}}},\"year-short\":{\"displayName\":\"a\",\"relative\":{\"0\":\"este año\",\"1\":\"el próximo año\",\"-1\":\"el año pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} a\",\"other\":\"dentro de {0} a\"},\"past\":{\"one\":\"hace {0} a\",\"other\":\"hace {0} a\"}}},\"month\":{\"displayName\":\"mes\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} mes\",\"other\":\"dentro de {0} meses\"},\"past\":{\"one\":\"hace {0} mes\",\"other\":\"hace {0} meses\"}}},\"month-short\":{\"displayName\":\"m\",\"relative\":{\"0\":\"este mes\",\"1\":\"el próximo mes\",\"-1\":\"el mes pasado\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} m\",\"other\":\"dentro de {0} m\"},\"past\":{\"one\":\"hace {0} m\",\"other\":\"hace {0} m\"}}},\"day\":{\"displayName\":\"día\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"antier\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"day-short\":{\"displayName\":\"d\",\"relative\":{\"0\":\"hoy\",\"1\":\"mañana\",\"2\":\"pasado mañana\",\"-2\":\"anteayer\",\"-1\":\"ayer\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} día\",\"other\":\"dentro de {0} días\"},\"past\":{\"one\":\"hace {0} día\",\"other\":\"hace {0} días\"}}},\"hour\":{\"displayName\":\"hora\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} hora\",\"other\":\"dentro de {0} horas\"},\"past\":{\"one\":\"hace {0} hora\",\"other\":\"hace {0} horas\"}}},\"hour-short\":{\"displayName\":\"h\",\"relative\":{\"0\":\"esta hora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} h\",\"other\":\"dentro de {0} h\"},\"past\":{\"one\":\"hace {0} h\",\"other\":\"hace {0} h\"}}},\"minute\":{\"displayName\":\"minuto\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} minuto\",\"other\":\"dentro de {0} minutos\"},\"past\":{\"one\":\"hace {0} minuto\",\"other\":\"hace {0} minutos\"}}},\"minute-short\":{\"displayName\":\"min\",\"relative\":{\"0\":\"este minuto\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} min\",\"other\":\"dentro de {0} min\"},\"past\":{\"one\":\"hace {0} min\",\"other\":\"hace {0} min\"}}},\"second\":{\"displayName\":\"segundo\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} segundo\",\"other\":\"dentro de {0} segundos\"},\"past\":{\"one\":\"hace {0} segundo\",\"other\":\"hace {0} segundos\"}}},\"second-short\":{\"displayName\":\"s\",\"relative\":{\"0\":\"ahora\"},\"relativeTime\":{\"future\":{\"one\":\"dentro de {0} s\",\"other\":\"dentro de {0} s\"},\"past\":{\"one\":\"hace {0} s\",\"other\":\"hace {0} s\"}}}}});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-US\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-UY\",\"parentLocale\":\"es-419\"});\nIntlRelativeFormat.__addLocaleData({\"locale\":\"es-VE\",\"parentLocale\":\"es-419\"});\n","/* jshint node:true */\n\n'use strict';\n\nvar IntlRelativeFormat = require('./lib/main')['default'];\n\n// Add all locale data to `IntlRelativeFormat`. This module will be ignored when\n// bundling for the browser with Browserify/Webpack.\nrequire('./lib/locales');\n\n// Re-export `IntlRelativeFormat` as the CommonJS default exports with all the\n// locale data registered, and with English set as the default locale. Define\n// the `default` prop for use with other compiled ES6 Modules.\nexports = module.exports = IntlRelativeFormat;\nexports['default'] = exports;\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\nvar intl$messageformat$$ = require(\"intl-messageformat\"), src$diff$$ = require(\"./diff\"), src$es5$$ = require(\"./es5\");\nexports[\"default\"] = RelativeFormat;\n\n// -----------------------------------------------------------------------------\n\nvar FIELDS = [\n    'second', 'second-short',\n    'minute', 'minute-short',\n    'hour', 'hour-short',\n    'day', 'day-short',\n    'month', 'month-short',\n    'year', 'year-short'\n];\nvar STYLES = ['best fit', 'numeric'];\n\n// -- RelativeFormat -----------------------------------------------------------\n\nfunction RelativeFormat(locales, options) {\n    options = options || {};\n\n    // Make a copy of `locales` if it's an array, so that it doesn't change\n    // since it's used lazily.\n    if (src$es5$$.isArray(locales)) {\n        locales = locales.concat();\n    }\n\n    src$es5$$.defineProperty(this, '_locale', {value: this._resolveLocale(locales)});\n    src$es5$$.defineProperty(this, '_options', {value: {\n        style: this._resolveStyle(options.style),\n        units: this._isValidUnits(options.units) && options.units\n    }});\n\n    src$es5$$.defineProperty(this, '_locales', {value: locales});\n    src$es5$$.defineProperty(this, '_fields', {value: this._findFields(this._locale)});\n    src$es5$$.defineProperty(this, '_messages', {value: src$es5$$.objCreate(null)});\n\n    // \"Bind\" `format()` method to `this` so it can be passed by reference like\n    // the other `Intl` APIs.\n    var relativeFormat = this;\n    this.format = function format(date, options) {\n        return relativeFormat._format(date, options);\n    };\n}\n\n// Define internal private properties for dealing with locale data.\nsrc$es5$$.defineProperty(RelativeFormat, '__localeData__', {value: src$es5$$.objCreate(null)});\nsrc$es5$$.defineProperty(RelativeFormat, '__addLocaleData', {value: function (data) {\n    if (!(data && data.locale)) {\n        throw new Error(\n            'Locale data provided to IntlRelativeFormat is missing a ' +\n            '`locale` property value'\n        );\n    }\n\n    RelativeFormat.__localeData__[data.locale.toLowerCase()] = data;\n\n    // Add data to IntlMessageFormat.\n    intl$messageformat$$[\"default\"].__addLocaleData(data);\n}});\n\n// Define public `defaultLocale` property which can be set by the developer, or\n// it will be set when the first RelativeFormat instance is created by\n// leveraging the resolved locale from `Intl`.\nsrc$es5$$.defineProperty(RelativeFormat, 'defaultLocale', {\n    enumerable: true,\n    writable  : true,\n    value     : undefined\n});\n\n// Define public `thresholds` property which can be set by the developer, and\n// defaults to relative time thresholds from moment.js.\nsrc$es5$$.defineProperty(RelativeFormat, 'thresholds', {\n    enumerable: true,\n\n    value: {\n        second: 45, 'second-short': 45,  // seconds to minute\n        minute: 45, 'minute-short': 45, // minutes to hour\n        hour  : 22, 'hour-short': 22, // hours to day\n        day   : 26, 'day-short': 26, // days to month\n        month : 11, 'month-short': 11 // months to year\n    }\n});\n\nRelativeFormat.prototype.resolvedOptions = function () {\n    return {\n        locale: this._locale,\n        style : this._options.style,\n        units : this._options.units\n    };\n};\n\nRelativeFormat.prototype._compileMessage = function (units) {\n    // `this._locales` is the original set of locales the user specified to the\n    // constructor, while `this._locale` is the resolved root locale.\n    var locales        = this._locales;\n    var resolvedLocale = this._locale;\n\n    var field        = this._fields[units];\n    var relativeTime = field.relativeTime;\n    var future       = '';\n    var past         = '';\n    var i;\n\n    for (i in relativeTime.future) {\n        if (relativeTime.future.hasOwnProperty(i)) {\n            future += ' ' + i + ' {' +\n                relativeTime.future[i].replace('{0}', '#') + '}';\n        }\n    }\n\n    for (i in relativeTime.past) {\n        if (relativeTime.past.hasOwnProperty(i)) {\n            past += ' ' + i + ' {' +\n                relativeTime.past[i].replace('{0}', '#') + '}';\n        }\n    }\n\n    var message = '{when, select, future {{0, plural, ' + future + '}}' +\n                                 'past {{0, plural, ' + past + '}}}';\n\n    // Create the synthetic IntlMessageFormat instance using the original\n    // locales value specified by the user when constructing the the parent\n    // IntlRelativeFormat instance.\n    return new intl$messageformat$$[\"default\"](message, locales);\n};\n\nRelativeFormat.prototype._getMessage = function (units) {\n    var messages = this._messages;\n\n    // Create a new synthetic message based on the locale data from CLDR.\n    if (!messages[units]) {\n        messages[units] = this._compileMessage(units);\n    }\n\n    return messages[units];\n};\n\nRelativeFormat.prototype._getRelativeUnits = function (diff, units) {\n    var field = this._fields[units];\n\n    if (field.relative) {\n        return field.relative[diff];\n    }\n};\n\nRelativeFormat.prototype._findFields = function (locale) {\n    var localeData = RelativeFormat.__localeData__;\n    var data       = localeData[locale.toLowerCase()];\n\n    // The locale data is de-duplicated, so we have to traverse the locale's\n    // hierarchy until we find `fields` to return.\n    while (data) {\n        if (data.fields) {\n            return data.fields;\n        }\n\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n    }\n\n    throw new Error(\n        'Locale data added to IntlRelativeFormat is missing `fields` for :' +\n        locale\n    );\n};\n\nRelativeFormat.prototype._format = function (date, options) {\n    var now = options && options.now !== undefined ? options.now : src$es5$$.dateNow();\n\n    if (date === undefined) {\n        date = now;\n    }\n\n    // Determine if the `date` and optional `now` values are valid, and throw a\n    // similar error to what `Intl.DateTimeFormat#format()` would throw.\n    if (!isFinite(now)) {\n        throw new RangeError(\n            'The `now` option provided to IntlRelativeFormat#format() is not ' +\n            'in valid range.'\n        );\n    }\n\n    if (!isFinite(date)) {\n        throw new RangeError(\n            'The date value provided to IntlRelativeFormat#format() is not ' +\n            'in valid range.'\n        );\n    }\n\n    var diffReport  = src$diff$$[\"default\"](now, date);\n    var units       = this._options.units || this._selectUnits(diffReport);\n    var diffInUnits = diffReport[units];\n\n    if (this._options.style !== 'numeric') {\n        var relativeUnits = this._getRelativeUnits(diffInUnits, units);\n        if (relativeUnits) {\n            return relativeUnits;\n        }\n    }\n\n    return this._getMessage(units).format({\n        '0' : Math.abs(diffInUnits),\n        when: diffInUnits < 0 ? 'past' : 'future'\n    });\n};\n\nRelativeFormat.prototype._isValidUnits = function (units) {\n    if (!units || src$es5$$.arrIndexOf.call(FIELDS, units) >= 0) {\n        return true;\n    }\n\n    if (typeof units === 'string') {\n        var suggestion = /s$/.test(units) && units.substr(0, units.length - 1);\n        if (suggestion && src$es5$$.arrIndexOf.call(FIELDS, suggestion) >= 0) {\n            throw new Error(\n                '\"' + units + '\" is not a valid IntlRelativeFormat `units` ' +\n                'value, did you mean: ' + suggestion\n            );\n        }\n    }\n\n    throw new Error(\n        '\"' + units + '\" is not a valid IntlRelativeFormat `units` value, it ' +\n        'must be one of: \"' + FIELDS.join('\", \"') + '\"'\n    );\n};\n\nRelativeFormat.prototype._resolveLocale = function (locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(RelativeFormat.defaultLocale);\n\n    var localeData = RelativeFormat.__localeData__;\n    var i, len, localeParts, data;\n\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n        localeParts = locales[i].toLowerCase().split('-');\n\n        while (localeParts.length) {\n            data = localeData[localeParts.join('-')];\n            if (data) {\n                // Return the normalized locale string; e.g., we return \"en-US\",\n                // instead of \"en-us\".\n                return data.locale;\n            }\n\n            localeParts.pop();\n        }\n    }\n\n    var defaultLocale = locales.pop();\n    throw new Error(\n        'No locale data has been added to IntlRelativeFormat for: ' +\n        locales.join(', ') + ', or the default locale: ' + defaultLocale\n    );\n};\n\nRelativeFormat.prototype._resolveStyle = function (style) {\n    // Default to \"best fit\" style.\n    if (!style) {\n        return STYLES[0];\n    }\n\n    if (src$es5$$.arrIndexOf.call(STYLES, style) >= 0) {\n        return style;\n    }\n\n    throw new Error(\n        '\"' + style + '\" is not a valid IntlRelativeFormat `style` value, it ' +\n        'must be one of: \"' + STYLES.join('\", \"') + '\"'\n    );\n};\n\nRelativeFormat.prototype._selectUnits = function (diffReport) {\n    var i, l, units;\n    var fields = FIELDS.filter(function(field) {\n        return field.indexOf('-short') < 1;\n    });\n\n    for (i = 0, l = fields.length; i < l; i += 1) {\n        units = fields[i];\n\n        if (Math.abs(diffReport[units]) < RelativeFormat.thresholds[units]) {\n            break;\n        }\n    }\n\n    return units;\n};\n\n//# sourceMappingURL=core.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\n\nvar round = Math.round;\n\nfunction daysToYears(days) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    return days * 400 / 146097;\n}\n\nexports[\"default\"] = function (from, to) {\n    // Convert to ms timestamps.\n    from = +from;\n    to   = +to;\n\n    var millisecond = round(to - from),\n        second      = round(millisecond / 1000),\n        minute      = round(second / 60),\n        hour        = round(minute / 60),\n        day         = round(hour / 24),\n        week        = round(day / 7);\n\n    var rawYears = daysToYears(day),\n        month    = round(rawYears * 12),\n        year     = round(rawYears);\n\n    return {\n        millisecond    : millisecond,\n        second         : second,\n        'second-short' : second,\n        minute         : minute,\n        'minute-short' : minute,\n        hour           : hour,\n        'hour-short'   : hour,\n        day            : day,\n        'day-short'    : day,\n        week           : week,\n        'week-short'   : week,\n        month          : month,\n        'month-short'  : month,\n        year           : year,\n        'year-short'   : year\n    };\n};\n\n//# sourceMappingURL=diff.js.map","// GENERATED FILE\n\"use strict\";\nexports[\"default\"] = {\"locale\":\"en\",\"pluralRuleFunction\":function (n,ord){var s=String(n).split(\".\"),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?\"one\":n10==2&&n100!=12?\"two\":n10==3&&n100!=13?\"few\":\"other\";return n==1&&v0?\"one\":\"other\"},\"fields\":{\"year\":{\"displayName\":\"year\",\"relative\":{\"0\":\"this year\",\"1\":\"next year\",\"-1\":\"last year\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} year\",\"other\":\"in {0} years\"},\"past\":{\"one\":\"{0} year ago\",\"other\":\"{0} years ago\"}}},\"year-short\":{\"displayName\":\"yr.\",\"relative\":{\"0\":\"this yr.\",\"1\":\"next yr.\",\"-1\":\"last yr.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} yr.\",\"other\":\"in {0} yr.\"},\"past\":{\"one\":\"{0} yr. ago\",\"other\":\"{0} yr. ago\"}}},\"month\":{\"displayName\":\"month\",\"relative\":{\"0\":\"this month\",\"1\":\"next month\",\"-1\":\"last month\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} month\",\"other\":\"in {0} months\"},\"past\":{\"one\":\"{0} month ago\",\"other\":\"{0} months ago\"}}},\"month-short\":{\"displayName\":\"mo.\",\"relative\":{\"0\":\"this mo.\",\"1\":\"next mo.\",\"-1\":\"last mo.\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} mo.\",\"other\":\"in {0} mo.\"},\"past\":{\"one\":\"{0} mo. ago\",\"other\":\"{0} mo. ago\"}}},\"day\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"day-short\":{\"displayName\":\"day\",\"relative\":{\"0\":\"today\",\"1\":\"tomorrow\",\"-1\":\"yesterday\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} day\",\"other\":\"in {0} days\"},\"past\":{\"one\":\"{0} day ago\",\"other\":\"{0} days ago\"}}},\"hour\":{\"displayName\":\"hour\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hour\",\"other\":\"in {0} hours\"},\"past\":{\"one\":\"{0} hour ago\",\"other\":\"{0} hours ago\"}}},\"hour-short\":{\"displayName\":\"hr.\",\"relative\":{\"0\":\"this hour\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} hr.\",\"other\":\"in {0} hr.\"},\"past\":{\"one\":\"{0} hr. ago\",\"other\":\"{0} hr. ago\"}}},\"minute\":{\"displayName\":\"minute\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} minute\",\"other\":\"in {0} minutes\"},\"past\":{\"one\":\"{0} minute ago\",\"other\":\"{0} minutes ago\"}}},\"minute-short\":{\"displayName\":\"min.\",\"relative\":{\"0\":\"this minute\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} min.\",\"other\":\"in {0} min.\"},\"past\":{\"one\":\"{0} min. ago\",\"other\":\"{0} min. ago\"}}},\"second\":{\"displayName\":\"second\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} second\",\"other\":\"in {0} seconds\"},\"past\":{\"one\":\"{0} second ago\",\"other\":\"{0} seconds ago\"}}},\"second-short\":{\"displayName\":\"sec.\",\"relative\":{\"0\":\"now\"},\"relativeTime\":{\"future\":{\"one\":\"in {0} sec.\",\"other\":\"in {0} sec.\"},\"past\":{\"one\":\"{0} sec. ago\",\"other\":\"{0} sec. ago\"}}}}};\n\n//# sourceMappingURL=en.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n// Purposely using the same implementation as the Intl.js `Intl` polyfill.\n// Copyright 2013 Andy Earnshaw, MIT License\n\n\"use strict\";\n\nvar hop = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nvar realDefineProp = (function () {\n    try { return !!Object.defineProperty({}, 'a', {}); }\n    catch (e) { return false; }\n})();\n\nvar es3 = !realDefineProp && !Object.prototype.__defineGetter__;\n\nvar defineProperty = realDefineProp ? Object.defineProperty :\n        function (obj, name, desc) {\n\n    if ('get' in desc && obj.__defineGetter__) {\n        obj.__defineGetter__(name, desc.get);\n    } else if (!hop.call(obj, name) || 'value' in desc) {\n        obj[name] = desc.value;\n    }\n};\n\nvar objCreate = Object.create || function (proto, props) {\n    var obj, k;\n\n    function F() {}\n    F.prototype = proto;\n    obj = new F();\n\n    for (k in props) {\n        if (hop.call(props, k)) {\n            defineProperty(obj, k, props[k]);\n        }\n    }\n\n    return obj;\n};\n\nvar arrIndexOf = Array.prototype.indexOf || function (search, fromIndex) {\n    /*jshint validthis:true */\n    var arr = this;\n    if (!arr.length) {\n        return -1;\n    }\n\n    for (var i = fromIndex || 0, max = arr.length; i < max; i++) {\n        if (arr[i] === search) {\n            return i;\n        }\n    }\n\n    return -1;\n};\n\nvar isArray = Array.isArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n};\n\nvar dateNow = Date.now || function () {\n    return new Date().getTime();\n};\n\nexports.defineProperty = defineProperty, exports.objCreate = objCreate, exports.arrIndexOf = arrIndexOf, exports.isArray = isArray, exports.dateNow = dateNow;\n\n//# sourceMappingURL=es5.js.map","// Expose `IntlPolyfill` as global to add locale data into runtime later on.\nglobal.IntlPolyfill = require('./lib/core.js');\n\n// Require all locale data for `Intl`. This module will be\n// ignored when bundling for the browser with Browserify/Webpack.\nrequire('./locale-data/complete.js');\n\n// hack to export the polyfill as global Intl if needed\nif (!global.Intl) {\n    global.Intl = global.IntlPolyfill;\n    global.IntlPolyfill.__applyLocaleSensitivePrototypes();\n}\n\n// providing an idiomatic api for the nodejs version of this module\nmodule.exports = global.IntlPolyfill;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nvar jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nvar asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            return step(\"next\", value);\n          }, function (err) {\n            return step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineEnumerableProperties = function (obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nvar defaults = function (obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nvar defineProperty$1 = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar _instanceof = function (left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nvar interopRequireDefault = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nvar interopRequireWildcard = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nvar newArrowCheck = function (innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nvar objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar selfGlobal = typeof global === \"undefined\" ? self : global;\n\nvar set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar slicedToArrayLoose = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nvar taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nvar taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nvar temporalRef = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nvar temporalUndefined = {};\n\nvar toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n\n\nvar babelHelpers$1 = Object.freeze({\n  jsx: jsx,\n  asyncToGenerator: asyncToGenerator,\n  classCallCheck: classCallCheck,\n  createClass: createClass,\n  defineEnumerableProperties: defineEnumerableProperties,\n  defaults: defaults,\n  defineProperty: defineProperty$1,\n  get: get,\n  inherits: inherits,\n  interopRequireDefault: interopRequireDefault,\n  interopRequireWildcard: interopRequireWildcard,\n  newArrowCheck: newArrowCheck,\n  objectDestructuringEmpty: objectDestructuringEmpty,\n  objectWithoutProperties: objectWithoutProperties,\n  possibleConstructorReturn: possibleConstructorReturn,\n  selfGlobal: selfGlobal,\n  set: set,\n  slicedToArray: slicedToArray,\n  slicedToArrayLoose: slicedToArrayLoose,\n  taggedTemplateLiteral: taggedTemplateLiteral,\n  taggedTemplateLiteralLoose: taggedTemplateLiteralLoose,\n  temporalRef: temporalRef,\n  temporalUndefined: temporalUndefined,\n  toArray: toArray,\n  toConsumableArray: toConsumableArray,\n  typeof: _typeof,\n  extends: _extends,\n  instanceof: _instanceof\n});\n\nvar realDefineProp = function () {\n    var sentinel = function sentinel() {};\n    try {\n        Object.defineProperty(sentinel, 'a', {\n            get: function get() {\n                return 1;\n            }\n        });\n        Object.defineProperty(sentinel, 'prototype', { writable: false });\n        return sentinel.a === 1 && sentinel.prototype instanceof Object;\n    } catch (e) {\n        return false;\n    }\n}();\n\n// Need a workaround for getters in ES3\nvar es3 = !realDefineProp && !Object.prototype.__defineGetter__;\n\n// We use this a lot (and need it for proto-less objects)\nvar hop = Object.prototype.hasOwnProperty;\n\n// Naive defineProperty for compatibility\nvar defineProperty = realDefineProp ? Object.defineProperty : function (obj, name, desc) {\n    if ('get' in desc && obj.__defineGetter__) obj.__defineGetter__(name, desc.get);else if (!hop.call(obj, name) || 'value' in desc) obj[name] = desc.value;\n};\n\n// Array.prototype.indexOf, as good as we need it to be\nvar arrIndexOf = Array.prototype.indexOf || function (search) {\n    /*jshint validthis:true */\n    var t = this;\n    if (!t.length) return -1;\n\n    for (var i = arguments[1] || 0, max = t.length; i < max; i++) {\n        if (t[i] === search) return i;\n    }\n\n    return -1;\n};\n\n// Create an object with the specified prototype (2nd arg required for Record)\nvar objCreate = Object.create || function (proto, props) {\n    var obj = void 0;\n\n    function F() {}\n    F.prototype = proto;\n    obj = new F();\n\n    for (var k in props) {\n        if (hop.call(props, k)) defineProperty(obj, k, props[k]);\n    }\n\n    return obj;\n};\n\n// Snapshot some (hopefully still) native built-ins\nvar arrSlice = Array.prototype.slice;\nvar arrConcat = Array.prototype.concat;\nvar arrPush = Array.prototype.push;\nvar arrJoin = Array.prototype.join;\nvar arrShift = Array.prototype.shift;\n\n// Naive Function.prototype.bind for compatibility\nvar fnBind = Function.prototype.bind || function (thisObj) {\n    var fn = this,\n        args = arrSlice.call(arguments, 1);\n\n    // All our (presently) bound functions have either 1 or 0 arguments. By returning\n    // different function signatures, we can pass some tests in ES3 environments\n    if (fn.length === 1) {\n        return function () {\n            return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n        };\n    }\n    return function () {\n        return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n    };\n};\n\n// Object housing internal properties for constructors\nvar internals = objCreate(null);\n\n// Keep internal properties internal\nvar secret = Math.random();\n\n// Helper functions\n// ================\n\n/**\n * A function to deal with the inaccuracy of calculating log10 in pre-ES6\n * JavaScript environments. Math.log(num) / Math.LN10 was responsible for\n * causing issue #62.\n */\nfunction log10Floor(n) {\n    // ES6 provides the more accurate Math.log10\n    if (typeof Math.log10 === 'function') return Math.floor(Math.log10(n));\n\n    var x = Math.round(Math.log(n) * Math.LOG10E);\n    return x - (Number('1e' + x) > n);\n}\n\n/**\n * A map that doesn't contain Object in its prototype chain\n */\nfunction Record(obj) {\n    // Copy only own properties over unless this object is already a Record instance\n    for (var k in obj) {\n        if (obj instanceof Record || hop.call(obj, k)) defineProperty(this, k, { value: obj[k], enumerable: true, writable: true, configurable: true });\n    }\n}\nRecord.prototype = objCreate(null);\n\n/**\n * An ordered list\n */\nfunction List() {\n    defineProperty(this, 'length', { writable: true, value: 0 });\n\n    if (arguments.length) arrPush.apply(this, arrSlice.call(arguments));\n}\nList.prototype = objCreate(null);\n\n/**\n * Constructs a regular expression to restore tainted RegExp properties\n */\nfunction createRegExpRestore() {\n    if (internals.disableRegExpRestore) {\n        return function () {/* no-op */};\n    }\n\n    var regExpCache = {\n        lastMatch: RegExp.lastMatch || '',\n        leftContext: RegExp.leftContext,\n        multiline: RegExp.multiline,\n        input: RegExp.input\n    },\n        has = false;\n\n    // Create a snapshot of all the 'captured' properties\n    for (var i = 1; i <= 9; i++) {\n        has = (regExpCache['$' + i] = RegExp['$' + i]) || has;\n    }return function () {\n        // Now we've snapshotted some properties, escape the lastMatch string\n        var esc = /[.?*+^$[\\]\\\\(){}|-]/g,\n            lm = regExpCache.lastMatch.replace(esc, '\\\\$&'),\n            reg = new List();\n\n        // If any of the captured strings were non-empty, iterate over them all\n        if (has) {\n            for (var _i = 1; _i <= 9; _i++) {\n                var m = regExpCache['$' + _i];\n\n                // If it's empty, add an empty capturing group\n                if (!m) lm = '()' + lm;\n\n                // Else find the string in lm and escape & wrap it to capture it\n                else {\n                        m = m.replace(esc, '\\\\$&');\n                        lm = lm.replace(m, '(' + m + ')');\n                    }\n\n                // Push it to the reg and chop lm to make sure further groups come after\n                arrPush.call(reg, lm.slice(0, lm.indexOf('(') + 1));\n                lm = lm.slice(lm.indexOf('(') + 1);\n            }\n        }\n\n        var exprStr = arrJoin.call(reg, '') + lm;\n\n        // Shorten the regex by replacing each part of the expression with a match\n        // for a string of that exact length.  This is safe for the type of\n        // expressions generated above, because the expression matches the whole\n        // match string, so we know each group and each segment between capturing\n        // groups can be matched by its length alone.\n        exprStr = exprStr.replace(/(\\\\\\(|\\\\\\)|[^()])+/g, function (match) {\n            return '[\\\\s\\\\S]{' + match.replace('\\\\', '').length + '}';\n        });\n\n        // Create the regular expression that will reconstruct the RegExp properties\n        var expr = new RegExp(exprStr, regExpCache.multiline ? 'gm' : 'g');\n\n        // Set the lastIndex of the generated expression to ensure that the match\n        // is found in the correct index.\n        expr.lastIndex = regExpCache.leftContext.length;\n\n        expr.exec(regExpCache.input);\n    };\n}\n\n/**\n * Mimics ES5's abstract ToObject() function\n */\nfunction toObject(arg) {\n    if (arg === null) throw new TypeError('Cannot convert null or undefined to object');\n\n    if ((typeof arg === 'undefined' ? 'undefined' : babelHelpers$1['typeof'](arg)) === 'object') return arg;\n    return Object(arg);\n}\n\nfunction toNumber(arg) {\n    if (typeof arg === 'number') return arg;\n    return Number(arg);\n}\n\nfunction toInteger(arg) {\n    var number = toNumber(arg);\n    if (isNaN(number)) return 0;\n    if (number === +0 || number === -0 || number === +Infinity || number === -Infinity) return number;\n    if (number < 0) return Math.floor(Math.abs(number)) * -1;\n    return Math.floor(Math.abs(number));\n}\n\nfunction toLength(arg) {\n    var len = toInteger(arg);\n    if (len <= 0) return 0;\n    if (len === Infinity) return Math.pow(2, 53) - 1;\n    return Math.min(len, Math.pow(2, 53) - 1);\n}\n\n/**\n * Returns \"internal\" properties for an object\n */\nfunction getInternalProperties(obj) {\n    if (hop.call(obj, '__getInternalProperties')) return obj.__getInternalProperties(secret);\n\n    return objCreate(null);\n}\n\n/**\n* Defines regular expressions for various operations related to the BCP 47 syntax,\n* as defined at http://tools.ietf.org/html/bcp47#section-2.1\n*/\n\n// extlang       = 3ALPHA              ; selected ISO 639 codes\n//                 *2(\"-\" 3ALPHA)      ; permanently reserved\nvar extlang = '[a-z]{3}(?:-[a-z]{3}){0,2}';\n\n// language      = 2*3ALPHA            ; shortest ISO 639 code\n//                 [\"-\" extlang]       ; sometimes followed by\n//                                     ; extended language subtags\n//               / 4ALPHA              ; or reserved for future use\n//               / 5*8ALPHA            ; or registered language subtag\nvar language = '(?:[a-z]{2,3}(?:-' + extlang + ')?|[a-z]{4}|[a-z]{5,8})';\n\n// script        = 4ALPHA              ; ISO 15924 code\nvar script = '[a-z]{4}';\n\n// region        = 2ALPHA              ; ISO 3166-1 code\n//               / 3DIGIT              ; UN M.49 code\nvar region = '(?:[a-z]{2}|\\\\d{3})';\n\n// variant       = 5*8alphanum         ; registered variants\n//               / (DIGIT 3alphanum)\nvar variant = '(?:[a-z0-9]{5,8}|\\\\d[a-z0-9]{3})';\n\n//                                     ; Single alphanumerics\n//                                     ; \"x\" reserved for private use\n// singleton     = DIGIT               ; 0 - 9\n//               / %x41-57             ; A - W\n//               / %x59-5A             ; Y - Z\n//               / %x61-77             ; a - w\n//               / %x79-7A             ; y - z\nvar singleton = '[0-9a-wy-z]';\n\n// extension     = singleton 1*(\"-\" (2*8alphanum))\nvar extension = singleton + '(?:-[a-z0-9]{2,8})+';\n\n// privateuse    = \"x\" 1*(\"-\" (1*8alphanum))\nvar privateuse = 'x(?:-[a-z0-9]{1,8})+';\n\n// irregular     = \"en-GB-oed\"         ; irregular tags do not match\n//               / \"i-ami\"             ; the 'langtag' production and\n//               / \"i-bnn\"             ; would not otherwise be\n//               / \"i-default\"         ; considered 'well-formed'\n//               / \"i-enochian\"        ; These tags are all valid,\n//               / \"i-hak\"             ; but most are deprecated\n//               / \"i-klingon\"         ; in favor of more modern\n//               / \"i-lux\"             ; subtags or subtag\n//               / \"i-mingo\"           ; combination\n//               / \"i-navajo\"\n//               / \"i-pwn\"\n//               / \"i-tao\"\n//               / \"i-tay\"\n//               / \"i-tsu\"\n//               / \"sgn-BE-FR\"\n//               / \"sgn-BE-NL\"\n//               / \"sgn-CH-DE\"\nvar irregular = '(?:en-GB-oed' + '|i-(?:ami|bnn|default|enochian|hak|klingon|lux|mingo|navajo|pwn|tao|tay|tsu)' + '|sgn-(?:BE-FR|BE-NL|CH-DE))';\n\n// regular       = \"art-lojban\"        ; these tags match the 'langtag'\n//               / \"cel-gaulish\"       ; production, but their subtags\n//               / \"no-bok\"            ; are not extended language\n//               / \"no-nyn\"            ; or variant subtags: their meaning\n//               / \"zh-guoyu\"          ; is defined by their registration\n//               / \"zh-hakka\"          ; and all of these are deprecated\n//               / \"zh-min\"            ; in favor of a more modern\n//               / \"zh-min-nan\"        ; subtag or sequence of subtags\n//               / \"zh-xiang\"\nvar regular = '(?:art-lojban|cel-gaulish|no-bok|no-nyn' + '|zh-(?:guoyu|hakka|min|min-nan|xiang))';\n\n// grandfathered = irregular           ; non-redundant tags registered\n//               / regular             ; during the RFC 3066 era\nvar grandfathered = '(?:' + irregular + '|' + regular + ')';\n\n// langtag       = language\n//                 [\"-\" script]\n//                 [\"-\" region]\n//                 *(\"-\" variant)\n//                 *(\"-\" extension)\n//                 [\"-\" privateuse]\nvar langtag = language + '(?:-' + script + ')?(?:-' + region + ')?(?:-' + variant + ')*(?:-' + extension + ')*(?:-' + privateuse + ')?';\n\n// Language-Tag  = langtag             ; normal language tags\n//               / privateuse          ; private use tag\n//               / grandfathered       ; grandfathered tags\nvar expBCP47Syntax = RegExp('^(?:' + langtag + '|' + privateuse + '|' + grandfathered + ')$', 'i');\n\n// Match duplicate variants in a language tag\nvar expVariantDupes = RegExp('^(?!x).*?-(' + variant + ')-(?:\\\\w{4,8}-(?!x-))*\\\\1\\\\b', 'i');\n\n// Match duplicate singletons in a language tag (except in private use)\nvar expSingletonDupes = RegExp('^(?!x).*?-(' + singleton + ')-(?:\\\\w+-(?!x-))*\\\\1\\\\b', 'i');\n\n// Match all extension sequences\nvar expExtSequences = RegExp('-' + extension, 'ig');\n\n// Default locale is the first-added locale data for us\nvar defaultLocale = void 0;\nfunction setDefaultLocale(locale) {\n    defaultLocale = locale;\n}\n\n// IANA Subtag Registry redundant tag and subtag maps\nvar redundantTags = {\n    tags: {\n        \"art-lojban\": \"jbo\",\n        \"i-ami\": \"ami\",\n        \"i-bnn\": \"bnn\",\n        \"i-hak\": \"hak\",\n        \"i-klingon\": \"tlh\",\n        \"i-lux\": \"lb\",\n        \"i-navajo\": \"nv\",\n        \"i-pwn\": \"pwn\",\n        \"i-tao\": \"tao\",\n        \"i-tay\": \"tay\",\n        \"i-tsu\": \"tsu\",\n        \"no-bok\": \"nb\",\n        \"no-nyn\": \"nn\",\n        \"sgn-BE-FR\": \"sfb\",\n        \"sgn-BE-NL\": \"vgt\",\n        \"sgn-CH-DE\": \"sgg\",\n        \"zh-guoyu\": \"cmn\",\n        \"zh-hakka\": \"hak\",\n        \"zh-min-nan\": \"nan\",\n        \"zh-xiang\": \"hsn\",\n        \"sgn-BR\": \"bzs\",\n        \"sgn-CO\": \"csn\",\n        \"sgn-DE\": \"gsg\",\n        \"sgn-DK\": \"dsl\",\n        \"sgn-ES\": \"ssp\",\n        \"sgn-FR\": \"fsl\",\n        \"sgn-GB\": \"bfi\",\n        \"sgn-GR\": \"gss\",\n        \"sgn-IE\": \"isg\",\n        \"sgn-IT\": \"ise\",\n        \"sgn-JP\": \"jsl\",\n        \"sgn-MX\": \"mfs\",\n        \"sgn-NI\": \"ncs\",\n        \"sgn-NL\": \"dse\",\n        \"sgn-NO\": \"nsl\",\n        \"sgn-PT\": \"psr\",\n        \"sgn-SE\": \"swl\",\n        \"sgn-US\": \"ase\",\n        \"sgn-ZA\": \"sfs\",\n        \"zh-cmn\": \"cmn\",\n        \"zh-cmn-Hans\": \"cmn-Hans\",\n        \"zh-cmn-Hant\": \"cmn-Hant\",\n        \"zh-gan\": \"gan\",\n        \"zh-wuu\": \"wuu\",\n        \"zh-yue\": \"yue\"\n    },\n    subtags: {\n        BU: \"MM\",\n        DD: \"DE\",\n        FX: \"FR\",\n        TP: \"TL\",\n        YD: \"YE\",\n        ZR: \"CD\",\n        heploc: \"alalc97\",\n        'in': \"id\",\n        iw: \"he\",\n        ji: \"yi\",\n        jw: \"jv\",\n        mo: \"ro\",\n        ayx: \"nun\",\n        bjd: \"drl\",\n        ccq: \"rki\",\n        cjr: \"mom\",\n        cka: \"cmr\",\n        cmk: \"xch\",\n        drh: \"khk\",\n        drw: \"prs\",\n        gav: \"dev\",\n        hrr: \"jal\",\n        ibi: \"opa\",\n        kgh: \"kml\",\n        lcq: \"ppr\",\n        mst: \"mry\",\n        myt: \"mry\",\n        sca: \"hle\",\n        tie: \"ras\",\n        tkk: \"twm\",\n        tlw: \"weo\",\n        tnf: \"prs\",\n        ybd: \"rki\",\n        yma: \"lrr\"\n    },\n    extLang: {\n        aao: [\"aao\", \"ar\"],\n        abh: [\"abh\", \"ar\"],\n        abv: [\"abv\", \"ar\"],\n        acm: [\"acm\", \"ar\"],\n        acq: [\"acq\", \"ar\"],\n        acw: [\"acw\", \"ar\"],\n        acx: [\"acx\", \"ar\"],\n        acy: [\"acy\", \"ar\"],\n        adf: [\"adf\", \"ar\"],\n        ads: [\"ads\", \"sgn\"],\n        aeb: [\"aeb\", \"ar\"],\n        aec: [\"aec\", \"ar\"],\n        aed: [\"aed\", \"sgn\"],\n        aen: [\"aen\", \"sgn\"],\n        afb: [\"afb\", \"ar\"],\n        afg: [\"afg\", \"sgn\"],\n        ajp: [\"ajp\", \"ar\"],\n        apc: [\"apc\", \"ar\"],\n        apd: [\"apd\", \"ar\"],\n        arb: [\"arb\", \"ar\"],\n        arq: [\"arq\", \"ar\"],\n        ars: [\"ars\", \"ar\"],\n        ary: [\"ary\", \"ar\"],\n        arz: [\"arz\", \"ar\"],\n        ase: [\"ase\", \"sgn\"],\n        asf: [\"asf\", \"sgn\"],\n        asp: [\"asp\", \"sgn\"],\n        asq: [\"asq\", \"sgn\"],\n        asw: [\"asw\", \"sgn\"],\n        auz: [\"auz\", \"ar\"],\n        avl: [\"avl\", \"ar\"],\n        ayh: [\"ayh\", \"ar\"],\n        ayl: [\"ayl\", \"ar\"],\n        ayn: [\"ayn\", \"ar\"],\n        ayp: [\"ayp\", \"ar\"],\n        bbz: [\"bbz\", \"ar\"],\n        bfi: [\"bfi\", \"sgn\"],\n        bfk: [\"bfk\", \"sgn\"],\n        bjn: [\"bjn\", \"ms\"],\n        bog: [\"bog\", \"sgn\"],\n        bqn: [\"bqn\", \"sgn\"],\n        bqy: [\"bqy\", \"sgn\"],\n        btj: [\"btj\", \"ms\"],\n        bve: [\"bve\", \"ms\"],\n        bvl: [\"bvl\", \"sgn\"],\n        bvu: [\"bvu\", \"ms\"],\n        bzs: [\"bzs\", \"sgn\"],\n        cdo: [\"cdo\", \"zh\"],\n        cds: [\"cds\", \"sgn\"],\n        cjy: [\"cjy\", \"zh\"],\n        cmn: [\"cmn\", \"zh\"],\n        coa: [\"coa\", \"ms\"],\n        cpx: [\"cpx\", \"zh\"],\n        csc: [\"csc\", \"sgn\"],\n        csd: [\"csd\", \"sgn\"],\n        cse: [\"cse\", \"sgn\"],\n        csf: [\"csf\", \"sgn\"],\n        csg: [\"csg\", \"sgn\"],\n        csl: [\"csl\", \"sgn\"],\n        csn: [\"csn\", \"sgn\"],\n        csq: [\"csq\", \"sgn\"],\n        csr: [\"csr\", \"sgn\"],\n        czh: [\"czh\", \"zh\"],\n        czo: [\"czo\", \"zh\"],\n        doq: [\"doq\", \"sgn\"],\n        dse: [\"dse\", \"sgn\"],\n        dsl: [\"dsl\", \"sgn\"],\n        dup: [\"dup\", \"ms\"],\n        ecs: [\"ecs\", \"sgn\"],\n        esl: [\"esl\", \"sgn\"],\n        esn: [\"esn\", \"sgn\"],\n        eso: [\"eso\", \"sgn\"],\n        eth: [\"eth\", \"sgn\"],\n        fcs: [\"fcs\", \"sgn\"],\n        fse: [\"fse\", \"sgn\"],\n        fsl: [\"fsl\", \"sgn\"],\n        fss: [\"fss\", \"sgn\"],\n        gan: [\"gan\", \"zh\"],\n        gds: [\"gds\", \"sgn\"],\n        gom: [\"gom\", \"kok\"],\n        gse: [\"gse\", \"sgn\"],\n        gsg: [\"gsg\", \"sgn\"],\n        gsm: [\"gsm\", \"sgn\"],\n        gss: [\"gss\", \"sgn\"],\n        gus: [\"gus\", \"sgn\"],\n        hab: [\"hab\", \"sgn\"],\n        haf: [\"haf\", \"sgn\"],\n        hak: [\"hak\", \"zh\"],\n        hds: [\"hds\", \"sgn\"],\n        hji: [\"hji\", \"ms\"],\n        hks: [\"hks\", \"sgn\"],\n        hos: [\"hos\", \"sgn\"],\n        hps: [\"hps\", \"sgn\"],\n        hsh: [\"hsh\", \"sgn\"],\n        hsl: [\"hsl\", \"sgn\"],\n        hsn: [\"hsn\", \"zh\"],\n        icl: [\"icl\", \"sgn\"],\n        ils: [\"ils\", \"sgn\"],\n        inl: [\"inl\", \"sgn\"],\n        ins: [\"ins\", \"sgn\"],\n        ise: [\"ise\", \"sgn\"],\n        isg: [\"isg\", \"sgn\"],\n        isr: [\"isr\", \"sgn\"],\n        jak: [\"jak\", \"ms\"],\n        jax: [\"jax\", \"ms\"],\n        jcs: [\"jcs\", \"sgn\"],\n        jhs: [\"jhs\", \"sgn\"],\n        jls: [\"jls\", \"sgn\"],\n        jos: [\"jos\", \"sgn\"],\n        jsl: [\"jsl\", \"sgn\"],\n        jus: [\"jus\", \"sgn\"],\n        kgi: [\"kgi\", \"sgn\"],\n        knn: [\"knn\", \"kok\"],\n        kvb: [\"kvb\", \"ms\"],\n        kvk: [\"kvk\", \"sgn\"],\n        kvr: [\"kvr\", \"ms\"],\n        kxd: [\"kxd\", \"ms\"],\n        lbs: [\"lbs\", \"sgn\"],\n        lce: [\"lce\", \"ms\"],\n        lcf: [\"lcf\", \"ms\"],\n        liw: [\"liw\", \"ms\"],\n        lls: [\"lls\", \"sgn\"],\n        lsg: [\"lsg\", \"sgn\"],\n        lsl: [\"lsl\", \"sgn\"],\n        lso: [\"lso\", \"sgn\"],\n        lsp: [\"lsp\", \"sgn\"],\n        lst: [\"lst\", \"sgn\"],\n        lsy: [\"lsy\", \"sgn\"],\n        ltg: [\"ltg\", \"lv\"],\n        lvs: [\"lvs\", \"lv\"],\n        lzh: [\"lzh\", \"zh\"],\n        max: [\"max\", \"ms\"],\n        mdl: [\"mdl\", \"sgn\"],\n        meo: [\"meo\", \"ms\"],\n        mfa: [\"mfa\", \"ms\"],\n        mfb: [\"mfb\", \"ms\"],\n        mfs: [\"mfs\", \"sgn\"],\n        min: [\"min\", \"ms\"],\n        mnp: [\"mnp\", \"zh\"],\n        mqg: [\"mqg\", \"ms\"],\n        mre: [\"mre\", \"sgn\"],\n        msd: [\"msd\", \"sgn\"],\n        msi: [\"msi\", \"ms\"],\n        msr: [\"msr\", \"sgn\"],\n        mui: [\"mui\", \"ms\"],\n        mzc: [\"mzc\", \"sgn\"],\n        mzg: [\"mzg\", \"sgn\"],\n        mzy: [\"mzy\", \"sgn\"],\n        nan: [\"nan\", \"zh\"],\n        nbs: [\"nbs\", \"sgn\"],\n        ncs: [\"ncs\", \"sgn\"],\n        nsi: [\"nsi\", \"sgn\"],\n        nsl: [\"nsl\", \"sgn\"],\n        nsp: [\"nsp\", \"sgn\"],\n        nsr: [\"nsr\", \"sgn\"],\n        nzs: [\"nzs\", \"sgn\"],\n        okl: [\"okl\", \"sgn\"],\n        orn: [\"orn\", \"ms\"],\n        ors: [\"ors\", \"ms\"],\n        pel: [\"pel\", \"ms\"],\n        pga: [\"pga\", \"ar\"],\n        pks: [\"pks\", \"sgn\"],\n        prl: [\"prl\", \"sgn\"],\n        prz: [\"prz\", \"sgn\"],\n        psc: [\"psc\", \"sgn\"],\n        psd: [\"psd\", \"sgn\"],\n        pse: [\"pse\", \"ms\"],\n        psg: [\"psg\", \"sgn\"],\n        psl: [\"psl\", \"sgn\"],\n        pso: [\"pso\", \"sgn\"],\n        psp: [\"psp\", \"sgn\"],\n        psr: [\"psr\", \"sgn\"],\n        pys: [\"pys\", \"sgn\"],\n        rms: [\"rms\", \"sgn\"],\n        rsi: [\"rsi\", \"sgn\"],\n        rsl: [\"rsl\", \"sgn\"],\n        sdl: [\"sdl\", \"sgn\"],\n        sfb: [\"sfb\", \"sgn\"],\n        sfs: [\"sfs\", \"sgn\"],\n        sgg: [\"sgg\", \"sgn\"],\n        sgx: [\"sgx\", \"sgn\"],\n        shu: [\"shu\", \"ar\"],\n        slf: [\"slf\", \"sgn\"],\n        sls: [\"sls\", \"sgn\"],\n        sqk: [\"sqk\", \"sgn\"],\n        sqs: [\"sqs\", \"sgn\"],\n        ssh: [\"ssh\", \"ar\"],\n        ssp: [\"ssp\", \"sgn\"],\n        ssr: [\"ssr\", \"sgn\"],\n        svk: [\"svk\", \"sgn\"],\n        swc: [\"swc\", \"sw\"],\n        swh: [\"swh\", \"sw\"],\n        swl: [\"swl\", \"sgn\"],\n        syy: [\"syy\", \"sgn\"],\n        tmw: [\"tmw\", \"ms\"],\n        tse: [\"tse\", \"sgn\"],\n        tsm: [\"tsm\", \"sgn\"],\n        tsq: [\"tsq\", \"sgn\"],\n        tss: [\"tss\", \"sgn\"],\n        tsy: [\"tsy\", \"sgn\"],\n        tza: [\"tza\", \"sgn\"],\n        ugn: [\"ugn\", \"sgn\"],\n        ugy: [\"ugy\", \"sgn\"],\n        ukl: [\"ukl\", \"sgn\"],\n        uks: [\"uks\", \"sgn\"],\n        urk: [\"urk\", \"ms\"],\n        uzn: [\"uzn\", \"uz\"],\n        uzs: [\"uzs\", \"uz\"],\n        vgt: [\"vgt\", \"sgn\"],\n        vkk: [\"vkk\", \"ms\"],\n        vkt: [\"vkt\", \"ms\"],\n        vsi: [\"vsi\", \"sgn\"],\n        vsl: [\"vsl\", \"sgn\"],\n        vsv: [\"vsv\", \"sgn\"],\n        wuu: [\"wuu\", \"zh\"],\n        xki: [\"xki\", \"sgn\"],\n        xml: [\"xml\", \"sgn\"],\n        xmm: [\"xmm\", \"ms\"],\n        xms: [\"xms\", \"sgn\"],\n        yds: [\"yds\", \"sgn\"],\n        ysl: [\"ysl\", \"sgn\"],\n        yue: [\"yue\", \"zh\"],\n        zib: [\"zib\", \"sgn\"],\n        zlm: [\"zlm\", \"ms\"],\n        zmi: [\"zmi\", \"ms\"],\n        zsl: [\"zsl\", \"sgn\"],\n        zsm: [\"zsm\", \"ms\"]\n    }\n};\n\n/**\n * Convert only a-z to uppercase as per section 6.1 of the spec\n */\nfunction toLatinUpperCase(str) {\n    var i = str.length;\n\n    while (i--) {\n        var ch = str.charAt(i);\n\n        if (ch >= \"a\" && ch <= \"z\") str = str.slice(0, i) + ch.toUpperCase() + str.slice(i + 1);\n    }\n\n    return str;\n}\n\n/**\n * The IsStructurallyValidLanguageTag abstract operation verifies that the locale\n * argument (which must be a String value)\n *\n * - represents a well-formed BCP 47 language tag as specified in RFC 5646 section\n *   2.1, or successor,\n * - does not include duplicate variant subtags, and\n * - does not include duplicate singleton subtags.\n *\n * The abstract operation returns true if locale can be generated from the ABNF\n * grammar in section 2.1 of the RFC, starting with Language-Tag, and does not\n * contain duplicate variant or singleton subtags (other than as a private use\n * subtag). It returns false otherwise. Terminal value characters in the grammar are\n * interpreted as the Unicode equivalents of the ASCII octet values given.\n */\nfunction /* 6.2.2 */IsStructurallyValidLanguageTag(locale) {\n    // represents a well-formed BCP 47 language tag as specified in RFC 5646\n    if (!expBCP47Syntax.test(locale)) return false;\n\n    // does not include duplicate variant subtags, and\n    if (expVariantDupes.test(locale)) return false;\n\n    // does not include duplicate singleton subtags.\n    if (expSingletonDupes.test(locale)) return false;\n\n    return true;\n}\n\n/**\n * The CanonicalizeLanguageTag abstract operation returns the canonical and case-\n * regularized form of the locale argument (which must be a String value that is\n * a structurally valid BCP 47 language tag as verified by the\n * IsStructurallyValidLanguageTag abstract operation). It takes the steps\n * specified in RFC 5646 section 4.5, or successor, to bring the language tag\n * into canonical form, and to regularize the case of the subtags, but does not\n * take the steps to bring a language tag into “extlang form” and to reorder\n * variant subtags.\n\n * The specifications for extensions to BCP 47 language tags, such as RFC 6067,\n * may include canonicalization rules for the extension subtag sequences they\n * define that go beyond the canonicalization rules of RFC 5646 section 4.5.\n * Implementations are allowed, but not required, to apply these additional rules.\n */\nfunction /* 6.2.3 */CanonicalizeLanguageTag(locale) {\n    var match = void 0,\n        parts = void 0;\n\n    // A language tag is in 'canonical form' when the tag is well-formed\n    // according to the rules in Sections 2.1 and 2.2\n\n    // Section 2.1 says all subtags use lowercase...\n    locale = locale.toLowerCase();\n\n    // ...with 2 exceptions: 'two-letter and four-letter subtags that neither\n    // appear at the start of the tag nor occur after singletons.  Such two-letter\n    // subtags are all uppercase (as in the tags \"en-CA-x-ca\" or \"sgn-BE-FR\") and\n    // four-letter subtags are titlecase (as in the tag \"az-Latn-x-latn\").\n    parts = locale.split('-');\n    for (var i = 1, max = parts.length; i < max; i++) {\n        // Two-letter subtags are all uppercase\n        if (parts[i].length === 2) parts[i] = parts[i].toUpperCase();\n\n        // Four-letter subtags are titlecase\n        else if (parts[i].length === 4) parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].slice(1);\n\n            // Is it a singleton?\n            else if (parts[i].length === 1 && parts[i] !== 'x') break;\n    }\n    locale = arrJoin.call(parts, '-');\n\n    // The steps laid out in RFC 5646 section 4.5 are as follows:\n\n    // 1.  Extension sequences are ordered into case-insensitive ASCII order\n    //     by singleton subtag.\n    if ((match = locale.match(expExtSequences)) && match.length > 1) {\n        // The built-in sort() sorts by ASCII order, so use that\n        match.sort();\n\n        // Replace all extensions with the joined, sorted array\n        locale = locale.replace(RegExp('(?:' + expExtSequences.source + ')+', 'i'), arrJoin.call(match, ''));\n    }\n\n    // 2.  Redundant or grandfathered tags are replaced by their 'Preferred-\n    //     Value', if there is one.\n    if (hop.call(redundantTags.tags, locale)) locale = redundantTags.tags[locale];\n\n    // 3.  Subtags are replaced by their 'Preferred-Value', if there is one.\n    //     For extlangs, the original primary language subtag is also\n    //     replaced if there is a primary language subtag in the 'Preferred-\n    //     Value'.\n    parts = locale.split('-');\n\n    for (var _i = 1, _max = parts.length; _i < _max; _i++) {\n        if (hop.call(redundantTags.subtags, parts[_i])) parts[_i] = redundantTags.subtags[parts[_i]];else if (hop.call(redundantTags.extLang, parts[_i])) {\n            parts[_i] = redundantTags.extLang[parts[_i]][0];\n\n            // For extlang tags, the prefix needs to be removed if it is redundant\n            if (_i === 1 && redundantTags.extLang[parts[1]][1] === parts[0]) {\n                parts = arrSlice.call(parts, _i++);\n                _max -= 1;\n            }\n        }\n    }\n\n    return arrJoin.call(parts, '-');\n}\n\n/**\n * The DefaultLocale abstract operation returns a String value representing the\n * structurally valid (6.2.2) and canonicalized (6.2.3) BCP 47 language tag for the\n * host environment’s current locale.\n */\nfunction /* 6.2.4 */DefaultLocale() {\n    return defaultLocale;\n}\n\n// Sect 6.3 Currency Codes\n// =======================\n\nvar expCurrencyCode = /^[A-Z]{3}$/;\n\n/**\n * The IsWellFormedCurrencyCode abstract operation verifies that the currency argument\n * (after conversion to a String value) represents a well-formed 3-letter ISO currency\n * code. The following steps are taken:\n */\nfunction /* 6.3.1 */IsWellFormedCurrencyCode(currency) {\n    // 1. Let `c` be ToString(currency)\n    var c = String(currency);\n\n    // 2. Let `normalized` be the result of mapping c to upper case as described\n    //    in 6.1.\n    var normalized = toLatinUpperCase(c);\n\n    // 3. If the string length of normalized is not 3, return false.\n    // 4. If normalized contains any character that is not in the range \"A\" to \"Z\"\n    //    (U+0041 to U+005A), return false.\n    if (expCurrencyCode.test(normalized) === false) return false;\n\n    // 5. Return true\n    return true;\n}\n\nvar expUnicodeExSeq = /-u(?:-[0-9a-z]{2,8})+/gi; // See `extension` below\n\nfunction /* 9.2.1 */CanonicalizeLocaleList(locales) {\n    // The abstract operation CanonicalizeLocaleList takes the following steps:\n\n    // 1. If locales is undefined, then a. Return a new empty List\n    if (locales === undefined) return new List();\n\n    // 2. Let seen be a new empty List.\n    var seen = new List();\n\n    // 3. If locales is a String value, then\n    //    a. Let locales be a new array created as if by the expression new\n    //    Array(locales) where Array is the standard built-in constructor with\n    //    that name and locales is the value of locales.\n    locales = typeof locales === 'string' ? [locales] : locales;\n\n    // 4. Let O be ToObject(locales).\n    var O = toObject(locales);\n\n    // 5. Let lenValue be the result of calling the [[Get]] internal method of\n    //    O with the argument \"length\".\n    // 6. Let len be ToUint32(lenValue).\n    var len = toLength(O.length);\n\n    // 7. Let k be 0.\n    var k = 0;\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n        // a. Let Pk be ToString(k).\n        var Pk = String(k);\n\n        // b. Let kPresent be the result of calling the [[HasProperty]] internal\n        //    method of O with argument Pk.\n        var kPresent = Pk in O;\n\n        // c. If kPresent is true, then\n        if (kPresent) {\n            // i. Let kValue be the result of calling the [[Get]] internal\n            //     method of O with argument Pk.\n            var kValue = O[Pk];\n\n            // ii. If the type of kValue is not String or Object, then throw a\n            //     TypeError exception.\n            if (kValue === null || typeof kValue !== 'string' && (typeof kValue === \"undefined\" ? \"undefined\" : babelHelpers$1[\"typeof\"](kValue)) !== 'object') throw new TypeError('String or Object type expected');\n\n            // iii. Let tag be ToString(kValue).\n            var tag = String(kValue);\n\n            // iv. If the result of calling the abstract operation\n            //     IsStructurallyValidLanguageTag (defined in 6.2.2), passing tag as\n            //     the argument, is false, then throw a RangeError exception.\n            if (!IsStructurallyValidLanguageTag(tag)) throw new RangeError(\"'\" + tag + \"' is not a structurally valid language tag\");\n\n            // v. Let tag be the result of calling the abstract operation\n            //    CanonicalizeLanguageTag (defined in 6.2.3), passing tag as the\n            //    argument.\n            tag = CanonicalizeLanguageTag(tag);\n\n            // vi. If tag is not an element of seen, then append tag as the last\n            //     element of seen.\n            if (arrIndexOf.call(seen, tag) === -1) arrPush.call(seen, tag);\n        }\n\n        // d. Increase k by 1.\n        k++;\n    }\n\n    // 9. Return seen.\n    return seen;\n}\n\n/**\n * The BestAvailableLocale abstract operation compares the provided argument\n * locale, which must be a String value with a structurally valid and\n * canonicalized BCP 47 language tag, against the locales in availableLocales and\n * returns either the longest non-empty prefix of locale that is an element of\n * availableLocales, or undefined if there is no such element. It uses the\n * fallback mechanism of RFC 4647, section 3.4. The following steps are taken:\n */\nfunction /* 9.2.2 */BestAvailableLocale(availableLocales, locale) {\n    // 1. Let candidate be locale\n    var candidate = locale;\n\n    // 2. Repeat\n    while (candidate) {\n        // a. If availableLocales contains an element equal to candidate, then return\n        // candidate.\n        if (arrIndexOf.call(availableLocales, candidate) > -1) return candidate;\n\n        // b. Let pos be the character index of the last occurrence of \"-\"\n        // (U+002D) within candidate. If that character does not occur, return\n        // undefined.\n        var pos = candidate.lastIndexOf('-');\n\n        if (pos < 0) return;\n\n        // c. If pos ≥ 2 and the character \"-\" occurs at index pos-2 of candidate,\n        //    then decrease pos by 2.\n        if (pos >= 2 && candidate.charAt(pos - 2) === '-') pos -= 2;\n\n        // d. Let candidate be the substring of candidate from position 0, inclusive,\n        //    to position pos, exclusive.\n        candidate = candidate.substring(0, pos);\n    }\n}\n\n/**\n * The LookupMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The following steps are taken:\n */\nfunction /* 9.2.3 */LookupMatcher(availableLocales, requestedLocales) {\n    // 1. Let i be 0.\n    var i = 0;\n\n    // 2. Let len be the number of elements in requestedLocales.\n    var len = requestedLocales.length;\n\n    // 3. Let availableLocale be undefined.\n    var availableLocale = void 0;\n\n    var locale = void 0,\n        noExtensionsLocale = void 0;\n\n    // 4. Repeat while i < len and availableLocale is undefined:\n    while (i < len && !availableLocale) {\n        // a. Let locale be the element of requestedLocales at 0-origined list\n        //    position i.\n        locale = requestedLocales[i];\n\n        // b. Let noExtensionsLocale be the String value that is locale with all\n        //    Unicode locale extension sequences removed.\n        noExtensionsLocale = String(locale).replace(expUnicodeExSeq, '');\n\n        // c. Let availableLocale be the result of calling the\n        //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n        //    arguments availableLocales and noExtensionsLocale.\n        availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);\n\n        // d. Increase i by 1.\n        i++;\n    }\n\n    // 5. Let result be a new Record.\n    var result = new Record();\n\n    // 6. If availableLocale is not undefined, then\n    if (availableLocale !== undefined) {\n        // a. Set result.[[locale]] to availableLocale.\n        result['[[locale]]'] = availableLocale;\n\n        // b. If locale and noExtensionsLocale are not the same String value, then\n        if (String(locale) !== String(noExtensionsLocale)) {\n            // i. Let extension be the String value consisting of the first\n            //    substring of locale that is a Unicode locale extension sequence.\n            var extension = locale.match(expUnicodeExSeq)[0];\n\n            // ii. Let extensionIndex be the character position of the initial\n            //     \"-\" of the first Unicode locale extension sequence within locale.\n            var extensionIndex = locale.indexOf('-u-');\n\n            // iii. Set result.[[extension]] to extension.\n            result['[[extension]]'] = extension;\n\n            // iv. Set result.[[extensionIndex]] to extensionIndex.\n            result['[[extensionIndex]]'] = extensionIndex;\n        }\n    }\n    // 7. Else\n    else\n        // a. Set result.[[locale]] to the value returned by the DefaultLocale abstract\n        //    operation (defined in 6.2.4).\n        result['[[locale]]'] = DefaultLocale();\n\n    // 8. Return result\n    return result;\n}\n\n/**\n * The BestFitMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The algorithm is implementation dependent, but should produce results\n * that a typical user of the requested locales would perceive as at least as\n * good as those produced by the LookupMatcher abstract operation. Options\n * specified through Unicode locale extension sequences must be ignored by the\n * algorithm. Information about such subsequences is returned separately.\n * The abstract operation returns a record with a [[locale]] field, whose value\n * is the language tag of the selected locale, which must be an element of\n * availableLocales. If the language tag of the request locale that led to the\n * selected locale contained a Unicode locale extension sequence, then the\n * returned record also contains an [[extension]] field whose value is the first\n * Unicode locale extension sequence, and an [[extensionIndex]] field whose value\n * is the index of the first Unicode locale extension sequence within the request\n * locale language tag.\n */\nfunction /* 9.2.4 */BestFitMatcher(availableLocales, requestedLocales) {\n    return LookupMatcher(availableLocales, requestedLocales);\n}\n\n/**\n * The ResolveLocale abstract operation compares a BCP 47 language priority list\n * requestedLocales against the locales in availableLocales and determines the\n * best available language to meet the request. availableLocales and\n * requestedLocales must be provided as List values, options as a Record.\n */\nfunction /* 9.2.5 */ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData) {\n    if (availableLocales.length === 0) {\n        throw new ReferenceError('No locale data has been provided for this object yet.');\n    }\n\n    // The following steps are taken:\n    // 1. Let matcher be the value of options.[[localeMatcher]].\n    var matcher = options['[[localeMatcher]]'];\n\n    var r = void 0;\n\n    // 2. If matcher is \"lookup\", then\n    if (matcher === 'lookup')\n        // a. Let r be the result of calling the LookupMatcher abstract operation\n        //    (defined in 9.2.3) with arguments availableLocales and\n        //    requestedLocales.\n        r = LookupMatcher(availableLocales, requestedLocales);\n\n        // 3. Else\n    else\n        // a. Let r be the result of calling the BestFitMatcher abstract\n        //    operation (defined in 9.2.4) with arguments availableLocales and\n        //    requestedLocales.\n        r = BestFitMatcher(availableLocales, requestedLocales);\n\n    // 4. Let foundLocale be the value of r.[[locale]].\n    var foundLocale = r['[[locale]]'];\n\n    var extensionSubtags = void 0,\n        extensionSubtagsLength = void 0;\n\n    // 5. If r has an [[extension]] field, then\n    if (hop.call(r, '[[extension]]')) {\n        // a. Let extension be the value of r.[[extension]].\n        var extension = r['[[extension]]'];\n        // b. Let split be the standard built-in function object defined in ES5,\n        //    15.5.4.14.\n        var split = String.prototype.split;\n        // c. Let extensionSubtags be the result of calling the [[Call]] internal\n        //    method of split with extension as the this value and an argument\n        //    list containing the single item \"-\".\n        extensionSubtags = split.call(extension, '-');\n        // d. Let extensionSubtagsLength be the result of calling the [[Get]]\n        //    internal method of extensionSubtags with argument \"length\".\n        extensionSubtagsLength = extensionSubtags.length;\n    }\n\n    // 6. Let result be a new Record.\n    var result = new Record();\n\n    // 7. Set result.[[dataLocale]] to foundLocale.\n    result['[[dataLocale]]'] = foundLocale;\n\n    // 8. Let supportedExtension be \"-u\".\n    var supportedExtension = '-u';\n    // 9. Let i be 0.\n    var i = 0;\n    // 10. Let len be the result of calling the [[Get]] internal method of\n    //     relevantExtensionKeys with argument \"length\".\n    var len = relevantExtensionKeys.length;\n\n    // 11 Repeat while i < len:\n    while (i < len) {\n        // a. Let key be the result of calling the [[Get]] internal method of\n        //    relevantExtensionKeys with argument ToString(i).\n        var key = relevantExtensionKeys[i];\n        // b. Let foundLocaleData be the result of calling the [[Get]] internal\n        //    method of localeData with the argument foundLocale.\n        var foundLocaleData = localeData[foundLocale];\n        // c. Let keyLocaleData be the result of calling the [[Get]] internal\n        //    method of foundLocaleData with the argument key.\n        var keyLocaleData = foundLocaleData[key];\n        // d. Let value be the result of calling the [[Get]] internal method of\n        //    keyLocaleData with argument \"0\".\n        var value = keyLocaleData['0'];\n        // e. Let supportedExtensionAddition be \"\".\n        var supportedExtensionAddition = '';\n        // f. Let indexOf be the standard built-in function object defined in\n        //    ES5, 15.4.4.14.\n        var indexOf = arrIndexOf;\n\n        // g. If extensionSubtags is not undefined, then\n        if (extensionSubtags !== undefined) {\n            // i. Let keyPos be the result of calling the [[Call]] internal\n            //    method of indexOf with extensionSubtags as the this value and\n            // an argument list containing the single item key.\n            var keyPos = indexOf.call(extensionSubtags, key);\n\n            // ii. If keyPos ≠ -1, then\n            if (keyPos !== -1) {\n                // 1. If keyPos + 1 < extensionSubtagsLength and the length of the\n                //    result of calling the [[Get]] internal method of\n                //    extensionSubtags with argument ToString(keyPos +1) is greater\n                //    than 2, then\n                if (keyPos + 1 < extensionSubtagsLength && extensionSubtags[keyPos + 1].length > 2) {\n                    // a. Let requestedValue be the result of calling the [[Get]]\n                    //    internal method of extensionSubtags with argument\n                    //    ToString(keyPos + 1).\n                    var requestedValue = extensionSubtags[keyPos + 1];\n                    // b. Let valuePos be the result of calling the [[Call]]\n                    //    internal method of indexOf with keyLocaleData as the\n                    //    this value and an argument list containing the single\n                    //    item requestedValue.\n                    var valuePos = indexOf.call(keyLocaleData, requestedValue);\n\n                    // c. If valuePos ≠ -1, then\n                    if (valuePos !== -1) {\n                        // i. Let value be requestedValue.\n                        value = requestedValue,\n                        // ii. Let supportedExtensionAddition be the\n                        //     concatenation of \"-\", key, \"-\", and value.\n                        supportedExtensionAddition = '-' + key + '-' + value;\n                    }\n                }\n                // 2. Else\n                else {\n                        // a. Let valuePos be the result of calling the [[Call]]\n                        // internal method of indexOf with keyLocaleData as the this\n                        // value and an argument list containing the single item\n                        // \"true\".\n                        var _valuePos = indexOf(keyLocaleData, 'true');\n\n                        // b. If valuePos ≠ -1, then\n                        if (_valuePos !== -1)\n                            // i. Let value be \"true\".\n                            value = 'true';\n                    }\n            }\n        }\n        // h. If options has a field [[<key>]], then\n        if (hop.call(options, '[[' + key + ']]')) {\n            // i. Let optionsValue be the value of options.[[<key>]].\n            var optionsValue = options['[[' + key + ']]'];\n\n            // ii. If the result of calling the [[Call]] internal method of indexOf\n            //     with keyLocaleData as the this value and an argument list\n            //     containing the single item optionsValue is not -1, then\n            if (indexOf.call(keyLocaleData, optionsValue) !== -1) {\n                // 1. If optionsValue is not equal to value, then\n                if (optionsValue !== value) {\n                    // a. Let value be optionsValue.\n                    value = optionsValue;\n                    // b. Let supportedExtensionAddition be \"\".\n                    supportedExtensionAddition = '';\n                }\n            }\n        }\n        // i. Set result.[[<key>]] to value.\n        result['[[' + key + ']]'] = value;\n\n        // j. Append supportedExtensionAddition to supportedExtension.\n        supportedExtension += supportedExtensionAddition;\n\n        // k. Increase i by 1.\n        i++;\n    }\n    // 12. If the length of supportedExtension is greater than 2, then\n    if (supportedExtension.length > 2) {\n        // a.\n        var privateIndex = foundLocale.indexOf(\"-x-\");\n        // b.\n        if (privateIndex === -1) {\n            // i.\n            foundLocale = foundLocale + supportedExtension;\n        }\n        // c.\n        else {\n                // i.\n                var preExtension = foundLocale.substring(0, privateIndex);\n                // ii.\n                var postExtension = foundLocale.substring(privateIndex);\n                // iii.\n                foundLocale = preExtension + supportedExtension + postExtension;\n            }\n        // d. asserting - skipping\n        // e.\n        foundLocale = CanonicalizeLanguageTag(foundLocale);\n    }\n    // 13. Set result.[[locale]] to foundLocale.\n    result['[[locale]]'] = foundLocale;\n\n    // 14. Return result.\n    return result;\n}\n\n/**\n * The LookupSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the BCP 47 Lookup algorithm.\n * Locales appear in the same order in the returned list as in requestedLocales.\n * The following steps are taken:\n */\nfunction /* 9.2.6 */LookupSupportedLocales(availableLocales, requestedLocales) {\n    // 1. Let len be the number of elements in requestedLocales.\n    var len = requestedLocales.length;\n    // 2. Let subset be a new empty List.\n    var subset = new List();\n    // 3. Let k be 0.\n    var k = 0;\n\n    // 4. Repeat while k < len\n    while (k < len) {\n        // a. Let locale be the element of requestedLocales at 0-origined list\n        //    position k.\n        var locale = requestedLocales[k];\n        // b. Let noExtensionsLocale be the String value that is locale with all\n        //    Unicode locale extension sequences removed.\n        var noExtensionsLocale = String(locale).replace(expUnicodeExSeq, '');\n        // c. Let availableLocale be the result of calling the\n        //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n        //    arguments availableLocales and noExtensionsLocale.\n        var availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);\n\n        // d. If availableLocale is not undefined, then append locale to the end of\n        //    subset.\n        if (availableLocale !== undefined) arrPush.call(subset, locale);\n\n        // e. Increment k by 1.\n        k++;\n    }\n\n    // 5. Let subsetArray be a new Array object whose elements are the same\n    //    values in the same order as the elements of subset.\n    var subsetArray = arrSlice.call(subset);\n\n    // 6. Return subsetArray.\n    return subsetArray;\n}\n\n/**\n * The BestFitSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the Best Fit Matcher\n * algorithm. Locales appear in the same order in the returned list as in\n * requestedLocales. The steps taken are implementation dependent.\n */\nfunction /*9.2.7 */BestFitSupportedLocales(availableLocales, requestedLocales) {\n    // ###TODO: implement this function as described by the specification###\n    return LookupSupportedLocales(availableLocales, requestedLocales);\n}\n\n/**\n * The SupportedLocales abstract operation returns the subset of the provided BCP\n * 47 language priority list requestedLocales for which availableLocales has a\n * matching locale. Two algorithms are available to match the locales: the Lookup\n * algorithm described in RFC 4647 section 3.4, and an implementation dependent\n * best-fit algorithm. Locales appear in the same order in the returned list as\n * in requestedLocales. The following steps are taken:\n */\nfunction /*9.2.8 */SupportedLocales(availableLocales, requestedLocales, options) {\n    var matcher = void 0,\n        subset = void 0;\n\n    // 1. If options is not undefined, then\n    if (options !== undefined) {\n        // a. Let options be ToObject(options).\n        options = new Record(toObject(options));\n        // b. Let matcher be the result of calling the [[Get]] internal method of\n        //    options with argument \"localeMatcher\".\n        matcher = options.localeMatcher;\n\n        // c. If matcher is not undefined, then\n        if (matcher !== undefined) {\n            // i. Let matcher be ToString(matcher).\n            matcher = String(matcher);\n\n            // ii. If matcher is not \"lookup\" or \"best fit\", then throw a RangeError\n            //     exception.\n            if (matcher !== 'lookup' && matcher !== 'best fit') throw new RangeError('matcher should be \"lookup\" or \"best fit\"');\n        }\n    }\n    // 2. If matcher is undefined or \"best fit\", then\n    if (matcher === undefined || matcher === 'best fit')\n        // a. Let subset be the result of calling the BestFitSupportedLocales\n        //    abstract operation (defined in 9.2.7) with arguments\n        //    availableLocales and requestedLocales.\n        subset = BestFitSupportedLocales(availableLocales, requestedLocales);\n        // 3. Else\n    else\n        // a. Let subset be the result of calling the LookupSupportedLocales\n        //    abstract operation (defined in 9.2.6) with arguments\n        //    availableLocales and requestedLocales.\n        subset = LookupSupportedLocales(availableLocales, requestedLocales);\n\n    // 4. For each named own property name P of subset,\n    for (var P in subset) {\n        if (!hop.call(subset, P)) continue;\n\n        // a. Let desc be the result of calling the [[GetOwnProperty]] internal\n        //    method of subset with P.\n        // b. Set desc.[[Writable]] to false.\n        // c. Set desc.[[Configurable]] to false.\n        // d. Call the [[DefineOwnProperty]] internal method of subset with P, desc,\n        //    and true as arguments.\n        defineProperty(subset, P, {\n            writable: false, configurable: false, value: subset[P]\n        });\n    }\n    // \"Freeze\" the array so no new elements can be added\n    defineProperty(subset, 'length', { writable: false });\n\n    // 5. Return subset\n    return subset;\n}\n\n/**\n * The GetOption abstract operation extracts the value of the property named\n * property from the provided options object, converts it to the required type,\n * checks whether it is one of a List of allowed values, and fills in a fallback\n * value if necessary.\n */\nfunction /*9.2.9 */GetOption(options, property, type, values, fallback) {\n    // 1. Let value be the result of calling the [[Get]] internal method of\n    //    options with argument property.\n    var value = options[property];\n\n    // 2. If value is not undefined, then\n    if (value !== undefined) {\n        // a. Assert: type is \"boolean\" or \"string\".\n        // b. If type is \"boolean\", then let value be ToBoolean(value).\n        // c. If type is \"string\", then let value be ToString(value).\n        value = type === 'boolean' ? Boolean(value) : type === 'string' ? String(value) : value;\n\n        // d. If values is not undefined, then\n        if (values !== undefined) {\n            // i. If values does not contain an element equal to value, then throw a\n            //    RangeError exception.\n            if (arrIndexOf.call(values, value) === -1) throw new RangeError(\"'\" + value + \"' is not an allowed value for `\" + property + '`');\n        }\n\n        // e. Return value.\n        return value;\n    }\n    // Else return fallback.\n    return fallback;\n}\n\n/**\n * The GetNumberOption abstract operation extracts a property value from the\n * provided options object, converts it to a Number value, checks whether it is\n * in the allowed range, and fills in a fallback value if necessary.\n */\nfunction /* 9.2.10 */GetNumberOption(options, property, minimum, maximum, fallback) {\n    // 1. Let value be the result of calling the [[Get]] internal method of\n    //    options with argument property.\n    var value = options[property];\n\n    // 2. If value is not undefined, then\n    if (value !== undefined) {\n        // a. Let value be ToNumber(value).\n        value = Number(value);\n\n        // b. If value is NaN or less than minimum or greater than maximum, throw a\n        //    RangeError exception.\n        if (isNaN(value) || value < minimum || value > maximum) throw new RangeError('Value is not a number or outside accepted range');\n\n        // c. Return floor(value).\n        return Math.floor(value);\n    }\n    // 3. Else return fallback.\n    return fallback;\n}\n\n// 8 The Intl Object\nvar Intl = {};\n\n// 8.2 Function Properties of the Intl Object\n\n// 8.2.1\n// @spec[tc39/ecma402/master/spec/intl.html]\n// @clause[sec-intl.getcanonicallocales]\nfunction getCanonicalLocales(locales) {\n    // 1. Let ll be ? CanonicalizeLocaleList(locales).\n    var ll = CanonicalizeLocaleList(locales);\n    // 2. Return CreateArrayFromList(ll).\n    {\n        var result = [];\n\n        var len = ll.length;\n        var k = 0;\n\n        while (k < len) {\n            result[k] = ll[k];\n            k++;\n        }\n        return result;\n    }\n}\n\nObject.defineProperty(Intl, 'getCanonicalLocales', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: getCanonicalLocales\n});\n\n// Currency minor units output from get-4217 grunt task, formatted\nvar currencyMinorUnits = {\n    BHD: 3, BYR: 0, XOF: 0, BIF: 0, XAF: 0, CLF: 4, CLP: 0, KMF: 0, DJF: 0,\n    XPF: 0, GNF: 0, ISK: 0, IQD: 3, JPY: 0, JOD: 3, KRW: 0, KWD: 3, LYD: 3,\n    OMR: 3, PYG: 0, RWF: 0, TND: 3, UGX: 0, UYI: 0, VUV: 0, VND: 0\n};\n\n// Define the NumberFormat constructor internally so it cannot be tainted\nfunction NumberFormatConstructor() {\n    var locales = arguments[0];\n    var options = arguments[1];\n\n    if (!this || this === Intl) {\n        return new Intl.NumberFormat(locales, options);\n    }\n\n    return InitializeNumberFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'NumberFormat', {\n    configurable: true,\n    writable: true,\n    value: NumberFormatConstructor\n});\n\n// Must explicitly set prototypes as unwritable\ndefineProperty(Intl.NumberFormat, 'prototype', {\n    writable: false\n});\n\n/**\n * The abstract operation InitializeNumberFormat accepts the arguments\n * numberFormat (which must be an object), locales, and options. It initializes\n * numberFormat as a NumberFormat object.\n */\nfunction /*11.1.1.1 */InitializeNumberFormat(numberFormat, locales, options) {\n    // This will be a internal properties object if we're not already initialized\n    var internal = getInternalProperties(numberFormat);\n\n    // Create an object whose props can be used to restore the values of RegExp props\n    var regexpRestore = createRegExpRestore();\n\n    // 1. If numberFormat has an [[initializedIntlObject]] internal property with\n    // value true, throw a TypeError exception.\n    if (internal['[[initializedIntlObject]]'] === true) throw new TypeError('`this` object has already been initialized as an Intl object');\n\n    // Need this to access the `internal` object\n    defineProperty(numberFormat, '__getInternalProperties', {\n        value: function value() {\n            // NOTE: Non-standard, for internal use only\n            if (arguments[0] === secret) return internal;\n        }\n    });\n\n    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n    internal['[[initializedIntlObject]]'] = true;\n\n    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    var requestedLocales = CanonicalizeLocaleList(locales);\n\n    // 4. If options is undefined, then\n    if (options === undefined)\n        // a. Let options be the result of creating a new object as if by the\n        // expression new Object() where Object is the standard built-in constructor\n        // with that name.\n        options = {};\n\n        // 5. Else\n    else\n        // a. Let options be ToObject(options).\n        options = toObject(options);\n\n    // 6. Let opt be a new Record.\n    var opt = new Record(),\n\n\n    // 7. Let matcher be the result of calling the GetOption abstract operation\n    //    (defined in 9.2.9) with the arguments options, \"localeMatcher\", \"string\",\n    //    a List containing the two String values \"lookup\" and \"best fit\", and\n    //    \"best fit\".\n    matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');\n\n    // 8. Set opt.[[localeMatcher]] to matcher.\n    opt['[[localeMatcher]]'] = matcher;\n\n    // 9. Let NumberFormat be the standard built-in object that is the initial value\n    //    of Intl.NumberFormat.\n    // 10. Let localeData be the value of the [[localeData]] internal property of\n    //     NumberFormat.\n    var localeData = internals.NumberFormat['[[localeData]]'];\n\n    // 11. Let r be the result of calling the ResolveLocale abstract operation\n    //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n    //     NumberFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n    //     internal property of NumberFormat, and localeData.\n    var r = ResolveLocale(internals.NumberFormat['[[availableLocales]]'], requestedLocales, opt, internals.NumberFormat['[[relevantExtensionKeys]]'], localeData);\n\n    // 12. Set the [[locale]] internal property of numberFormat to the value of\n    //     r.[[locale]].\n    internal['[[locale]]'] = r['[[locale]]'];\n\n    // 13. Set the [[numberingSystem]] internal property of numberFormat to the value\n    //     of r.[[nu]].\n    internal['[[numberingSystem]]'] = r['[[nu]]'];\n\n    // The specification doesn't tell us to do this, but it's helpful later on\n    internal['[[dataLocale]]'] = r['[[dataLocale]]'];\n\n    // 14. Let dataLocale be the value of r.[[dataLocale]].\n    var dataLocale = r['[[dataLocale]]'];\n\n    // 15. Let s be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"style\", \"string\", a List containing the three String\n    //     values \"decimal\", \"percent\", and \"currency\", and \"decimal\".\n    var s = GetOption(options, 'style', 'string', new List('decimal', 'percent', 'currency'), 'decimal');\n\n    // 16. Set the [[style]] internal property of numberFormat to s.\n    internal['[[style]]'] = s;\n\n    // 17. Let c be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"currency\", \"string\", undefined, and undefined.\n    var c = GetOption(options, 'currency', 'string');\n\n    // 18. If c is not undefined and the result of calling the\n    //     IsWellFormedCurrencyCode abstract operation (defined in 6.3.1) with\n    //     argument c is false, then throw a RangeError exception.\n    if (c !== undefined && !IsWellFormedCurrencyCode(c)) throw new RangeError(\"'\" + c + \"' is not a valid currency code\");\n\n    // 19. If s is \"currency\" and c is undefined, throw a TypeError exception.\n    if (s === 'currency' && c === undefined) throw new TypeError('Currency code is required when style is currency');\n\n    var cDigits = void 0;\n\n    // 20. If s is \"currency\", then\n    if (s === 'currency') {\n        // a. Let c be the result of converting c to upper case as specified in 6.1.\n        c = c.toUpperCase();\n\n        // b. Set the [[currency]] internal property of numberFormat to c.\n        internal['[[currency]]'] = c;\n\n        // c. Let cDigits be the result of calling the CurrencyDigits abstract\n        //    operation (defined below) with argument c.\n        cDigits = CurrencyDigits(c);\n    }\n\n    // 21. Let cd be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"currencyDisplay\", \"string\", a List containing the\n    //     three String values \"code\", \"symbol\", and \"name\", and \"symbol\".\n    var cd = GetOption(options, 'currencyDisplay', 'string', new List('code', 'symbol', 'name'), 'symbol');\n\n    // 22. If s is \"currency\", then set the [[currencyDisplay]] internal property of\n    //     numberFormat to cd.\n    if (s === 'currency') internal['[[currencyDisplay]]'] = cd;\n\n    // 23. Let mnid be the result of calling the GetNumberOption abstract operation\n    //     (defined in 9.2.10) with arguments options, \"minimumIntegerDigits\", 1, 21,\n    //     and 1.\n    var mnid = GetNumberOption(options, 'minimumIntegerDigits', 1, 21, 1);\n\n    // 24. Set the [[minimumIntegerDigits]] internal property of numberFormat to mnid.\n    internal['[[minimumIntegerDigits]]'] = mnid;\n\n    // 25. If s is \"currency\", then let mnfdDefault be cDigits; else let mnfdDefault\n    //     be 0.\n    var mnfdDefault = s === 'currency' ? cDigits : 0;\n\n    // 26. Let mnfd be the result of calling the GetNumberOption abstract operation\n    //     with arguments options, \"minimumFractionDigits\", 0, 20, and mnfdDefault.\n    var mnfd = GetNumberOption(options, 'minimumFractionDigits', 0, 20, mnfdDefault);\n\n    // 27. Set the [[minimumFractionDigits]] internal property of numberFormat to mnfd.\n    internal['[[minimumFractionDigits]]'] = mnfd;\n\n    // 28. If s is \"currency\", then let mxfdDefault be max(mnfd, cDigits); else if s\n    //     is \"percent\", then let mxfdDefault be max(mnfd, 0); else let mxfdDefault\n    //     be max(mnfd, 3).\n    var mxfdDefault = s === 'currency' ? Math.max(mnfd, cDigits) : s === 'percent' ? Math.max(mnfd, 0) : Math.max(mnfd, 3);\n\n    // 29. Let mxfd be the result of calling the GetNumberOption abstract operation\n    //     with arguments options, \"maximumFractionDigits\", mnfd, 20, and mxfdDefault.\n    var mxfd = GetNumberOption(options, 'maximumFractionDigits', mnfd, 20, mxfdDefault);\n\n    // 30. Set the [[maximumFractionDigits]] internal property of numberFormat to mxfd.\n    internal['[[maximumFractionDigits]]'] = mxfd;\n\n    // 31. Let mnsd be the result of calling the [[Get]] internal method of options\n    //     with argument \"minimumSignificantDigits\".\n    var mnsd = options.minimumSignificantDigits;\n\n    // 32. Let mxsd be the result of calling the [[Get]] internal method of options\n    //     with argument \"maximumSignificantDigits\".\n    var mxsd = options.maximumSignificantDigits;\n\n    // 33. If mnsd is not undefined or mxsd is not undefined, then:\n    if (mnsd !== undefined || mxsd !== undefined) {\n        // a. Let mnsd be the result of calling the GetNumberOption abstract\n        //    operation with arguments options, \"minimumSignificantDigits\", 1, 21,\n        //    and 1.\n        mnsd = GetNumberOption(options, 'minimumSignificantDigits', 1, 21, 1);\n\n        // b. Let mxsd be the result of calling the GetNumberOption abstract\n        //     operation with arguments options, \"maximumSignificantDigits\", mnsd,\n        //     21, and 21.\n        mxsd = GetNumberOption(options, 'maximumSignificantDigits', mnsd, 21, 21);\n\n        // c. Set the [[minimumSignificantDigits]] internal property of numberFormat\n        //    to mnsd, and the [[maximumSignificantDigits]] internal property of\n        //    numberFormat to mxsd.\n        internal['[[minimumSignificantDigits]]'] = mnsd;\n        internal['[[maximumSignificantDigits]]'] = mxsd;\n    }\n    // 34. Let g be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"useGrouping\", \"boolean\", undefined, and true.\n    var g = GetOption(options, 'useGrouping', 'boolean', undefined, true);\n\n    // 35. Set the [[useGrouping]] internal property of numberFormat to g.\n    internal['[[useGrouping]]'] = g;\n\n    // 36. Let dataLocaleData be the result of calling the [[Get]] internal method of\n    //     localeData with argument dataLocale.\n    var dataLocaleData = localeData[dataLocale];\n\n    // 37. Let patterns be the result of calling the [[Get]] internal method of\n    //     dataLocaleData with argument \"patterns\".\n    var patterns = dataLocaleData.patterns;\n\n    // 38. Assert: patterns is an object (see 11.2.3)\n\n    // 39. Let stylePatterns be the result of calling the [[Get]] internal method of\n    //     patterns with argument s.\n    var stylePatterns = patterns[s];\n\n    // 40. Set the [[positivePattern]] internal property of numberFormat to the\n    //     result of calling the [[Get]] internal method of stylePatterns with the\n    //     argument \"positivePattern\".\n    internal['[[positivePattern]]'] = stylePatterns.positivePattern;\n\n    // 41. Set the [[negativePattern]] internal property of numberFormat to the\n    //     result of calling the [[Get]] internal method of stylePatterns with the\n    //     argument \"negativePattern\".\n    internal['[[negativePattern]]'] = stylePatterns.negativePattern;\n\n    // 42. Set the [[boundFormat]] internal property of numberFormat to undefined.\n    internal['[[boundFormat]]'] = undefined;\n\n    // 43. Set the [[initializedNumberFormat]] internal property of numberFormat to\n    //     true.\n    internal['[[initializedNumberFormat]]'] = true;\n\n    // In ES3, we need to pre-bind the format() function\n    if (es3) numberFormat.format = GetFormatNumber.call(numberFormat);\n\n    // Restore the RegExp properties\n    regexpRestore();\n\n    // Return the newly initialised object\n    return numberFormat;\n}\n\nfunction CurrencyDigits(currency) {\n    // When the CurrencyDigits abstract operation is called with an argument currency\n    // (which must be an upper case String value), the following steps are taken:\n\n    // 1. If the ISO 4217 currency and funds code list contains currency as an\n    // alphabetic code, then return the minor unit value corresponding to the\n    // currency from the list; else return 2.\n    return currencyMinorUnits[currency] !== undefined ? currencyMinorUnits[currency] : 2;\n}\n\n/* 11.2.3 */internals.NumberFormat = {\n    '[[availableLocales]]': [],\n    '[[relevantExtensionKeys]]': ['nu'],\n    '[[localeData]]': {}\n};\n\n/**\n * When the supportedLocalesOf method of Intl.NumberFormat is called, the\n * following steps are taken:\n */\n/* 11.2.2 */\ndefineProperty(Intl.NumberFormat, 'supportedLocalesOf', {\n    configurable: true,\n    writable: true,\n    value: fnBind.call(function (locales) {\n        // Bound functions only have the `this` value altered if being used as a constructor,\n        // this lets us imitate a native function that has no constructor\n        if (!hop.call(this, '[[availableLocales]]')) throw new TypeError('supportedLocalesOf() is not a constructor');\n\n        // Create an object whose props can be used to restore the values of RegExp props\n        var regexpRestore = createRegExpRestore(),\n\n\n        // 1. If options is not provided, then let options be undefined.\n        options = arguments[1],\n\n\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n        //    property of the standard built-in object that is the initial value of\n        //    Intl.NumberFormat.\n\n        availableLocales = this['[[availableLocales]]'],\n\n\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n        //    abstract operation (defined in 9.2.1) with argument locales.\n        requestedLocales = CanonicalizeLocaleList(locales);\n\n        // Restore the RegExp properties\n        regexpRestore();\n\n        // 4. Return the result of calling the SupportedLocales abstract operation\n        //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n        //    and options.\n        return SupportedLocales(availableLocales, requestedLocales, options);\n    }, internals.NumberFormat)\n});\n\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * NumberFormat object.\n */\n/* 11.3.2 */defineProperty(Intl.NumberFormat.prototype, 'format', {\n    configurable: true,\n    get: GetFormatNumber\n});\n\nfunction GetFormatNumber() {\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n    // Satisfy test 11.3_b\n    if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for format() is not an initialized Intl.NumberFormat object.');\n\n    // The value of the [[Get]] attribute is a function that takes the following\n    // steps:\n\n    // 1. If the [[boundFormat]] internal property of this NumberFormat object\n    //    is undefined, then:\n    if (internal['[[boundFormat]]'] === undefined) {\n        // a. Let F be a Function object, with internal properties set as\n        //    specified for built-in functions in ES5, 15, or successor, and the\n        //    length property set to 1, that takes the argument value and\n        //    performs the following steps:\n        var F = function F(value) {\n            // i. If value is not provided, then let value be undefined.\n            // ii. Let x be ToNumber(value).\n            // iii. Return the result of calling the FormatNumber abstract\n            //      operation (defined below) with arguments this and x.\n            return FormatNumber(this, /* x = */Number(value));\n        };\n\n        // b. Let bind be the standard built-in function object defined in ES5,\n        //    15.3.4.5.\n        // c. Let bf be the result of calling the [[Call]] internal method of\n        //    bind with F as the this value and an argument list containing\n        //    the single item this.\n        var bf = fnBind.call(F, this);\n\n        // d. Set the [[boundFormat]] internal property of this NumberFormat\n        //    object to bf.\n        internal['[[boundFormat]]'] = bf;\n    }\n    // Return the value of the [[boundFormat]] internal property of this\n    // NumberFormat object.\n    return internal['[[boundFormat]]'];\n}\n\nfunction formatToParts() {\n    var value = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n    if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for formatToParts() is not an initialized Intl.NumberFormat object.');\n\n    var x = Number(value);\n    return FormatNumberToParts(this, x);\n}\n\nObject.defineProperty(Intl.NumberFormat.prototype, 'formatToParts', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: formatToParts\n});\n\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-formatnumbertoparts]\n */\nfunction FormatNumberToParts(numberFormat, x) {\n    // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n    var parts = PartitionNumberPattern(numberFormat, x);\n    // 2. Let result be ArrayCreate(0).\n    var result = [];\n    // 3. Let n be 0.\n    var n = 0;\n    // 4. For each part in parts, do:\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        // a. Let O be ObjectCreate(%ObjectPrototype%).\n        var O = {};\n        // a. Perform ? CreateDataPropertyOrThrow(O, \"type\", part.[[type]]).\n        O.type = part['[[type]]'];\n        // a. Perform ? CreateDataPropertyOrThrow(O, \"value\", part.[[value]]).\n        O.value = part['[[value]]'];\n        // a. Perform ? CreateDataPropertyOrThrow(result, ? ToString(n), O).\n        result[n] = O;\n        // a. Increment n by 1.\n        n += 1;\n    }\n    // 5. Return result.\n    return result;\n}\n\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-partitionnumberpattern]\n */\nfunction PartitionNumberPattern(numberFormat, x) {\n\n    var internal = getInternalProperties(numberFormat),\n        locale = internal['[[dataLocale]]'],\n        nums = internal['[[numberingSystem]]'],\n        data = internals.NumberFormat['[[localeData]]'][locale],\n        ild = data.symbols[nums] || data.symbols.latn,\n        pattern = void 0;\n\n    // 1. If x is not NaN and x < 0, then:\n    if (!isNaN(x) && x < 0) {\n        // a. Let x be -x.\n        x = -x;\n        // a. Let pattern be the value of numberFormat.[[negativePattern]].\n        pattern = internal['[[negativePattern]]'];\n    }\n    // 2. Else,\n    else {\n            // a. Let pattern be the value of numberFormat.[[positivePattern]].\n            pattern = internal['[[positivePattern]]'];\n        }\n    // 3. Let result be a new empty List.\n    var result = new List();\n    // 4. Let beginIndex be Call(%StringProto_indexOf%, pattern, \"{\", 0).\n    var beginIndex = pattern.indexOf('{', 0);\n    // 5. Let endIndex be 0.\n    var endIndex = 0;\n    // 6. Let nextIndex be 0.\n    var nextIndex = 0;\n    // 7. Let length be the number of code units in pattern.\n    var length = pattern.length;\n    // 8. Repeat while beginIndex is an integer index into pattern:\n    while (beginIndex > -1 && beginIndex < length) {\n        // a. Set endIndex to Call(%StringProto_indexOf%, pattern, \"}\", beginIndex)\n        endIndex = pattern.indexOf('}', beginIndex);\n        // a. If endIndex = -1, throw new Error exception.\n        if (endIndex === -1) throw new Error();\n        // a. If beginIndex is greater than nextIndex, then:\n        if (beginIndex > nextIndex) {\n            // i. Let literal be a substring of pattern from position nextIndex, inclusive, to position beginIndex, exclusive.\n            var literal = pattern.substring(nextIndex, beginIndex);\n            // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n            arrPush.call(result, { '[[type]]': 'literal', '[[value]]': literal });\n        }\n        // a. Let p be the substring of pattern from position beginIndex, exclusive, to position endIndex, exclusive.\n        var p = pattern.substring(beginIndex + 1, endIndex);\n        // a. If p is equal \"number\", then:\n        if (p === \"number\") {\n            // i. If x is NaN,\n            if (isNaN(x)) {\n                // 1. Let n be an ILD String value indicating the NaN value.\n                var n = ild.nan;\n                // 2. Add new part record { [[type]]: \"nan\", [[value]]: n } as a new element of the list result.\n                arrPush.call(result, { '[[type]]': 'nan', '[[value]]': n });\n            }\n            // ii. Else if isFinite(x) is false,\n            else if (!isFinite(x)) {\n                    // 1. Let n be an ILD String value indicating infinity.\n                    var _n = ild.infinity;\n                    // 2. Add new part record { [[type]]: \"infinity\", [[value]]: n } as a new element of the list result.\n                    arrPush.call(result, { '[[type]]': 'infinity', '[[value]]': _n });\n                }\n                // iii. Else,\n                else {\n                        // 1. If the value of numberFormat.[[style]] is \"percent\" and isFinite(x), let x be 100 × x.\n                        if (internal['[[style]]'] === 'percent' && isFinite(x)) x *= 100;\n\n                        var _n2 = void 0;\n                        // 2. If the numberFormat.[[minimumSignificantDigits]] and numberFormat.[[maximumSignificantDigits]] are present, then\n                        if (hop.call(internal, '[[minimumSignificantDigits]]') && hop.call(internal, '[[maximumSignificantDigits]]')) {\n                            // a. Let n be ToRawPrecision(x, numberFormat.[[minimumSignificantDigits]], numberFormat.[[maximumSignificantDigits]]).\n                            _n2 = ToRawPrecision(x, internal['[[minimumSignificantDigits]]'], internal['[[maximumSignificantDigits]]']);\n                        }\n                        // 3. Else,\n                        else {\n                                // a. Let n be ToRawFixed(x, numberFormat.[[minimumIntegerDigits]], numberFormat.[[minimumFractionDigits]], numberFormat.[[maximumFractionDigits]]).\n                                _n2 = ToRawFixed(x, internal['[[minimumIntegerDigits]]'], internal['[[minimumFractionDigits]]'], internal['[[maximumFractionDigits]]']);\n                            }\n                        // 4. If the value of the numberFormat.[[numberingSystem]] matches one of the values in the \"Numbering System\" column of Table 2 below, then\n                        if (numSys[nums]) {\n                            (function () {\n                                // a. Let digits be an array whose 10 String valued elements are the UTF-16 string representations of the 10 digits specified in the \"Digits\" column of the matching row in Table 2.\n                                var digits = numSys[nums];\n                                // a. Replace each digit in n with the value of digits[digit].\n                                _n2 = String(_n2).replace(/\\d/g, function (digit) {\n                                    return digits[digit];\n                                });\n                            })();\n                        }\n                        // 5. Else use an implementation dependent algorithm to map n to the appropriate representation of n in the given numbering system.\n                        else _n2 = String(_n2); // ###TODO###\n\n                        var integer = void 0;\n                        var fraction = void 0;\n                        // 6. Let decimalSepIndex be Call(%StringProto_indexOf%, n, \".\", 0).\n                        var decimalSepIndex = _n2.indexOf('.', 0);\n                        // 7. If decimalSepIndex > 0, then:\n                        if (decimalSepIndex > 0) {\n                            // a. Let integer be the substring of n from position 0, inclusive, to position decimalSepIndex, exclusive.\n                            integer = _n2.substring(0, decimalSepIndex);\n                            // a. Let fraction be the substring of n from position decimalSepIndex, exclusive, to the end of n.\n                            fraction = _n2.substring(decimalSepIndex + 1, decimalSepIndex.length);\n                        }\n                        // 8. Else:\n                        else {\n                                // a. Let integer be n.\n                                integer = _n2;\n                                // a. Let fraction be undefined.\n                                fraction = undefined;\n                            }\n                        // 9. If the value of the numberFormat.[[useGrouping]] is true,\n                        if (internal['[[useGrouping]]'] === true) {\n                            // a. Let groupSepSymbol be the ILND String representing the grouping separator.\n                            var groupSepSymbol = ild.group;\n                            // a. Let groups be a List whose elements are, in left to right order, the substrings defined by ILND set of locations within the integer.\n                            var groups = [];\n                            // ----> implementation:\n                            // Primary group represents the group closest to the decimal\n                            var pgSize = data.patterns.primaryGroupSize || 3;\n                            // Secondary group is every other group\n                            var sgSize = data.patterns.secondaryGroupSize || pgSize;\n                            // Group only if necessary\n                            if (integer.length > pgSize) {\n                                // Index of the primary grouping separator\n                                var end = integer.length - pgSize;\n                                // Starting index for our loop\n                                var idx = end % sgSize;\n                                var start = integer.slice(0, idx);\n                                if (start.length) arrPush.call(groups, start);\n                                // Loop to separate into secondary grouping digits\n                                while (idx < end) {\n                                    arrPush.call(groups, integer.slice(idx, idx + sgSize));\n                                    idx += sgSize;\n                                }\n                                // Add the primary grouping digits\n                                arrPush.call(groups, integer.slice(end));\n                            } else {\n                                arrPush.call(groups, integer);\n                            }\n                            // a. Assert: The number of elements in groups List is greater than 0.\n                            if (groups.length === 0) throw new Error();\n                            // a. Repeat, while groups List is not empty:\n                            while (groups.length) {\n                                // i. Remove the first element from groups and let integerGroup be the value of that element.\n                                var integerGroup = arrShift.call(groups);\n                                // ii. Add new part record { [[type]]: \"integer\", [[value]]: integerGroup } as a new element of the list result.\n                                arrPush.call(result, { '[[type]]': 'integer', '[[value]]': integerGroup });\n                                // iii. If groups List is not empty, then:\n                                if (groups.length) {\n                                    // 1. Add new part record { [[type]]: \"group\", [[value]]: groupSepSymbol } as a new element of the list result.\n                                    arrPush.call(result, { '[[type]]': 'group', '[[value]]': groupSepSymbol });\n                                }\n                            }\n                        }\n                        // 10. Else,\n                        else {\n                                // a. Add new part record { [[type]]: \"integer\", [[value]]: integer } as a new element of the list result.\n                                arrPush.call(result, { '[[type]]': 'integer', '[[value]]': integer });\n                            }\n                        // 11. If fraction is not undefined, then:\n                        if (fraction !== undefined) {\n                            // a. Let decimalSepSymbol be the ILND String representing the decimal separator.\n                            var decimalSepSymbol = ild.decimal;\n                            // a. Add new part record { [[type]]: \"decimal\", [[value]]: decimalSepSymbol } as a new element of the list result.\n                            arrPush.call(result, { '[[type]]': 'decimal', '[[value]]': decimalSepSymbol });\n                            // a. Add new part record { [[type]]: \"fraction\", [[value]]: fraction } as a new element of the list result.\n                            arrPush.call(result, { '[[type]]': 'fraction', '[[value]]': fraction });\n                        }\n                    }\n        }\n        // a. Else if p is equal \"plusSign\", then:\n        else if (p === \"plusSign\") {\n                // i. Let plusSignSymbol be the ILND String representing the plus sign.\n                var plusSignSymbol = ild.plusSign;\n                // ii. Add new part record { [[type]]: \"plusSign\", [[value]]: plusSignSymbol } as a new element of the list result.\n                arrPush.call(result, { '[[type]]': 'plusSign', '[[value]]': plusSignSymbol });\n            }\n            // a. Else if p is equal \"minusSign\", then:\n            else if (p === \"minusSign\") {\n                    // i. Let minusSignSymbol be the ILND String representing the minus sign.\n                    var minusSignSymbol = ild.minusSign;\n                    // ii. Add new part record { [[type]]: \"minusSign\", [[value]]: minusSignSymbol } as a new element of the list result.\n                    arrPush.call(result, { '[[type]]': 'minusSign', '[[value]]': minusSignSymbol });\n                }\n                // a. Else if p is equal \"percentSign\" and numberFormat.[[style]] is \"percent\", then:\n                else if (p === \"percentSign\" && internal['[[style]]'] === \"percent\") {\n                        // i. Let percentSignSymbol be the ILND String representing the percent sign.\n                        var percentSignSymbol = ild.percentSign;\n                        // ii. Add new part record { [[type]]: \"percentSign\", [[value]]: percentSignSymbol } as a new element of the list result.\n                        arrPush.call(result, { '[[type]]': 'literal', '[[value]]': percentSignSymbol });\n                    }\n                    // a. Else if p is equal \"currency\" and numberFormat.[[style]] is \"currency\", then:\n                    else if (p === \"currency\" && internal['[[style]]'] === \"currency\") {\n                            // i. Let currency be the value of numberFormat.[[currency]].\n                            var currency = internal['[[currency]]'];\n\n                            var cd = void 0;\n\n                            // ii. If numberFormat.[[currencyDisplay]] is \"code\", then\n                            if (internal['[[currencyDisplay]]'] === \"code\") {\n                                // 1. Let cd be currency.\n                                cd = currency;\n                            }\n                            // iii. Else if numberFormat.[[currencyDisplay]] is \"symbol\", then\n                            else if (internal['[[currencyDisplay]]'] === \"symbol\") {\n                                    // 1. Let cd be an ILD string representing currency in short form. If the implementation does not have such a representation of currency, use currency itself.\n                                    cd = data.currencies[currency] || currency;\n                                }\n                                // iv. Else if numberFormat.[[currencyDisplay]] is \"name\", then\n                                else if (internal['[[currencyDisplay]]'] === \"name\") {\n                                        // 1. Let cd be an ILD string representing currency in long form. If the implementation does not have such a representation of currency, then use currency itself.\n                                        cd = currency;\n                                    }\n                            // v. Add new part record { [[type]]: \"currency\", [[value]]: cd } as a new element of the list result.\n                            arrPush.call(result, { '[[type]]': 'currency', '[[value]]': cd });\n                        }\n                        // a. Else,\n                        else {\n                                // i. Let literal be the substring of pattern from position beginIndex, inclusive, to position endIndex, inclusive.\n                                var _literal = pattern.substring(beginIndex, endIndex);\n                                // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n                                arrPush.call(result, { '[[type]]': 'literal', '[[value]]': _literal });\n                            }\n        // a. Set nextIndex to endIndex + 1.\n        nextIndex = endIndex + 1;\n        // a. Set beginIndex to Call(%StringProto_indexOf%, pattern, \"{\", nextIndex)\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    // 9. If nextIndex is less than length, then:\n    if (nextIndex < length) {\n        // a. Let literal be the substring of pattern from position nextIndex, inclusive, to position length, exclusive.\n        var _literal2 = pattern.substring(nextIndex, length);\n        // a. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n        arrPush.call(result, { '[[type]]': 'literal', '[[value]]': _literal2 });\n    }\n    // 10. Return result.\n    return result;\n}\n\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-formatnumber]\n */\nfunction FormatNumber(numberFormat, x) {\n    // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n    var parts = PartitionNumberPattern(numberFormat, x);\n    // 2. Let result be an empty String.\n    var result = '';\n    // 3. For each part in parts, do:\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        // a. Set result to a String value produced by concatenating result and part.[[value]].\n        result += part['[[value]]'];\n    }\n    // 4. Return result.\n    return result;\n}\n\n/**\n * When the ToRawPrecision abstract operation is called with arguments x (which\n * must be a finite non-negative number), minPrecision, and maxPrecision (both\n * must be integers between 1 and 21) the following steps are taken:\n */\nfunction ToRawPrecision(x, minPrecision, maxPrecision) {\n    // 1. Let p be maxPrecision.\n    var p = maxPrecision;\n\n    var m = void 0,\n        e = void 0;\n\n    // 2. If x = 0, then\n    if (x === 0) {\n        // a. Let m be the String consisting of p occurrences of the character \"0\".\n        m = arrJoin.call(Array(p + 1), '0');\n        // b. Let e be 0.\n        e = 0;\n    }\n    // 3. Else\n    else {\n            // a. Let e and n be integers such that 10ᵖ⁻¹ ≤ n < 10ᵖ and for which the\n            //    exact mathematical value of n × 10ᵉ⁻ᵖ⁺¹ – x is as close to zero as\n            //    possible. If there are two such sets of e and n, pick the e and n for\n            //    which n × 10ᵉ⁻ᵖ⁺¹ is larger.\n            e = log10Floor(Math.abs(x));\n\n            // Easier to get to m from here\n            var f = Math.round(Math.exp(Math.abs(e - p + 1) * Math.LN10));\n\n            // b. Let m be the String consisting of the digits of the decimal\n            //    representation of n (in order, with no leading zeroes)\n            m = String(Math.round(e - p + 1 < 0 ? x * f : x / f));\n        }\n\n    // 4. If e ≥ p, then\n    if (e >= p)\n        // a. Return the concatenation of m and e-p+1 occurrences of the character \"0\".\n        return m + arrJoin.call(Array(e - p + 1 + 1), '0');\n\n        // 5. If e = p-1, then\n    else if (e === p - 1)\n            // a. Return m.\n            return m;\n\n            // 6. If e ≥ 0, then\n        else if (e >= 0)\n                // a. Let m be the concatenation of the first e+1 characters of m, the character\n                //    \".\", and the remaining p–(e+1) characters of m.\n                m = m.slice(0, e + 1) + '.' + m.slice(e + 1);\n\n                // 7. If e < 0, then\n            else if (e < 0)\n                    // a. Let m be the concatenation of the String \"0.\", –(e+1) occurrences of the\n                    //    character \"0\", and the string m.\n                    m = '0.' + arrJoin.call(Array(-(e + 1) + 1), '0') + m;\n\n    // 8. If m contains the character \".\", and maxPrecision > minPrecision, then\n    if (m.indexOf(\".\") >= 0 && maxPrecision > minPrecision) {\n        // a. Let cut be maxPrecision – minPrecision.\n        var cut = maxPrecision - minPrecision;\n\n        // b. Repeat while cut > 0 and the last character of m is \"0\":\n        while (cut > 0 && m.charAt(m.length - 1) === '0') {\n            //  i. Remove the last character from m.\n            m = m.slice(0, -1);\n\n            //  ii. Decrease cut by 1.\n            cut--;\n        }\n\n        // c. If the last character of m is \".\", then\n        if (m.charAt(m.length - 1) === '.')\n            //    i. Remove the last character from m.\n            m = m.slice(0, -1);\n    }\n    // 9. Return m.\n    return m;\n}\n\n/**\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-torawfixed]\n * When the ToRawFixed abstract operation is called with arguments x (which must\n * be a finite non-negative number), minInteger (which must be an integer between\n * 1 and 21), minFraction, and maxFraction (which must be integers between 0 and\n * 20) the following steps are taken:\n */\nfunction ToRawFixed(x, minInteger, minFraction, maxFraction) {\n    // 1. Let f be maxFraction.\n    var f = maxFraction;\n    // 2. Let n be an integer for which the exact mathematical value of n ÷ 10f – x is as close to zero as possible. If there are two such n, pick the larger n.\n    var n = Math.pow(10, f) * x; // diverging...\n    // 3. If n = 0, let m be the String \"0\". Otherwise, let m be the String consisting of the digits of the decimal representation of n (in order, with no leading zeroes).\n    var m = n === 0 ? \"0\" : n.toFixed(0); // divering...\n\n    {\n        // this diversion is needed to take into consideration big numbers, e.g.:\n        // 1.2344501e+37 -> 12344501000000000000000000000000000000\n        var idx = void 0;\n        var exp = (idx = m.indexOf('e')) > -1 ? m.slice(idx + 1) : 0;\n        if (exp) {\n            m = m.slice(0, idx).replace('.', '');\n            m += arrJoin.call(Array(exp - (m.length - 1) + 1), '0');\n        }\n    }\n\n    var int = void 0;\n    // 4. If f ≠ 0, then\n    if (f !== 0) {\n        // a. Let k be the number of characters in m.\n        var k = m.length;\n        // a. If k ≤ f, then\n        if (k <= f) {\n            // i. Let z be the String consisting of f+1–k occurrences of the character \"0\".\n            var z = arrJoin.call(Array(f + 1 - k + 1), '0');\n            // ii. Let m be the concatenation of Strings z and m.\n            m = z + m;\n            // iii. Let k be f+1.\n            k = f + 1;\n        }\n        // a. Let a be the first k–f characters of m, and let b be the remaining f characters of m.\n        var a = m.substring(0, k - f),\n            b = m.substring(k - f, m.length);\n        // a. Let m be the concatenation of the three Strings a, \".\", and b.\n        m = a + \".\" + b;\n        // a. Let int be the number of characters in a.\n        int = a.length;\n    }\n    // 5. Else, let int be the number of characters in m.\n    else int = m.length;\n    // 6. Let cut be maxFraction – minFraction.\n    var cut = maxFraction - minFraction;\n    // 7. Repeat while cut > 0 and the last character of m is \"0\":\n    while (cut > 0 && m.slice(-1) === \"0\") {\n        // a. Remove the last character from m.\n        m = m.slice(0, -1);\n        // a. Decrease cut by 1.\n        cut--;\n    }\n    // 8. If the last character of m is \".\", then\n    if (m.slice(-1) === \".\") {\n        // a. Remove the last character from m.\n        m = m.slice(0, -1);\n    }\n    // 9. If int < minInteger, then\n    if (int < minInteger) {\n        // a. Let z be the String consisting of minInteger–int occurrences of the character \"0\".\n        var _z = arrJoin.call(Array(minInteger - int + 1), '0');\n        // a. Let m be the concatenation of Strings z and m.\n        m = _z + m;\n    }\n    // 10. Return m.\n    return m;\n}\n\n// Sect 11.3.2 Table 2, Numbering systems\n// ======================================\nvar numSys = {\n    arab: [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"],\n    arabext: [\"۰\", \"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\"],\n    bali: [\"᭐\", \"᭑\", \"᭒\", \"᭓\", \"᭔\", \"᭕\", \"᭖\", \"᭗\", \"᭘\", \"᭙\"],\n    beng: [\"০\", \"১\", \"২\", \"৩\", \"৪\", \"৫\", \"৬\", \"৭\", \"৮\", \"৯\"],\n    deva: [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"],\n    fullwide: [\"０\", \"１\", \"２\", \"３\", \"４\", \"５\", \"６\", \"７\", \"８\", \"９\"],\n    gujr: [\"૦\", \"૧\", \"૨\", \"૩\", \"૪\", \"૫\", \"૬\", \"૭\", \"૮\", \"૯\"],\n    guru: [\"੦\", \"੧\", \"੨\", \"੩\", \"੪\", \"੫\", \"੬\", \"੭\", \"੮\", \"੯\"],\n    hanidec: [\"〇\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"],\n    khmr: [\"០\", \"១\", \"២\", \"៣\", \"៤\", \"៥\", \"៦\", \"៧\", \"៨\", \"៩\"],\n    knda: [\"೦\", \"೧\", \"೨\", \"೩\", \"೪\", \"೫\", \"೬\", \"೭\", \"೮\", \"೯\"],\n    laoo: [\"໐\", \"໑\", \"໒\", \"໓\", \"໔\", \"໕\", \"໖\", \"໗\", \"໘\", \"໙\"],\n    latn: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n    limb: [\"᥆\", \"᥇\", \"᥈\", \"᥉\", \"᥊\", \"᥋\", \"᥌\", \"᥍\", \"᥎\", \"᥏\"],\n    mlym: [\"൦\", \"൧\", \"൨\", \"൩\", \"൪\", \"൫\", \"൬\", \"൭\", \"൮\", \"൯\"],\n    mong: [\"᠐\", \"᠑\", \"᠒\", \"᠓\", \"᠔\", \"᠕\", \"᠖\", \"᠗\", \"᠘\", \"᠙\"],\n    mymr: [\"၀\", \"၁\", \"၂\", \"၃\", \"၄\", \"၅\", \"၆\", \"၇\", \"၈\", \"၉\"],\n    orya: [\"୦\", \"୧\", \"୨\", \"୩\", \"୪\", \"୫\", \"୬\", \"୭\", \"୮\", \"୯\"],\n    tamldec: [\"௦\", \"௧\", \"௨\", \"௩\", \"௪\", \"௫\", \"௬\", \"௭\", \"௮\", \"௯\"],\n    telu: [\"౦\", \"౧\", \"౨\", \"౩\", \"౪\", \"౫\", \"౬\", \"౭\", \"౮\", \"౯\"],\n    thai: [\"๐\", \"๑\", \"๒\", \"๓\", \"๔\", \"๕\", \"๖\", \"๗\", \"๘\", \"๙\"],\n    tibt: [\"༠\", \"༡\", \"༢\", \"༣\", \"༤\", \"༥\", \"༦\", \"༧\", \"༨\", \"༩\"]\n};\n\n/**\n * This function provides access to the locale and formatting options computed\n * during initialization of the object.\n *\n * The function returns a new object whose properties and attributes are set as\n * if constructed by an object literal assigning to each of the following\n * properties the value of the corresponding internal property of this\n * NumberFormat object (see 11.4): locale, numberingSystem, style, currency,\n * currencyDisplay, minimumIntegerDigits, minimumFractionDigits,\n * maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits, and\n * useGrouping. Properties whose corresponding internal properties are not present\n * are not assigned.\n */\n/* 11.3.3 */defineProperty(Intl.NumberFormat.prototype, 'resolvedOptions', {\n    configurable: true,\n    writable: true,\n    value: function value() {\n        var prop = void 0,\n            descs = new Record(),\n            props = ['locale', 'numberingSystem', 'style', 'currency', 'currencyDisplay', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', 'useGrouping'],\n            internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n        // Satisfy test 11.3_b\n        if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.NumberFormat object.');\n\n        for (var i = 0, max = props.length; i < max; i++) {\n            if (hop.call(internal, prop = '[[' + props[i] + ']]')) descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };\n        }\n\n        return objCreate({}, descs);\n    }\n});\n\n/* jslint esnext: true */\n\n// Match these datetime components in a CLDR pattern, except those in single quotes\nvar expDTComponents = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n// trim patterns after transformations\nvar expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n// Skip over patterns with these datetime components because we don't have data\n// to back them up:\n// timezone, weekday, amoung others\nvar unwantedDTCs = /[rqQASjJgwWIQq]/; // xXVO were removed from this list in favor of computing matches with timeZoneName values but printing as empty string\n\nvar dtKeys = [\"era\", \"year\", \"month\", \"day\", \"weekday\", \"quarter\"];\nvar tmKeys = [\"hour\", \"minute\", \"second\", \"hour12\", \"timeZoneName\"];\n\nfunction isDateFormatOnly(obj) {\n    for (var i = 0; i < tmKeys.length; i += 1) {\n        if (obj.hasOwnProperty(tmKeys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isTimeFormatOnly(obj) {\n    for (var i = 0; i < dtKeys.length; i += 1) {\n        if (obj.hasOwnProperty(dtKeys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction joinDateAndTimeFormats(dateFormatObj, timeFormatObj) {\n    var o = { _: {} };\n    for (var i = 0; i < dtKeys.length; i += 1) {\n        if (dateFormatObj[dtKeys[i]]) {\n            o[dtKeys[i]] = dateFormatObj[dtKeys[i]];\n        }\n        if (dateFormatObj._[dtKeys[i]]) {\n            o._[dtKeys[i]] = dateFormatObj._[dtKeys[i]];\n        }\n    }\n    for (var j = 0; j < tmKeys.length; j += 1) {\n        if (timeFormatObj[tmKeys[j]]) {\n            o[tmKeys[j]] = timeFormatObj[tmKeys[j]];\n        }\n        if (timeFormatObj._[tmKeys[j]]) {\n            o._[tmKeys[j]] = timeFormatObj._[tmKeys[j]];\n        }\n    }\n    return o;\n}\n\nfunction computeFinalPatterns(formatObj) {\n    // From http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns:\n    //  'In patterns, two single quotes represents a literal single quote, either\n    //   inside or outside single quotes. Text within single quotes is not\n    //   interpreted in any way (except for two adjacent single quotes).'\n    formatObj.pattern12 = formatObj.extendedPattern.replace(/'([^']*)'/g, function ($0, literal) {\n        return literal ? literal : \"'\";\n    });\n\n    // pattern 12 is always the default. we can produce the 24 by removing {ampm}\n    formatObj.pattern = formatObj.pattern12.replace('{ampm}', '').replace(expPatternTrimmer, '');\n    return formatObj;\n}\n\nfunction expDTComponentsMeta($0, formatObj) {\n    switch ($0.charAt(0)) {\n        // --- Era\n        case 'G':\n            formatObj.era = ['short', 'short', 'short', 'long', 'narrow'][$0.length - 1];\n            return '{era}';\n\n        // --- Year\n        case 'y':\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n            formatObj.year = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{year}';\n\n        // --- Quarter (not supported in this polyfill)\n        case 'Q':\n        case 'q':\n            formatObj.quarter = ['numeric', '2-digit', 'short', 'long', 'narrow'][$0.length - 1];\n            return '{quarter}';\n\n        // --- Month\n        case 'M':\n        case 'L':\n            formatObj.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][$0.length - 1];\n            return '{month}';\n\n        // --- Week (not supported in this polyfill)\n        case 'w':\n            // week of the year\n            formatObj.week = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{weekday}';\n        case 'W':\n            // week of the month\n            formatObj.week = 'numeric';\n            return '{weekday}';\n\n        // --- Day\n        case 'd':\n            // day of the month\n            formatObj.day = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{day}';\n        case 'D': // day of the year\n        case 'F': // day of the week\n        case 'g':\n            // 1..n: Modified Julian day\n            formatObj.day = 'numeric';\n            return '{day}';\n\n        // --- Week Day\n        case 'E':\n            // day of the week\n            formatObj.weekday = ['short', 'short', 'short', 'long', 'narrow', 'short'][$0.length - 1];\n            return '{weekday}';\n        case 'e':\n            // local day of the week\n            formatObj.weekday = ['numeric', '2-digit', 'short', 'long', 'narrow', 'short'][$0.length - 1];\n            return '{weekday}';\n        case 'c':\n            // stand alone local day of the week\n            formatObj.weekday = ['numeric', undefined, 'short', 'long', 'narrow', 'short'][$0.length - 1];\n            return '{weekday}';\n\n        // --- Period\n        case 'a': // AM, PM\n        case 'b': // am, pm, noon, midnight\n        case 'B':\n            // flexible day periods\n            formatObj.hour12 = true;\n            return '{ampm}';\n\n        // --- Hour\n        case 'h':\n        case 'H':\n            formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{hour}';\n        case 'k':\n        case 'K':\n            formatObj.hour12 = true; // 12-hour-cycle time formats (using h or K)\n            formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{hour}';\n\n        // --- Minute\n        case 'm':\n            formatObj.minute = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{minute}';\n\n        // --- Second\n        case 's':\n            formatObj.second = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{second}';\n        case 'S':\n        case 'A':\n            formatObj.second = 'numeric';\n            return '{second}';\n\n        // --- Timezone\n        case 'z': // 1..3, 4: specific non-location format\n        case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n        case 'O': // 1, 4: miliseconds in day short, long\n        case 'v': // 1, 4: generic non-location format\n        case 'V': // 1, 2, 3, 4: time zone ID or city\n        case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n        case 'x':\n            // 1, 2, 3, 4: The ISO8601 varios formats\n            // this polyfill only supports much, for now, we are just doing something dummy\n            formatObj.timeZoneName = $0.length < 4 ? 'short' : 'long';\n            return '{timeZoneName}';\n    }\n}\n\n/**\n * Converts the CLDR availableFormats into the objects and patterns required by\n * the ECMAScript Internationalization API specification.\n */\nfunction createDateTimeFormat(skeleton, pattern) {\n    // we ignore certain patterns that are unsupported to avoid this expensive op.\n    if (unwantedDTCs.test(pattern)) return undefined;\n\n    var formatObj = {\n        originalPattern: pattern,\n        _: {}\n    };\n\n    // Replace the pattern string with the one required by the specification, whilst\n    // at the same time evaluating it for the subsets and formats\n    formatObj.extendedPattern = pattern.replace(expDTComponents, function ($0) {\n        // See which symbol we're dealing with\n        return expDTComponentsMeta($0, formatObj._);\n    });\n\n    // Match the skeleton string with the one required by the specification\n    // this implementation is based on the Date Field Symbol Table:\n    // http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n    // Note: we are adding extra data to the formatObject even though this polyfill\n    //       might not support it.\n    skeleton.replace(expDTComponents, function ($0) {\n        // See which symbol we're dealing with\n        return expDTComponentsMeta($0, formatObj);\n    });\n\n    return computeFinalPatterns(formatObj);\n}\n\n/**\n * Processes DateTime formats from CLDR to an easier-to-parse format.\n * the result of this operation should be cached the first time a particular\n * calendar is analyzed.\n *\n * The specification requires we support at least the following subsets of\n * date/time components:\n *\n *   - 'weekday', 'year', 'month', 'day', 'hour', 'minute', 'second'\n *   - 'weekday', 'year', 'month', 'day'\n *   - 'year', 'month', 'day'\n *   - 'year', 'month'\n *   - 'month', 'day'\n *   - 'hour', 'minute', 'second'\n *   - 'hour', 'minute'\n *\n * We need to cherry pick at least these subsets from the CLDR data and convert\n * them into the pattern objects used in the ECMA-402 API.\n */\nfunction createDateTimeFormats(formats) {\n    var availableFormats = formats.availableFormats;\n    var timeFormats = formats.timeFormats;\n    var dateFormats = formats.dateFormats;\n    var result = [];\n    var skeleton = void 0,\n        pattern = void 0,\n        computed = void 0,\n        i = void 0,\n        j = void 0;\n    var timeRelatedFormats = [];\n    var dateRelatedFormats = [];\n\n    // Map available (custom) formats into a pattern for createDateTimeFormats\n    for (skeleton in availableFormats) {\n        if (availableFormats.hasOwnProperty(skeleton)) {\n            pattern = availableFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                // in some cases, the format is only displaying date specific props\n                // or time specific props, in which case we need to also produce the\n                // combined formats.\n                if (isDateFormatOnly(computed)) {\n                    dateRelatedFormats.push(computed);\n                } else if (isTimeFormatOnly(computed)) {\n                    timeRelatedFormats.push(computed);\n                }\n            }\n        }\n    }\n\n    // Map time formats into a pattern for createDateTimeFormats\n    for (skeleton in timeFormats) {\n        if (timeFormats.hasOwnProperty(skeleton)) {\n            pattern = timeFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                timeRelatedFormats.push(computed);\n            }\n        }\n    }\n\n    // Map date formats into a pattern for createDateTimeFormats\n    for (skeleton in dateFormats) {\n        if (dateFormats.hasOwnProperty(skeleton)) {\n            pattern = dateFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                dateRelatedFormats.push(computed);\n            }\n        }\n    }\n\n    // combine custom time and custom date formats when they are orthogonals to complete the\n    // formats supported by CLDR.\n    // This Algo is based on section \"Missing Skeleton Fields\" from:\n    // http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems\n    for (i = 0; i < timeRelatedFormats.length; i += 1) {\n        for (j = 0; j < dateRelatedFormats.length; j += 1) {\n            if (dateRelatedFormats[j].month === 'long') {\n                pattern = dateRelatedFormats[j].weekday ? formats.full : formats.long;\n            } else if (dateRelatedFormats[j].month === 'short') {\n                pattern = formats.medium;\n            } else {\n                pattern = formats.short;\n            }\n            computed = joinDateAndTimeFormats(dateRelatedFormats[j], timeRelatedFormats[i]);\n            computed.originalPattern = pattern;\n            computed.extendedPattern = pattern.replace('{0}', timeRelatedFormats[i].extendedPattern).replace('{1}', dateRelatedFormats[j].extendedPattern).replace(/^[,\\s]+|[,\\s]+$/gi, '');\n            result.push(computeFinalPatterns(computed));\n        }\n    }\n\n    return result;\n}\n\n// this represents the exceptions of the rule that are not covered by CLDR availableFormats\n// for single property configurations, they play no role when using multiple properties, and\n// those that are not in this table, are not exceptions or are not covered by the data we\n// provide.\nvar validSyntheticProps = {\n    second: {\n        numeric: 's',\n        '2-digit': 'ss'\n    },\n    minute: {\n        numeric: 'm',\n        '2-digit': 'mm'\n    },\n    year: {\n        numeric: 'y',\n        '2-digit': 'yy'\n    },\n    day: {\n        numeric: 'd',\n        '2-digit': 'dd'\n    },\n    month: {\n        numeric: 'L',\n        '2-digit': 'LL',\n        narrow: 'LLLLL',\n        short: 'LLL',\n        long: 'LLLL'\n    },\n    weekday: {\n        narrow: 'ccccc',\n        short: 'ccc',\n        long: 'cccc'\n    }\n};\n\nfunction generateSyntheticFormat(propName, propValue) {\n    if (validSyntheticProps[propName] && validSyntheticProps[propName][propValue]) {\n        var _ref2;\n\n        return _ref2 = {\n            originalPattern: validSyntheticProps[propName][propValue],\n            _: defineProperty$1({}, propName, propValue),\n            extendedPattern: \"{\" + propName + \"}\"\n        }, defineProperty$1(_ref2, propName, propValue), defineProperty$1(_ref2, \"pattern12\", \"{\" + propName + \"}\"), defineProperty$1(_ref2, \"pattern\", \"{\" + propName + \"}\"), _ref2;\n    }\n}\n\n// An object map of date component keys, saves using a regex later\nvar dateWidths = objCreate(null, { narrow: {}, short: {}, long: {} });\n\n/**\n * Returns a string for a date component, resolved using multiple inheritance as specified\n * as specified in the Unicode Technical Standard 35.\n */\nfunction resolveDateString(data, ca, component, width, key) {\n    // From http://www.unicode.org/reports/tr35/tr35.html#Multiple_Inheritance:\n    // 'In clearly specified instances, resources may inherit from within the same locale.\n    //  For example, ... the Buddhist calendar inherits from the Gregorian calendar.'\n    var obj = data[ca] && data[ca][component] ? data[ca][component] : data.gregory[component],\n\n\n    // \"sideways\" inheritance resolves strings when a key doesn't exist\n    alts = {\n        narrow: ['short', 'long'],\n        short: ['long', 'narrow'],\n        long: ['short', 'narrow']\n    },\n\n\n    //\n    resolved = hop.call(obj, width) ? obj[width] : hop.call(obj, alts[width][0]) ? obj[alts[width][0]] : obj[alts[width][1]];\n\n    // `key` wouldn't be specified for components 'dayPeriods'\n    return key !== null ? resolved[key] : resolved;\n}\n\n// Define the DateTimeFormat constructor internally so it cannot be tainted\nfunction DateTimeFormatConstructor() {\n    var locales = arguments[0];\n    var options = arguments[1];\n\n    if (!this || this === Intl) {\n        return new Intl.DateTimeFormat(locales, options);\n    }\n    return InitializeDateTimeFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'DateTimeFormat', {\n    configurable: true,\n    writable: true,\n    value: DateTimeFormatConstructor\n});\n\n// Must explicitly set prototypes as unwritable\ndefineProperty(DateTimeFormatConstructor, 'prototype', {\n    writable: false\n});\n\n/**\n * The abstract operation InitializeDateTimeFormat accepts the arguments dateTimeFormat\n * (which must be an object), locales, and options. It initializes dateTimeFormat as a\n * DateTimeFormat object.\n */\nfunction /* 12.1.1.1 */InitializeDateTimeFormat(dateTimeFormat, locales, options) {\n    // This will be a internal properties object if we're not already initialized\n    var internal = getInternalProperties(dateTimeFormat);\n\n    // Create an object whose props can be used to restore the values of RegExp props\n    var regexpRestore = createRegExpRestore();\n\n    // 1. If dateTimeFormat has an [[initializedIntlObject]] internal property with\n    //    value true, throw a TypeError exception.\n    if (internal['[[initializedIntlObject]]'] === true) throw new TypeError('`this` object has already been initialized as an Intl object');\n\n    // Need this to access the `internal` object\n    defineProperty(dateTimeFormat, '__getInternalProperties', {\n        value: function value() {\n            // NOTE: Non-standard, for internal use only\n            if (arguments[0] === secret) return internal;\n        }\n    });\n\n    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n    internal['[[initializedIntlObject]]'] = true;\n\n    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    var requestedLocales = CanonicalizeLocaleList(locales);\n\n    // 4. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined below) with arguments options, \"any\", and \"date\".\n    options = ToDateTimeOptions(options, 'any', 'date');\n\n    // 5. Let opt be a new Record.\n    var opt = new Record();\n\n    // 6. Let matcher be the result of calling the GetOption abstract operation\n    //    (defined in 9.2.9) with arguments options, \"localeMatcher\", \"string\", a List\n    //    containing the two String values \"lookup\" and \"best fit\", and \"best fit\".\n    var matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');\n\n    // 7. Set opt.[[localeMatcher]] to matcher.\n    opt['[[localeMatcher]]'] = matcher;\n\n    // 8. Let DateTimeFormat be the standard built-in object that is the initial\n    //    value of Intl.DateTimeFormat.\n    var DateTimeFormat = internals.DateTimeFormat; // This is what we *really* need\n\n    // 9. Let localeData be the value of the [[localeData]] internal property of\n    //    DateTimeFormat.\n    var localeData = DateTimeFormat['[[localeData]]'];\n\n    // 10. Let r be the result of calling the ResolveLocale abstract operation\n    //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n    //      DateTimeFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n    //      internal property of DateTimeFormat, and localeData.\n    var r = ResolveLocale(DateTimeFormat['[[availableLocales]]'], requestedLocales, opt, DateTimeFormat['[[relevantExtensionKeys]]'], localeData);\n\n    // 11. Set the [[locale]] internal property of dateTimeFormat to the value of\n    //     r.[[locale]].\n    internal['[[locale]]'] = r['[[locale]]'];\n\n    // 12. Set the [[calendar]] internal property of dateTimeFormat to the value of\n    //     r.[[ca]].\n    internal['[[calendar]]'] = r['[[ca]]'];\n\n    // 13. Set the [[numberingSystem]] internal property of dateTimeFormat to the value of\n    //     r.[[nu]].\n    internal['[[numberingSystem]]'] = r['[[nu]]'];\n\n    // The specification doesn't tell us to do this, but it's helpful later on\n    internal['[[dataLocale]]'] = r['[[dataLocale]]'];\n\n    // 14. Let dataLocale be the value of r.[[dataLocale]].\n    var dataLocale = r['[[dataLocale]]'];\n\n    // 15. Let tz be the result of calling the [[Get]] internal method of options with\n    //     argument \"timeZone\".\n    var tz = options.timeZone;\n\n    // 16. If tz is not undefined, then\n    if (tz !== undefined) {\n        // a. Let tz be ToString(tz).\n        // b. Convert tz to upper case as described in 6.1.\n        //    NOTE: If an implementation accepts additional time zone values, as permitted\n        //          under certain conditions by the Conformance clause, different casing\n        //          rules apply.\n        tz = toLatinUpperCase(tz);\n\n        // c. If tz is not \"UTC\", then throw a RangeError exception.\n        // ###TODO: accept more time zones###\n        if (tz !== 'UTC') throw new RangeError('timeZone is not supported.');\n    }\n\n    // 17. Set the [[timeZone]] internal property of dateTimeFormat to tz.\n    internal['[[timeZone]]'] = tz;\n\n    // 18. Let opt be a new Record.\n    opt = new Record();\n\n    // 19. For each row of Table 3, except the header row, do:\n    for (var prop in dateTimeComponents) {\n        if (!hop.call(dateTimeComponents, prop)) continue;\n\n        // 20. Let prop be the name given in the Property column of the row.\n        // 21. Let value be the result of calling the GetOption abstract operation,\n        //     passing as argument options, the name given in the Property column of the\n        //     row, \"string\", a List containing the strings given in the Values column of\n        //     the row, and undefined.\n        var value = GetOption(options, prop, 'string', dateTimeComponents[prop]);\n\n        // 22. Set opt.[[<prop>]] to value.\n        opt['[[' + prop + ']]'] = value;\n    }\n\n    // Assigned a value below\n    var bestFormat = void 0;\n\n    // 23. Let dataLocaleData be the result of calling the [[Get]] internal method of\n    //     localeData with argument dataLocale.\n    var dataLocaleData = localeData[dataLocale];\n\n    // 24. Let formats be the result of calling the [[Get]] internal method of\n    //     dataLocaleData with argument \"formats\".\n    //     Note: we process the CLDR formats into the spec'd structure\n    var formats = ToDateTimeFormats(dataLocaleData.formats);\n\n    // 25. Let matcher be the result of calling the GetOption abstract operation with\n    //     arguments options, \"formatMatcher\", \"string\", a List containing the two String\n    //     values \"basic\" and \"best fit\", and \"best fit\".\n    matcher = GetOption(options, 'formatMatcher', 'string', new List('basic', 'best fit'), 'best fit');\n\n    // Optimization: caching the processed formats as a one time operation by\n    // replacing the initial structure from localeData\n    dataLocaleData.formats = formats;\n\n    // 26. If matcher is \"basic\", then\n    if (matcher === 'basic') {\n        // 27. Let bestFormat be the result of calling the BasicFormatMatcher abstract\n        //     operation (defined below) with opt and formats.\n        bestFormat = BasicFormatMatcher(opt, formats);\n\n        // 28. Else\n    } else {\n        {\n            // diverging\n            var _hr = GetOption(options, 'hour12', 'boolean' /*, undefined, undefined*/);\n            opt.hour12 = _hr === undefined ? dataLocaleData.hour12 : _hr;\n        }\n        // 29. Let bestFormat be the result of calling the BestFitFormatMatcher\n        //     abstract operation (defined below) with opt and formats.\n        bestFormat = BestFitFormatMatcher(opt, formats);\n    }\n\n    // 30. For each row in Table 3, except the header row, do\n    for (var _prop in dateTimeComponents) {\n        if (!hop.call(dateTimeComponents, _prop)) continue;\n\n        // a. Let prop be the name given in the Property column of the row.\n        // b. Let pDesc be the result of calling the [[GetOwnProperty]] internal method of\n        //    bestFormat with argument prop.\n        // c. If pDesc is not undefined, then\n        if (hop.call(bestFormat, _prop)) {\n            // i. Let p be the result of calling the [[Get]] internal method of bestFormat\n            //    with argument prop.\n            var p = bestFormat[_prop];\n            {\n                // diverging\n                p = bestFormat._ && hop.call(bestFormat._, _prop) ? bestFormat._[_prop] : p;\n            }\n\n            // ii. Set the [[<prop>]] internal property of dateTimeFormat to p.\n            internal['[[' + _prop + ']]'] = p;\n        }\n    }\n\n    var pattern = void 0; // Assigned a value below\n\n    // 31. Let hr12 be the result of calling the GetOption abstract operation with\n    //     arguments options, \"hour12\", \"boolean\", undefined, and undefined.\n    var hr12 = GetOption(options, 'hour12', 'boolean' /*, undefined, undefined*/);\n\n    // 32. If dateTimeFormat has an internal property [[hour]], then\n    if (internal['[[hour]]']) {\n        // a. If hr12 is undefined, then let hr12 be the result of calling the [[Get]]\n        //    internal method of dataLocaleData with argument \"hour12\".\n        hr12 = hr12 === undefined ? dataLocaleData.hour12 : hr12;\n\n        // b. Set the [[hour12]] internal property of dateTimeFormat to hr12.\n        internal['[[hour12]]'] = hr12;\n\n        // c. If hr12 is true, then\n        if (hr12 === true) {\n            // i. Let hourNo0 be the result of calling the [[Get]] internal method of\n            //    dataLocaleData with argument \"hourNo0\".\n            var hourNo0 = dataLocaleData.hourNo0;\n\n            // ii. Set the [[hourNo0]] internal property of dateTimeFormat to hourNo0.\n            internal['[[hourNo0]]'] = hourNo0;\n\n            // iii. Let pattern be the result of calling the [[Get]] internal method of\n            //      bestFormat with argument \"pattern12\".\n            pattern = bestFormat.pattern12;\n        }\n\n        // d. Else\n        else\n            // i. Let pattern be the result of calling the [[Get]] internal method of\n            //    bestFormat with argument \"pattern\".\n            pattern = bestFormat.pattern;\n    }\n\n    // 33. Else\n    else\n        // a. Let pattern be the result of calling the [[Get]] internal method of\n        //    bestFormat with argument \"pattern\".\n        pattern = bestFormat.pattern;\n\n    // 34. Set the [[pattern]] internal property of dateTimeFormat to pattern.\n    internal['[[pattern]]'] = pattern;\n\n    // 35. Set the [[boundFormat]] internal property of dateTimeFormat to undefined.\n    internal['[[boundFormat]]'] = undefined;\n\n    // 36. Set the [[initializedDateTimeFormat]] internal property of dateTimeFormat to\n    //     true.\n    internal['[[initializedDateTimeFormat]]'] = true;\n\n    // In ES3, we need to pre-bind the format() function\n    if (es3) dateTimeFormat.format = GetFormatDateTime.call(dateTimeFormat);\n\n    // Restore the RegExp properties\n    regexpRestore();\n\n    // Return the newly initialised object\n    return dateTimeFormat;\n}\n\n/**\n * Several DateTimeFormat algorithms use values from the following table, which provides\n * property names and allowable values for the components of date and time formats:\n */\nvar dateTimeComponents = {\n    weekday: [\"narrow\", \"short\", \"long\"],\n    era: [\"narrow\", \"short\", \"long\"],\n    year: [\"2-digit\", \"numeric\"],\n    month: [\"2-digit\", \"numeric\", \"narrow\", \"short\", \"long\"],\n    day: [\"2-digit\", \"numeric\"],\n    hour: [\"2-digit\", \"numeric\"],\n    minute: [\"2-digit\", \"numeric\"],\n    second: [\"2-digit\", \"numeric\"],\n    timeZoneName: [\"short\", \"long\"]\n};\n\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\nfunction ToDateTimeFormats(formats) {\n    if (Object.prototype.toString.call(formats) === '[object Array]') {\n        return formats;\n    }\n    return createDateTimeFormats(formats);\n}\n\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\nfunction ToDateTimeOptions(options, required, defaults) {\n    // 1. If options is undefined, then let options be null, else let options be\n    //    ToObject(options).\n    if (options === undefined) options = null;else {\n        // (#12) options needs to be a Record, but it also needs to inherit properties\n        var opt2 = toObject(options);\n        options = new Record();\n\n        for (var k in opt2) {\n            options[k] = opt2[k];\n        }\n    }\n\n    // 2. Let create be the standard built-in function object defined in ES5, 15.2.3.5.\n    var create = objCreate;\n\n    // 3. Let options be the result of calling the [[Call]] internal method of create with\n    //    undefined as the this value and an argument list containing the single item\n    //    options.\n    options = create(options);\n\n    // 4. Let needDefaults be true.\n    var needDefaults = true;\n\n    // 5. If required is \"date\" or \"any\", then\n    if (required === 'date' || required === 'any') {\n        // a. For each of the property names \"weekday\", \"year\", \"month\", \"day\":\n        // i. If the result of calling the [[Get]] internal method of options with the\n        //    property name is not undefined, then let needDefaults be false.\n        if (options.weekday !== undefined || options.year !== undefined || options.month !== undefined || options.day !== undefined) needDefaults = false;\n    }\n\n    // 6. If required is \"time\" or \"any\", then\n    if (required === 'time' || required === 'any') {\n        // a. For each of the property names \"hour\", \"minute\", \"second\":\n        // i. If the result of calling the [[Get]] internal method of options with the\n        //    property name is not undefined, then let needDefaults be false.\n        if (options.hour !== undefined || options.minute !== undefined || options.second !== undefined) needDefaults = false;\n    }\n\n    // 7. If needDefaults is true and defaults is either \"date\" or \"all\", then\n    if (needDefaults && (defaults === 'date' || defaults === 'all'))\n        // a. For each of the property names \"year\", \"month\", \"day\":\n        // i. Call the [[DefineOwnProperty]] internal method of options with the\n        //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n        //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n        options.year = options.month = options.day = 'numeric';\n\n    // 8. If needDefaults is true and defaults is either \"time\" or \"all\", then\n    if (needDefaults && (defaults === 'time' || defaults === 'all'))\n        // a. For each of the property names \"hour\", \"minute\", \"second\":\n        // i. Call the [[DefineOwnProperty]] internal method of options with the\n        //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n        //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n        options.hour = options.minute = options.second = 'numeric';\n\n    // 9. Return options.\n    return options;\n}\n\n/**\n * When the BasicFormatMatcher abstract operation is called with two arguments options and\n * formats, the following steps are taken:\n */\nfunction BasicFormatMatcher(options, formats) {\n    // 1. Let removalPenalty be 120.\n    var removalPenalty = 120;\n\n    // 2. Let additionPenalty be 20.\n    var additionPenalty = 20;\n\n    // 3. Let longLessPenalty be 8.\n    var longLessPenalty = 8;\n\n    // 4. Let longMorePenalty be 6.\n    var longMorePenalty = 6;\n\n    // 5. Let shortLessPenalty be 6.\n    var shortLessPenalty = 6;\n\n    // 6. Let shortMorePenalty be 3.\n    var shortMorePenalty = 3;\n\n    // 7. Let bestScore be -Infinity.\n    var bestScore = -Infinity;\n\n    // 8. Let bestFormat be undefined.\n    var bestFormat = void 0;\n\n    // 9. Let i be 0.\n    var i = 0;\n\n    // 10. Assert: formats is an Array object.\n\n    // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n    var len = formats.length;\n\n    // 12. Repeat while i < len:\n    while (i < len) {\n        // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n        var format = formats[i];\n\n        // b. Let score be 0.\n        var score = 0;\n\n        // c. For each property shown in Table 3:\n        for (var property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, property)) continue;\n\n            // i. Let optionsProp be options.[[<property>]].\n            var optionsProp = options['[[' + property + ']]'];\n\n            // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n            //     with argument property.\n            // iii. If formatPropDesc is not undefined, then\n            //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n            var formatProp = hop.call(format, property) ? format[property] : undefined;\n\n            // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n            //     additionPenalty.\n            if (optionsProp === undefined && formatProp !== undefined) score -= additionPenalty;\n\n            // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n            //    removalPenalty.\n            else if (optionsProp !== undefined && formatProp === undefined) score -= removalPenalty;\n\n                // vi. Else\n                else {\n                        // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n                        //    \"long\"].\n                        var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n\n                        // 2. Let optionsPropIndex be the index of optionsProp within values.\n                        var optionsPropIndex = arrIndexOf.call(values, optionsProp);\n\n                        // 3. Let formatPropIndex be the index of formatProp within values.\n                        var formatPropIndex = arrIndexOf.call(values, formatProp);\n\n                        // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n                        var delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);\n\n                        // 5. If delta = 2, decrease score by longMorePenalty.\n                        if (delta === 2) score -= longMorePenalty;\n\n                        // 6. Else if delta = 1, decrease score by shortMorePenalty.\n                        else if (delta === 1) score -= shortMorePenalty;\n\n                            // 7. Else if delta = -1, decrease score by shortLessPenalty.\n                            else if (delta === -1) score -= shortLessPenalty;\n\n                                // 8. Else if delta = -2, decrease score by longLessPenalty.\n                                else if (delta === -2) score -= longLessPenalty;\n                    }\n        }\n\n        // d. If score > bestScore, then\n        if (score > bestScore) {\n            // i. Let bestScore be score.\n            bestScore = score;\n\n            // ii. Let bestFormat be format.\n            bestFormat = format;\n        }\n\n        // e. Increase i by 1.\n        i++;\n    }\n\n    // 13. Return bestFormat.\n    return bestFormat;\n}\n\n/**\n * When the BestFitFormatMatcher abstract operation is called with two arguments options\n * and formats, it performs implementation dependent steps, which should return a set of\n * component representations that a typical user of the selected locale would perceive as\n * at least as good as the one returned by BasicFormatMatcher.\n *\n * This polyfill defines the algorithm to be the same as BasicFormatMatcher,\n * with the addition of bonus points awarded where the requested format is of\n * the same data type as the potentially matching format.\n *\n * This algo relies on the concept of closest distance matching described here:\n * http://unicode.org/reports/tr35/tr35-dates.html#Matching_Skeletons\n * Typically a “best match” is found using a closest distance match, such as:\n *\n * Symbols requesting a best choice for the locale are replaced.\n *      j → one of {H, k, h, K}; C → one of {a, b, B}\n * -> Covered by cldr.js matching process\n *\n * For fields with symbols representing the same type (year, month, day, etc):\n *     Most symbols have a small distance from each other.\n *         M ≅ L; E ≅ c; a ≅ b ≅ B; H ≅ k ≅ h ≅ K; ...\n *     -> Covered by cldr.js matching process\n *\n *     Width differences among fields, other than those marking text vs numeric, are given small distance from each other.\n *         MMM ≅ MMMM\n *         MM ≅ M\n *     Numeric and text fields are given a larger distance from each other.\n *         MMM ≈ MM\n *     Symbols representing substantial differences (week of year vs week of month) are given much larger a distances from each other.\n *         d ≋ D; ...\n *     Missing or extra fields cause a match to fail. (But see Missing Skeleton Fields).\n *\n *\n * For example,\n *\n *     { month: 'numeric', day: 'numeric' }\n *\n * should match\n *\n *     { month: '2-digit', day: '2-digit' }\n *\n * rather than\n *\n *     { month: 'short', day: 'numeric' }\n *\n * This makes sense because a user requesting a formatted date with numeric parts would\n * not expect to see the returned format containing narrow, short or long part names\n */\nfunction BestFitFormatMatcher(options, formats) {\n    /** Diverging: this block implements the hack for single property configuration, eg.:\n     *\n     *      `new Intl.DateTimeFormat('en', {day: 'numeric'})`\n     *\n     * should produce a single digit with the day of the month. This is needed because\n     * CLDR `availableFormats` data structure doesn't cover these cases.\n     */\n    {\n        var optionsPropNames = [];\n        for (var property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, property)) continue;\n\n            if (options['[[' + property + ']]'] !== undefined) {\n                optionsPropNames.push(property);\n            }\n        }\n        if (optionsPropNames.length === 1) {\n            var _bestFormat = generateSyntheticFormat(optionsPropNames[0], options['[[' + optionsPropNames[0] + ']]']);\n            if (_bestFormat) {\n                return _bestFormat;\n            }\n        }\n    }\n\n    // 1. Let removalPenalty be 120.\n    var removalPenalty = 120;\n\n    // 2. Let additionPenalty be 20.\n    var additionPenalty = 20;\n\n    // 3. Let longLessPenalty be 8.\n    var longLessPenalty = 8;\n\n    // 4. Let longMorePenalty be 6.\n    var longMorePenalty = 6;\n\n    // 5. Let shortLessPenalty be 6.\n    var shortLessPenalty = 6;\n\n    // 6. Let shortMorePenalty be 3.\n    var shortMorePenalty = 3;\n\n    var patternPenalty = 2;\n\n    var hour12Penalty = 1;\n\n    // 7. Let bestScore be -Infinity.\n    var bestScore = -Infinity;\n\n    // 8. Let bestFormat be undefined.\n    var bestFormat = void 0;\n\n    // 9. Let i be 0.\n    var i = 0;\n\n    // 10. Assert: formats is an Array object.\n\n    // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n    var len = formats.length;\n\n    // 12. Repeat while i < len:\n    while (i < len) {\n        // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n        var format = formats[i];\n\n        // b. Let score be 0.\n        var score = 0;\n\n        // c. For each property shown in Table 3:\n        for (var _property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, _property)) continue;\n\n            // i. Let optionsProp be options.[[<property>]].\n            var optionsProp = options['[[' + _property + ']]'];\n\n            // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n            //     with argument property.\n            // iii. If formatPropDesc is not undefined, then\n            //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n            var formatProp = hop.call(format, _property) ? format[_property] : undefined;\n\n            // Diverging: using the default properties produced by the pattern/skeleton\n            // to match it with user options, and apply a penalty\n            var patternProp = hop.call(format._, _property) ? format._[_property] : undefined;\n            if (optionsProp !== patternProp) {\n                score -= patternPenalty;\n            }\n\n            // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n            //     additionPenalty.\n            if (optionsProp === undefined && formatProp !== undefined) score -= additionPenalty;\n\n            // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n            //    removalPenalty.\n            else if (optionsProp !== undefined && formatProp === undefined) score -= removalPenalty;\n\n                // vi. Else\n                else {\n                        // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n                        //    \"long\"].\n                        var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n\n                        // 2. Let optionsPropIndex be the index of optionsProp within values.\n                        var optionsPropIndex = arrIndexOf.call(values, optionsProp);\n\n                        // 3. Let formatPropIndex be the index of formatProp within values.\n                        var formatPropIndex = arrIndexOf.call(values, formatProp);\n\n                        // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n                        var delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);\n\n                        {\n                            // diverging from spec\n                            // When the bestFit argument is true, subtract additional penalty where data types are not the same\n                            if (formatPropIndex <= 1 && optionsPropIndex >= 2 || formatPropIndex >= 2 && optionsPropIndex <= 1) {\n                                // 5. If delta = 2, decrease score by longMorePenalty.\n                                if (delta > 0) score -= longMorePenalty;else if (delta < 0) score -= longLessPenalty;\n                            } else {\n                                // 5. If delta = 2, decrease score by longMorePenalty.\n                                if (delta > 1) score -= shortMorePenalty;else if (delta < -1) score -= shortLessPenalty;\n                            }\n                        }\n                    }\n        }\n\n        {\n            // diverging to also take into consideration differences between 12 or 24 hours\n            // which is special for the best fit only.\n            if (format._.hour12 !== options.hour12) {\n                score -= hour12Penalty;\n            }\n        }\n\n        // d. If score > bestScore, then\n        if (score > bestScore) {\n            // i. Let bestScore be score.\n            bestScore = score;\n            // ii. Let bestFormat be format.\n            bestFormat = format;\n        }\n\n        // e. Increase i by 1.\n        i++;\n    }\n\n    // 13. Return bestFormat.\n    return bestFormat;\n}\n\n/* 12.2.3 */internals.DateTimeFormat = {\n    '[[availableLocales]]': [],\n    '[[relevantExtensionKeys]]': ['ca', 'nu'],\n    '[[localeData]]': {}\n};\n\n/**\n * When the supportedLocalesOf method of Intl.DateTimeFormat is called, the\n * following steps are taken:\n */\n/* 12.2.2 */\ndefineProperty(Intl.DateTimeFormat, 'supportedLocalesOf', {\n    configurable: true,\n    writable: true,\n    value: fnBind.call(function (locales) {\n        // Bound functions only have the `this` value altered if being used as a constructor,\n        // this lets us imitate a native function that has no constructor\n        if (!hop.call(this, '[[availableLocales]]')) throw new TypeError('supportedLocalesOf() is not a constructor');\n\n        // Create an object whose props can be used to restore the values of RegExp props\n        var regexpRestore = createRegExpRestore(),\n\n\n        // 1. If options is not provided, then let options be undefined.\n        options = arguments[1],\n\n\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n        //    property of the standard built-in object that is the initial value of\n        //    Intl.NumberFormat.\n\n        availableLocales = this['[[availableLocales]]'],\n\n\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n        //    abstract operation (defined in 9.2.1) with argument locales.\n        requestedLocales = CanonicalizeLocaleList(locales);\n\n        // Restore the RegExp properties\n        regexpRestore();\n\n        // 4. Return the result of calling the SupportedLocales abstract operation\n        //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n        //    and options.\n        return SupportedLocales(availableLocales, requestedLocales, options);\n    }, internals.NumberFormat)\n});\n\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * DateTimeFormat object.\n */\n/* 12.3.2 */defineProperty(Intl.DateTimeFormat.prototype, 'format', {\n    configurable: true,\n    get: GetFormatDateTime\n});\n\nfunction GetFormatDateTime() {\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n    // Satisfy test 12.3_b\n    if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for format() is not an initialized Intl.DateTimeFormat object.');\n\n    // The value of the [[Get]] attribute is a function that takes the following\n    // steps:\n\n    // 1. If the [[boundFormat]] internal property of this DateTimeFormat object\n    //    is undefined, then:\n    if (internal['[[boundFormat]]'] === undefined) {\n        // a. Let F be a Function object, with internal properties set as\n        //    specified for built-in functions in ES5, 15, or successor, and the\n        //    length property set to 0, that takes the argument date and\n        //    performs the following steps:\n        var F = function F() {\n            var date = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n            //   i. If date is not provided or is undefined, then let x be the\n            //      result as if by the expression Date.now() where Date.now is\n            //      the standard built-in function defined in ES5, 15.9.4.4.\n            //  ii. Else let x be ToNumber(date).\n            // iii. Return the result of calling the FormatDateTime abstract\n            //      operation (defined below) with arguments this and x.\n            var x = date === undefined ? Date.now() : toNumber(date);\n            return FormatDateTime(this, x);\n        };\n        // b. Let bind be the standard built-in function object defined in ES5,\n        //    15.3.4.5.\n        // c. Let bf be the result of calling the [[Call]] internal method of\n        //    bind with F as the this value and an argument list containing\n        //    the single item this.\n        var bf = fnBind.call(F, this);\n        // d. Set the [[boundFormat]] internal property of this NumberFormat\n        //    object to bf.\n        internal['[[boundFormat]]'] = bf;\n    }\n    // Return the value of the [[boundFormat]] internal property of this\n    // NumberFormat object.\n    return internal['[[boundFormat]]'];\n}\n\nfunction formatToParts$1() {\n    var date = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n    if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for formatToParts() is not an initialized Intl.DateTimeFormat object.');\n\n    var x = date === undefined ? Date.now() : toNumber(date);\n    return FormatToPartsDateTime(this, x);\n}\n\nObject.defineProperty(Intl.DateTimeFormat.prototype, 'formatToParts', {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: formatToParts$1\n});\n\nfunction CreateDateTimeParts(dateTimeFormat, x) {\n    // 1. If x is not a finite Number, then throw a RangeError exception.\n    if (!isFinite(x)) throw new RangeError('Invalid valid date passed to format');\n\n    var internal = dateTimeFormat.__getInternalProperties(secret);\n\n    // Creating restore point for properties on the RegExp object... please wait\n    /* let regexpRestore = */createRegExpRestore(); // ###TODO: review this\n\n    // 2. Let locale be the value of the [[locale]] internal property of dateTimeFormat.\n    var locale = internal['[[locale]]'];\n\n    // 3. Let nf be the result of creating a new NumberFormat object as if by the\n    // expression new Intl.NumberFormat([locale], {useGrouping: false}) where\n    // Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n    var nf = new Intl.NumberFormat([locale], { useGrouping: false });\n\n    // 4. Let nf2 be the result of creating a new NumberFormat object as if by the\n    // expression new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping:\n    // false}) where Intl.NumberFormat is the standard built-in constructor defined in\n    // 11.1.3.\n    var nf2 = new Intl.NumberFormat([locale], { minimumIntegerDigits: 2, useGrouping: false });\n\n    // 5. Let tm be the result of calling the ToLocalTime abstract operation (defined\n    // below) with x, the value of the [[calendar]] internal property of dateTimeFormat,\n    // and the value of the [[timeZone]] internal property of dateTimeFormat.\n    var tm = ToLocalTime(x, internal['[[calendar]]'], internal['[[timeZone]]']);\n\n    // 6. Let result be the value of the [[pattern]] internal property of dateTimeFormat.\n    var pattern = internal['[[pattern]]'];\n\n    // 7.\n    var result = new List();\n\n    // 8.\n    var index = 0;\n\n    // 9.\n    var beginIndex = pattern.indexOf('{');\n\n    // 10.\n    var endIndex = 0;\n\n    // Need the locale minus any extensions\n    var dataLocale = internal['[[dataLocale]]'];\n\n    // Need the calendar data from CLDR\n    var localeData = internals.DateTimeFormat['[[localeData]]'][dataLocale].calendars;\n    var ca = internal['[[calendar]]'];\n\n    // 11.\n    while (beginIndex !== -1) {\n        var fv = void 0;\n        // a.\n        endIndex = pattern.indexOf('}', beginIndex);\n        // b.\n        if (endIndex === -1) {\n            throw new Error('Unclosed pattern');\n        }\n        // c.\n        if (beginIndex > index) {\n            arrPush.call(result, {\n                type: 'literal',\n                value: pattern.substring(index, beginIndex)\n            });\n        }\n        // d.\n        var p = pattern.substring(beginIndex + 1, endIndex);\n        // e.\n        if (dateTimeComponents.hasOwnProperty(p)) {\n            //   i. Let f be the value of the [[<p>]] internal property of dateTimeFormat.\n            var f = internal['[[' + p + ']]'];\n            //  ii. Let v be the value of tm.[[<p>]].\n            var v = tm['[[' + p + ']]'];\n            // iii. If p is \"year\" and v ≤ 0, then let v be 1 - v.\n            if (p === 'year' && v <= 0) {\n                v = 1 - v;\n            }\n            //  iv. If p is \"month\", then increase v by 1.\n            else if (p === 'month') {\n                    v++;\n                }\n                //   v. If p is \"hour\" and the value of the [[hour12]] internal property of\n                //      dateTimeFormat is true, then\n                else if (p === 'hour' && internal['[[hour12]]'] === true) {\n                        // 1. Let v be v modulo 12.\n                        v = v % 12;\n                        // 2. If v is 0 and the value of the [[hourNo0]] internal property of\n                        //    dateTimeFormat is true, then let v be 12.\n                        if (v === 0 && internal['[[hourNo0]]'] === true) {\n                            v = 12;\n                        }\n                    }\n\n            //  vi. If f is \"numeric\", then\n            if (f === 'numeric') {\n                // 1. Let fv be the result of calling the FormatNumber abstract operation\n                //    (defined in 11.3.2) with arguments nf and v.\n                fv = FormatNumber(nf, v);\n            }\n            // vii. Else if f is \"2-digit\", then\n            else if (f === '2-digit') {\n                    // 1. Let fv be the result of calling the FormatNumber abstract operation\n                    //    with arguments nf2 and v.\n                    fv = FormatNumber(nf2, v);\n                    // 2. If the length of fv is greater than 2, let fv be the substring of fv\n                    //    containing the last two characters.\n                    if (fv.length > 2) {\n                        fv = fv.slice(-2);\n                    }\n                }\n                // viii. Else if f is \"narrow\", \"short\", or \"long\", then let fv be a String\n                //     value representing f in the desired form; the String value depends upon\n                //     the implementation and the effective locale and calendar of\n                //     dateTimeFormat. If p is \"month\", then the String value may also depend\n                //     on whether dateTimeFormat has a [[day]] internal property. If p is\n                //     \"timeZoneName\", then the String value may also depend on the value of\n                //     the [[inDST]] field of tm.\n                else if (f in dateWidths) {\n                        switch (p) {\n                            case 'month':\n                                fv = resolveDateString(localeData, ca, 'months', f, tm['[[' + p + ']]']);\n                                break;\n\n                            case 'weekday':\n                                try {\n                                    fv = resolveDateString(localeData, ca, 'days', f, tm['[[' + p + ']]']);\n                                    // fv = resolveDateString(ca.days, f)[tm['[['+ p +']]']];\n                                } catch (e) {\n                                    throw new Error('Could not find weekday data for locale ' + locale);\n                                }\n                                break;\n\n                            case 'timeZoneName':\n                                fv = ''; // ###TODO\n                                break;\n\n                            case 'era':\n                                try {\n                                    fv = resolveDateString(localeData, ca, 'eras', f, tm['[[' + p + ']]']);\n                                } catch (e) {\n                                    throw new Error('Could not find era data for locale ' + locale);\n                                }\n                                break;\n\n                            default:\n                                fv = tm['[[' + p + ']]'];\n                        }\n                    }\n            // ix\n            arrPush.call(result, {\n                type: p,\n                value: fv\n            });\n            // f.\n        } else if (p === 'ampm') {\n            // i.\n            var _v = tm['[[hour]]'];\n            // ii./iii.\n            fv = resolveDateString(localeData, ca, 'dayPeriods', _v > 11 ? 'pm' : 'am', null);\n            // iv.\n            arrPush.call(result, {\n                type: 'dayPeriod',\n                value: fv\n            });\n            // g.\n        } else {\n            arrPush.call(result, {\n                type: 'literal',\n                value: pattern.substring(beginIndex, endIndex + 1)\n            });\n        }\n        // h.\n        index = endIndex + 1;\n        // i.\n        beginIndex = pattern.indexOf('{', index);\n    }\n    // 12.\n    if (endIndex < pattern.length - 1) {\n        arrPush.call(result, {\n            type: 'literal',\n            value: pattern.substr(endIndex + 1)\n        });\n    }\n    // 13.\n    return result;\n}\n\n/**\n * When the FormatDateTime abstract operation is called with arguments dateTimeFormat\n * (which must be an object initialized as a DateTimeFormat) and x (which must be a Number\n * value), it returns a String value representing x (interpreted as a time value as\n * specified in ES5, 15.9.1.1) according to the effective locale and the formatting\n * options of dateTimeFormat.\n */\nfunction FormatDateTime(dateTimeFormat, x) {\n    var parts = CreateDateTimeParts(dateTimeFormat, x);\n    var result = '';\n\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        result += part.value;\n    }\n    return result;\n}\n\nfunction FormatToPartsDateTime(dateTimeFormat, x) {\n    var parts = CreateDateTimeParts(dateTimeFormat, x);\n    var result = [];\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        result.push({\n            type: part.type,\n            value: part.value\n        });\n    }\n    return result;\n}\n\n/**\n * When the ToLocalTime abstract operation is called with arguments date, calendar, and\n * timeZone, the following steps are taken:\n */\nfunction ToLocalTime(date, calendar, timeZone) {\n    // 1. Apply calendrical calculations on date for the given calendar and time zone to\n    //    produce weekday, era, year, month, day, hour, minute, second, and inDST values.\n    //    The calculations should use best available information about the specified\n    //    calendar and time zone. If the calendar is \"gregory\", then the calculations must\n    //    match the algorithms specified in ES5, 15.9.1, except that calculations are not\n    //    bound by the restrictions on the use of best available information on time zones\n    //    for local time zone adjustment and daylight saving time adjustment imposed by\n    //    ES5, 15.9.1.7 and 15.9.1.8.\n    // ###TODO###\n    var d = new Date(date),\n        m = 'get' + (timeZone || '');\n\n    // 2. Return a Record with fields [[weekday]], [[era]], [[year]], [[month]], [[day]],\n    //    [[hour]], [[minute]], [[second]], and [[inDST]], each with the corresponding\n    //    calculated value.\n    return new Record({\n        '[[weekday]]': d[m + 'Day'](),\n        '[[era]]': +(d[m + 'FullYear']() >= 0),\n        '[[year]]': d[m + 'FullYear'](),\n        '[[month]]': d[m + 'Month'](),\n        '[[day]]': d[m + 'Date'](),\n        '[[hour]]': d[m + 'Hours'](),\n        '[[minute]]': d[m + 'Minutes'](),\n        '[[second]]': d[m + 'Seconds'](),\n        '[[inDST]]': false // ###TODO###\n    });\n}\n\n/**\n * The function returns a new object whose properties and attributes are set as if\n * constructed by an object literal assigning to each of the following properties the\n * value of the corresponding internal property of this DateTimeFormat object (see 12.4):\n * locale, calendar, numberingSystem, timeZone, hour12, weekday, era, year, month, day,\n * hour, minute, second, and timeZoneName. Properties whose corresponding internal\n * properties are not present are not assigned.\n */\n/* 12.3.3 */defineProperty(Intl.DateTimeFormat.prototype, 'resolvedOptions', {\n    writable: true,\n    configurable: true,\n    value: function value() {\n        var prop = void 0,\n            descs = new Record(),\n            props = ['locale', 'calendar', 'numberingSystem', 'timeZone', 'hour12', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'],\n            internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n        // Satisfy test 12.3_b\n        if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.DateTimeFormat object.');\n\n        for (var i = 0, max = props.length; i < max; i++) {\n            if (hop.call(internal, prop = '[[' + props[i] + ']]')) descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };\n        }\n\n        return objCreate({}, descs);\n    }\n});\n\nvar ls = Intl.__localeSensitiveProtos = {\n    Number: {},\n    Date: {}\n};\n\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n/* 13.2.1 */ls.Number.toLocaleString = function () {\n    // Satisfy test 13.2.1_1\n    if (Object.prototype.toString.call(this) !== '[object Number]') throw new TypeError('`this` value must be a number for Number.prototype.toLocaleString()');\n\n    // 1. Let x be this Number value (as defined in ES5, 15.7.4).\n    // 2. If locales is not provided, then let locales be undefined.\n    // 3. If options is not provided, then let options be undefined.\n    // 4. Let numberFormat be the result of creating a new object as if by the\n    //    expression new Intl.NumberFormat(locales, options) where\n    //    Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n    // 5. Return the result of calling the FormatNumber abstract operation\n    //    (defined in 11.3.2) with arguments numberFormat and x.\n    return FormatNumber(new NumberFormatConstructor(arguments[0], arguments[1]), this);\n};\n\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n/* 13.3.1 */ls.Date.toLocaleString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    var x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x)) return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    var locales = arguments[0];\n\n    // 4. If options is not provided, then let options be undefined.\n    var options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"any\", and \"all\".\n    options = ToDateTimeOptions(options, 'any', 'all');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    var dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\n/**\n * When the toLocaleDateString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n/* 13.3.2 */ls.Date.toLocaleDateString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleDateString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    var x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x)) return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    var locales = arguments[0],\n\n\n    // 4. If options is not provided, then let options be undefined.\n    options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"date\", and \"date\".\n    options = ToDateTimeOptions(options, 'date', 'date');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    var dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\n/**\n * When the toLocaleTimeString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n/* 13.3.3 */ls.Date.toLocaleTimeString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleTimeString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    var x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x)) return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    var locales = arguments[0];\n\n    // 4. If options is not provided, then let options be undefined.\n    var options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"time\", and \"time\".\n    options = ToDateTimeOptions(options, 'time', 'time');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    var dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\ndefineProperty(Intl, '__applyLocaleSensitivePrototypes', {\n    writable: true,\n    configurable: true,\n    value: function value() {\n        defineProperty(Number.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Number.toLocaleString });\n        // Need this here for IE 8, to avoid the _DontEnum_ bug\n        defineProperty(Date.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Date.toLocaleString });\n\n        for (var k in ls.Date) {\n            if (hop.call(ls.Date, k)) defineProperty(Date.prototype, k, { writable: true, configurable: true, value: ls.Date[k] });\n        }\n    }\n});\n\n/**\n * Can't really ship a single script with data for hundreds of locales, so we provide\n * this __addLocaleData method as a means for the developer to add the data on an\n * as-needed basis\n */\ndefineProperty(Intl, '__addLocaleData', {\n    value: function value(data) {\n        if (!IsStructurallyValidLanguageTag(data.locale)) throw new Error(\"Object passed doesn't identify itself with a valid language tag\");\n\n        addLocaleData(data, data.locale);\n    }\n});\n\nfunction addLocaleData(data, tag) {\n    // Both NumberFormat and DateTimeFormat require number data, so throw if it isn't present\n    if (!data.number) throw new Error(\"Object passed doesn't contain locale data for Intl.NumberFormat\");\n\n    var locale = void 0,\n        locales = [tag],\n        parts = tag.split('-');\n\n    // Create fallbacks for locale data with scripts, e.g. Latn, Hans, Vaii, etc\n    if (parts.length > 2 && parts[1].length === 4) arrPush.call(locales, parts[0] + '-' + parts[2]);\n\n    while (locale = arrShift.call(locales)) {\n        // Add to NumberFormat internal properties as per 11.2.3\n        arrPush.call(internals.NumberFormat['[[availableLocales]]'], locale);\n        internals.NumberFormat['[[localeData]]'][locale] = data.number;\n\n        // ...and DateTimeFormat internal properties as per 12.2.3\n        if (data.date) {\n            data.date.nu = data.number.nu;\n            arrPush.call(internals.DateTimeFormat['[[availableLocales]]'], locale);\n            internals.DateTimeFormat['[[localeData]]'][locale] = data.date;\n        }\n    }\n\n    // If this is the first set of locale data added, make it the default\n    if (defaultLocale === undefined) setDefaultLocale(tag);\n}\n\ndefineProperty(Intl, '__disableRegExpRestore', {\n    value: function value() {\n        internals.disableRegExpRestore = true;\n    }\n});\n\nmodule.exports = Intl;","IntlPolyfill.__addLocaleData({locale:\"en-US\",date:{ca:[\"gregory\",\"buddhist\",\"chinese\",\"coptic\",\"dangi\",\"ethioaa\",\"ethiopic\",\"generic\",\"hebrew\",\"indian\",\"islamic\",\"islamicc\",\"japanese\",\"persian\",\"roc\"],hourNo0:true,hour12:true,formats:{short:\"{1}, {0}\",medium:\"{1}, {0}\",full:\"{1} 'at' {0}\",long:\"{1} 'at' {0}\",availableFormats:{\"d\":\"d\",\"E\":\"ccc\",Ed:\"d E\",Ehm:\"E h:mm a\",EHm:\"E HH:mm\",Ehms:\"E h:mm:ss a\",EHms:\"E HH:mm:ss\",Gy:\"y G\",GyMMM:\"MMM y G\",GyMMMd:\"MMM d, y G\",GyMMMEd:\"E, MMM d, y G\",\"h\":\"h a\",\"H\":\"HH\",hm:\"h:mm a\",Hm:\"HH:mm\",hms:\"h:mm:ss a\",Hms:\"HH:mm:ss\",hmsv:\"h:mm:ss a v\",Hmsv:\"HH:mm:ss v\",hmv:\"h:mm a v\",Hmv:\"HH:mm v\",\"M\":\"L\",Md:\"M/d\",MEd:\"E, M/d\",MMM:\"LLL\",MMMd:\"MMM d\",MMMEd:\"E, MMM d\",MMMMd:\"MMMM d\",ms:\"mm:ss\",\"y\":\"y\",yM:\"M/y\",yMd:\"M/d/y\",yMEd:\"E, M/d/y\",yMMM:\"MMM y\",yMMMd:\"MMM d, y\",yMMMEd:\"E, MMM d, y\",yMMMM:\"MMMM y\",yQQQ:\"QQQ y\",yQQQQ:\"QQQQ y\"},dateFormats:{yMMMMEEEEd:\"EEEE, MMMM d, y\",yMMMMd:\"MMMM d, y\",yMMMd:\"MMM d, y\",yMd:\"M/d/yy\"},timeFormats:{hmmsszzzz:\"h:mm:ss a zzzz\",hmsz:\"h:mm:ss a z\",hms:\"h:mm:ss a\",hm:\"h:mm a\"}},calendars:{buddhist:{months:{narrow:[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],long:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"BE\"],short:[\"BE\"],long:[\"BE\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},chinese:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Mo1\",\"Mo2\",\"Mo3\",\"Mo4\",\"Mo5\",\"Mo6\",\"Mo7\",\"Mo8\",\"Mo9\",\"Mo10\",\"Mo11\",\"Mo12\"],long:[\"Month1\",\"Month2\",\"Month3\",\"Month4\",\"Month5\",\"Month6\",\"Month7\",\"Month8\",\"Month9\",\"Month10\",\"Month11\",\"Month12\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},coptic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"],short:[\"Tout\",\"Baba\",\"Hator\",\"Kiahk\",\"Toba\",\"Amshir\",\"Baramhat\",\"Baramouda\",\"Bashans\",\"Paona\",\"Epep\",\"Mesra\",\"Nasie\"],long:[\"Tout\",\"Baba\",\"Hator\",\"Kiahk\",\"Toba\",\"Amshir\",\"Baramhat\",\"Baramouda\",\"Bashans\",\"Paona\",\"Epep\",\"Mesra\",\"Nasie\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"ERA0\",\"ERA1\"],short:[\"ERA0\",\"ERA1\"],long:[\"ERA0\",\"ERA1\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},dangi:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Mo1\",\"Mo2\",\"Mo3\",\"Mo4\",\"Mo5\",\"Mo6\",\"Mo7\",\"Mo8\",\"Mo9\",\"Mo10\",\"Mo11\",\"Mo12\"],long:[\"Month1\",\"Month2\",\"Month3\",\"Month4\",\"Month5\",\"Month6\",\"Month7\",\"Month8\",\"Month9\",\"Month10\",\"Month11\",\"Month12\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},ethiopic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"],short:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"],long:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"ERA0\",\"ERA1\"],short:[\"ERA0\",\"ERA1\"],long:[\"ERA0\",\"ERA1\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},ethioaa:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"],short:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"],long:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"ERA0\"],short:[\"ERA0\"],long:[\"ERA0\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},generic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"],long:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"ERA0\",\"ERA1\"],short:[\"ERA0\",\"ERA1\"],long:[\"ERA0\",\"ERA1\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},gregory:{months:{narrow:[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],long:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"B\",\"A\",\"BCE\",\"CE\"],short:[\"BC\",\"AD\",\"BCE\",\"CE\"],long:[\"Before Christ\",\"Anno Domini\",\"Before Common Era\",\"Common Era\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},hebrew:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"7\"],short:[\"Tishri\",\"Heshvan\",\"Kislev\",\"Tevet\",\"Shevat\",\"Adar I\",\"Adar\",\"Nisan\",\"Iyar\",\"Sivan\",\"Tamuz\",\"Av\",\"Elul\",\"Adar II\"],long:[\"Tishri\",\"Heshvan\",\"Kislev\",\"Tevet\",\"Shevat\",\"Adar I\",\"Adar\",\"Nisan\",\"Iyar\",\"Sivan\",\"Tamuz\",\"Av\",\"Elul\",\"Adar II\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"AM\"],short:[\"AM\"],long:[\"AM\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},indian:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Chaitra\",\"Vaisakha\",\"Jyaistha\",\"Asadha\",\"Sravana\",\"Bhadra\",\"Asvina\",\"Kartika\",\"Agrahayana\",\"Pausa\",\"Magha\",\"Phalguna\"],long:[\"Chaitra\",\"Vaisakha\",\"Jyaistha\",\"Asadha\",\"Sravana\",\"Bhadra\",\"Asvina\",\"Kartika\",\"Agrahayana\",\"Pausa\",\"Magha\",\"Phalguna\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"Saka\"],short:[\"Saka\"],long:[\"Saka\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},islamic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Muh.\",\"Saf.\",\"Rab. I\",\"Rab. II\",\"Jum. I\",\"Jum. II\",\"Raj.\",\"Sha.\",\"Ram.\",\"Shaw.\",\"Dhuʻl-Q.\",\"Dhuʻl-H.\"],long:[\"Muharram\",\"Safar\",\"Rabiʻ I\",\"Rabiʻ II\",\"Jumada I\",\"Jumada II\",\"Rajab\",\"Shaʻban\",\"Ramadan\",\"Shawwal\",\"Dhuʻl-Qiʻdah\",\"Dhuʻl-Hijjah\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"AH\"],short:[\"AH\"],long:[\"AH\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},islamicc:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Muh.\",\"Saf.\",\"Rab. I\",\"Rab. II\",\"Jum. I\",\"Jum. II\",\"Raj.\",\"Sha.\",\"Ram.\",\"Shaw.\",\"Dhuʻl-Q.\",\"Dhuʻl-H.\"],long:[\"Muharram\",\"Safar\",\"Rabiʻ I\",\"Rabiʻ II\",\"Jumada I\",\"Jumada II\",\"Rajab\",\"Shaʻban\",\"Ramadan\",\"Shawwal\",\"Dhuʻl-Qiʻdah\",\"Dhuʻl-Hijjah\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"AH\"],short:[\"AH\"],long:[\"AH\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},japanese:{months:{narrow:[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],long:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"Taika (645–650)\",\"Hakuchi (650–671)\",\"Hakuhō (672–686)\",\"Shuchō (686–701)\",\"Taihō (701–704)\",\"Keiun (704–708)\",\"Wadō (708–715)\",\"Reiki (715–717)\",\"Yōrō (717–724)\",\"Jinki (724–729)\",\"Tenpyō (729–749)\",\"Tenpyō-kampō (749-749)\",\"Tenpyō-shōhō (749-757)\",\"Tenpyō-hōji (757-765)\",\"Tenpyō-jingo (765-767)\",\"Jingo-keiun (767-770)\",\"Hōki (770–780)\",\"Ten-ō (781-782)\",\"Enryaku (782–806)\",\"Daidō (806–810)\",\"Kōnin (810–824)\",\"Tenchō (824–834)\",\"Jōwa (834–848)\",\"Kajō (848–851)\",\"Ninju (851–854)\",\"Saikō (854–857)\",\"Ten-an (857-859)\",\"Jōgan (859–877)\",\"Gangyō (877–885)\",\"Ninna (885–889)\",\"Kanpyō (889–898)\",\"Shōtai (898–901)\",\"Engi (901–923)\",\"Enchō (923–931)\",\"Jōhei (931–938)\",\"Tengyō (938–947)\",\"Tenryaku (947–957)\",\"Tentoku (957–961)\",\"Ōwa (961–964)\",\"Kōhō (964–968)\",\"Anna (968–970)\",\"Tenroku (970–973)\",\"Ten’en (973–976)\",\"Jōgen (976–978)\",\"Tengen (978–983)\",\"Eikan (983–985)\",\"Kanna (985–987)\",\"Eien (987–989)\",\"Eiso (989–990)\",\"Shōryaku (990–995)\",\"Chōtoku (995–999)\",\"Chōhō (999–1004)\",\"Kankō (1004–1012)\",\"Chōwa (1012–1017)\",\"Kannin (1017–1021)\",\"Jian (1021–1024)\",\"Manju (1024–1028)\",\"Chōgen (1028–1037)\",\"Chōryaku (1037–1040)\",\"Chōkyū (1040–1044)\",\"Kantoku (1044–1046)\",\"Eishō (1046–1053)\",\"Tengi (1053–1058)\",\"Kōhei (1058–1065)\",\"Jiryaku (1065–1069)\",\"Enkyū (1069–1074)\",\"Shōho (1074–1077)\",\"Shōryaku (1077–1081)\",\"Eihō (1081–1084)\",\"Ōtoku (1084–1087)\",\"Kanji (1087–1094)\",\"Kahō (1094–1096)\",\"Eichō (1096–1097)\",\"Jōtoku (1097–1099)\",\"Kōwa (1099–1104)\",\"Chōji (1104–1106)\",\"Kashō (1106–1108)\",\"Tennin (1108–1110)\",\"Ten-ei (1110-1113)\",\"Eikyū (1113–1118)\",\"Gen’ei (1118–1120)\",\"Hōan (1120–1124)\",\"Tenji (1124–1126)\",\"Daiji (1126–1131)\",\"Tenshō (1131–1132)\",\"Chōshō (1132–1135)\",\"Hōen (1135–1141)\",\"Eiji (1141–1142)\",\"Kōji (1142–1144)\",\"Ten’yō (1144–1145)\",\"Kyūan (1145–1151)\",\"Ninpei (1151–1154)\",\"Kyūju (1154–1156)\",\"Hōgen (1156–1159)\",\"Heiji (1159–1160)\",\"Eiryaku (1160–1161)\",\"Ōho (1161–1163)\",\"Chōkan (1163–1165)\",\"Eiman (1165–1166)\",\"Nin’an (1166–1169)\",\"Kaō (1169–1171)\",\"Shōan (1171–1175)\",\"Angen (1175–1177)\",\"Jishō (1177–1181)\",\"Yōwa (1181–1182)\",\"Juei (1182–1184)\",\"Genryaku (1184–1185)\",\"Bunji (1185–1190)\",\"Kenkyū (1190–1199)\",\"Shōji (1199–1201)\",\"Kennin (1201–1204)\",\"Genkyū (1204–1206)\",\"Ken’ei (1206–1207)\",\"Jōgen (1207–1211)\",\"Kenryaku (1211–1213)\",\"Kenpō (1213–1219)\",\"Jōkyū (1219–1222)\",\"Jōō (1222–1224)\",\"Gennin (1224–1225)\",\"Karoku (1225–1227)\",\"Antei (1227–1229)\",\"Kanki (1229–1232)\",\"Jōei (1232–1233)\",\"Tenpuku (1233–1234)\",\"Bunryaku (1234–1235)\",\"Katei (1235–1238)\",\"Ryakunin (1238–1239)\",\"En’ō (1239–1240)\",\"Ninji (1240–1243)\",\"Kangen (1243–1247)\",\"Hōji (1247–1249)\",\"Kenchō (1249–1256)\",\"Kōgen (1256–1257)\",\"Shōka (1257–1259)\",\"Shōgen (1259–1260)\",\"Bun’ō (1260–1261)\",\"Kōchō (1261–1264)\",\"Bun’ei (1264–1275)\",\"Kenji (1275–1278)\",\"Kōan (1278–1288)\",\"Shōō (1288–1293)\",\"Einin (1293–1299)\",\"Shōan (1299–1302)\",\"Kengen (1302–1303)\",\"Kagen (1303–1306)\",\"Tokuji (1306–1308)\",\"Enkyō (1308–1311)\",\"Ōchō (1311–1312)\",\"Shōwa (1312–1317)\",\"Bunpō (1317–1319)\",\"Genō (1319–1321)\",\"Genkō (1321–1324)\",\"Shōchū (1324–1326)\",\"Karyaku (1326–1329)\",\"Gentoku (1329–1331)\",\"Genkō (1331–1334)\",\"Kenmu (1334–1336)\",\"Engen (1336–1340)\",\"Kōkoku (1340–1346)\",\"Shōhei (1346–1370)\",\"Kentoku (1370–1372)\",\"Bunchū (1372–1375)\",\"Tenju (1375–1379)\",\"Kōryaku (1379–1381)\",\"Kōwa (1381–1384)\",\"Genchū (1384–1392)\",\"Meitoku (1384–1387)\",\"Kakei (1387–1389)\",\"Kōō (1389–1390)\",\"Meitoku (1390–1394)\",\"Ōei (1394–1428)\",\"Shōchō (1428–1429)\",\"Eikyō (1429–1441)\",\"Kakitsu (1441–1444)\",\"Bun’an (1444–1449)\",\"Hōtoku (1449–1452)\",\"Kyōtoku (1452–1455)\",\"Kōshō (1455–1457)\",\"Chōroku (1457–1460)\",\"Kanshō (1460–1466)\",\"Bunshō (1466–1467)\",\"Ōnin (1467–1469)\",\"Bunmei (1469–1487)\",\"Chōkyō (1487–1489)\",\"Entoku (1489–1492)\",\"Meiō (1492–1501)\",\"Bunki (1501–1504)\",\"Eishō (1504–1521)\",\"Taiei (1521–1528)\",\"Kyōroku (1528–1532)\",\"Tenbun (1532–1555)\",\"Kōji (1555–1558)\",\"Eiroku (1558–1570)\",\"Genki (1570–1573)\",\"Tenshō (1573–1592)\",\"Bunroku (1592–1596)\",\"Keichō (1596–1615)\",\"Genna (1615–1624)\",\"Kan’ei (1624–1644)\",\"Shōho (1644–1648)\",\"Keian (1648–1652)\",\"Jōō (1652–1655)\",\"Meireki (1655–1658)\",\"Manji (1658–1661)\",\"Kanbun (1661–1673)\",\"Enpō (1673–1681)\",\"Tenna (1681–1684)\",\"Jōkyō (1684–1688)\",\"Genroku (1688–1704)\",\"Hōei (1704–1711)\",\"Shōtoku (1711–1716)\",\"Kyōhō (1716–1736)\",\"Genbun (1736–1741)\",\"Kanpō (1741–1744)\",\"Enkyō (1744–1748)\",\"Kan’en (1748–1751)\",\"Hōreki (1751–1764)\",\"Meiwa (1764–1772)\",\"An’ei (1772–1781)\",\"Tenmei (1781–1789)\",\"Kansei (1789–1801)\",\"Kyōwa (1801–1804)\",\"Bunka (1804–1818)\",\"Bunsei (1818–1830)\",\"Tenpō (1830–1844)\",\"Kōka (1844–1848)\",\"Kaei (1848–1854)\",\"Ansei (1854–1860)\",\"Man’en (1860–1861)\",\"Bunkyū (1861–1864)\",\"Genji (1864–1865)\",\"Keiō (1865–1868)\",\"M\",\"T\",\"S\",\"H\"],short:[\"Taika (645–650)\",\"Hakuchi (650–671)\",\"Hakuhō (672–686)\",\"Shuchō (686–701)\",\"Taihō (701–704)\",\"Keiun (704–708)\",\"Wadō (708–715)\",\"Reiki (715–717)\",\"Yōrō (717–724)\",\"Jinki (724–729)\",\"Tenpyō (729–749)\",\"Tenpyō-kampō (749-749)\",\"Tenpyō-shōhō (749-757)\",\"Tenpyō-hōji (757-765)\",\"Tenpyō-jingo (765-767)\",\"Jingo-keiun (767-770)\",\"Hōki (770–780)\",\"Ten-ō (781-782)\",\"Enryaku (782–806)\",\"Daidō (806–810)\",\"Kōnin (810–824)\",\"Tenchō (824–834)\",\"Jōwa (834–848)\",\"Kajō (848–851)\",\"Ninju (851–854)\",\"Saikō (854–857)\",\"Ten-an (857-859)\",\"Jōgan (859–877)\",\"Gangyō (877–885)\",\"Ninna (885–889)\",\"Kanpyō (889–898)\",\"Shōtai (898–901)\",\"Engi (901–923)\",\"Enchō (923–931)\",\"Jōhei (931–938)\",\"Tengyō (938–947)\",\"Tenryaku (947–957)\",\"Tentoku (957–961)\",\"Ōwa (961–964)\",\"Kōhō (964–968)\",\"Anna (968–970)\",\"Tenroku (970–973)\",\"Ten’en (973–976)\",\"Jōgen (976–978)\",\"Tengen (978–983)\",\"Eikan (983–985)\",\"Kanna (985–987)\",\"Eien (987–989)\",\"Eiso (989–990)\",\"Shōryaku (990–995)\",\"Chōtoku (995–999)\",\"Chōhō (999–1004)\",\"Kankō (1004–1012)\",\"Chōwa (1012–1017)\",\"Kannin (1017–1021)\",\"Jian (1021–1024)\",\"Manju (1024–1028)\",\"Chōgen (1028–1037)\",\"Chōryaku (1037–1040)\",\"Chōkyū (1040–1044)\",\"Kantoku (1044–1046)\",\"Eishō (1046–1053)\",\"Tengi (1053–1058)\",\"Kōhei (1058–1065)\",\"Jiryaku (1065–1069)\",\"Enkyū (1069–1074)\",\"Shōho (1074–1077)\",\"Shōryaku (1077–1081)\",\"Eihō (1081–1084)\",\"Ōtoku (1084–1087)\",\"Kanji (1087–1094)\",\"Kahō (1094–1096)\",\"Eichō (1096–1097)\",\"Jōtoku (1097–1099)\",\"Kōwa (1099–1104)\",\"Chōji (1104–1106)\",\"Kashō (1106–1108)\",\"Tennin (1108–1110)\",\"Ten-ei (1110-1113)\",\"Eikyū (1113–1118)\",\"Gen’ei (1118–1120)\",\"Hōan (1120–1124)\",\"Tenji (1124–1126)\",\"Daiji (1126–1131)\",\"Tenshō (1131–1132)\",\"Chōshō (1132–1135)\",\"Hōen (1135–1141)\",\"Eiji (1141–1142)\",\"Kōji (1142–1144)\",\"Ten’yō (1144–1145)\",\"Kyūan (1145–1151)\",\"Ninpei (1151–1154)\",\"Kyūju (1154–1156)\",\"Hōgen (1156–1159)\",\"Heiji (1159–1160)\",\"Eiryaku (1160–1161)\",\"Ōho (1161–1163)\",\"Chōkan (1163–1165)\",\"Eiman (1165–1166)\",\"Nin’an (1166–1169)\",\"Kaō (1169–1171)\",\"Shōan (1171–1175)\",\"Angen (1175–1177)\",\"Jishō (1177–1181)\",\"Yōwa (1181–1182)\",\"Juei (1182–1184)\",\"Genryaku (1184–1185)\",\"Bunji (1185–1190)\",\"Kenkyū (1190–1199)\",\"Shōji (1199–1201)\",\"Kennin (1201–1204)\",\"Genkyū (1204–1206)\",\"Ken’ei (1206–1207)\",\"Jōgen (1207–1211)\",\"Kenryaku (1211–1213)\",\"Kenpō (1213–1219)\",\"Jōkyū (1219–1222)\",\"Jōō (1222–1224)\",\"Gennin (1224–1225)\",\"Karoku (1225–1227)\",\"Antei (1227–1229)\",\"Kanki (1229–1232)\",\"Jōei (1232–1233)\",\"Tenpuku (1233–1234)\",\"Bunryaku (1234–1235)\",\"Katei (1235–1238)\",\"Ryakunin (1238–1239)\",\"En’ō (1239–1240)\",\"Ninji (1240–1243)\",\"Kangen (1243–1247)\",\"Hōji (1247–1249)\",\"Kenchō (1249–1256)\",\"Kōgen (1256–1257)\",\"Shōka (1257–1259)\",\"Shōgen (1259–1260)\",\"Bun’ō (1260–1261)\",\"Kōchō (1261–1264)\",\"Bun’ei (1264–1275)\",\"Kenji (1275–1278)\",\"Kōan (1278–1288)\",\"Shōō (1288–1293)\",\"Einin (1293–1299)\",\"Shōan (1299–1302)\",\"Kengen (1302–1303)\",\"Kagen (1303–1306)\",\"Tokuji (1306–1308)\",\"Enkyō (1308–1311)\",\"Ōchō (1311–1312)\",\"Shōwa (1312–1317)\",\"Bunpō (1317–1319)\",\"Genō (1319–1321)\",\"Genkō (1321–1324)\",\"Shōchū (1324–1326)\",\"Karyaku (1326–1329)\",\"Gentoku (1329–1331)\",\"Genkō (1331–1334)\",\"Kenmu (1334–1336)\",\"Engen (1336–1340)\",\"Kōkoku (1340–1346)\",\"Shōhei (1346–1370)\",\"Kentoku (1370–1372)\",\"Bunchū (1372–1375)\",\"Tenju (1375–1379)\",\"Kōryaku (1379–1381)\",\"Kōwa (1381–1384)\",\"Genchū (1384–1392)\",\"Meitoku (1384–1387)\",\"Kakei (1387–1389)\",\"Kōō (1389–1390)\",\"Meitoku (1390–1394)\",\"Ōei (1394–1428)\",\"Shōchō (1428–1429)\",\"Eikyō (1429–1441)\",\"Kakitsu (1441–1444)\",\"Bun’an (1444–1449)\",\"Hōtoku (1449–1452)\",\"Kyōtoku (1452–1455)\",\"Kōshō (1455–1457)\",\"Chōroku (1457–1460)\",\"Kanshō (1460–1466)\",\"Bunshō (1466–1467)\",\"Ōnin (1467–1469)\",\"Bunmei (1469–1487)\",\"Chōkyō (1487–1489)\",\"Entoku (1489–1492)\",\"Meiō (1492–1501)\",\"Bunki (1501–1504)\",\"Eishō (1504–1521)\",\"Taiei (1521–1528)\",\"Kyōroku (1528–1532)\",\"Tenbun (1532–1555)\",\"Kōji (1555–1558)\",\"Eiroku (1558–1570)\",\"Genki (1570–1573)\",\"Tenshō (1573–1592)\",\"Bunroku (1592–1596)\",\"Keichō (1596–1615)\",\"Genna (1615–1624)\",\"Kan’ei (1624–1644)\",\"Shōho (1644–1648)\",\"Keian (1648–1652)\",\"Jōō (1652–1655)\",\"Meireki (1655–1658)\",\"Manji (1658–1661)\",\"Kanbun (1661–1673)\",\"Enpō (1673–1681)\",\"Tenna (1681–1684)\",\"Jōkyō (1684–1688)\",\"Genroku (1688–1704)\",\"Hōei (1704–1711)\",\"Shōtoku (1711–1716)\",\"Kyōhō (1716–1736)\",\"Genbun (1736–1741)\",\"Kanpō (1741–1744)\",\"Enkyō (1744–1748)\",\"Kan’en (1748–1751)\",\"Hōreki (1751–1764)\",\"Meiwa (1764–1772)\",\"An’ei (1772–1781)\",\"Tenmei (1781–1789)\",\"Kansei (1789–1801)\",\"Kyōwa (1801–1804)\",\"Bunka (1804–1818)\",\"Bunsei (1818–1830)\",\"Tenpō (1830–1844)\",\"Kōka (1844–1848)\",\"Kaei (1848–1854)\",\"Ansei (1854–1860)\",\"Man’en (1860–1861)\",\"Bunkyū (1861–1864)\",\"Genji (1864–1865)\",\"Keiō (1865–1868)\",\"Meiji\",\"Taishō\",\"Shōwa\",\"Heisei\"],long:[\"Taika (645–650)\",\"Hakuchi (650–671)\",\"Hakuhō (672–686)\",\"Shuchō (686–701)\",\"Taihō (701–704)\",\"Keiun (704–708)\",\"Wadō (708–715)\",\"Reiki (715–717)\",\"Yōrō (717–724)\",\"Jinki (724–729)\",\"Tenpyō (729–749)\",\"Tenpyō-kampō (749-749)\",\"Tenpyō-shōhō (749-757)\",\"Tenpyō-hōji (757-765)\",\"Tenpyō-jingo (765-767)\",\"Jingo-keiun (767-770)\",\"Hōki (770–780)\",\"Ten-ō (781-782)\",\"Enryaku (782–806)\",\"Daidō (806–810)\",\"Kōnin (810–824)\",\"Tenchō (824–834)\",\"Jōwa (834–848)\",\"Kajō (848–851)\",\"Ninju (851–854)\",\"Saikō (854–857)\",\"Ten-an (857-859)\",\"Jōgan (859–877)\",\"Gangyō (877–885)\",\"Ninna (885–889)\",\"Kanpyō (889–898)\",\"Shōtai (898–901)\",\"Engi (901–923)\",\"Enchō (923–931)\",\"Jōhei (931–938)\",\"Tengyō (938–947)\",\"Tenryaku (947–957)\",\"Tentoku (957–961)\",\"Ōwa (961–964)\",\"Kōhō (964–968)\",\"Anna (968–970)\",\"Tenroku (970–973)\",\"Ten’en (973–976)\",\"Jōgen (976–978)\",\"Tengen (978–983)\",\"Eikan (983–985)\",\"Kanna (985–987)\",\"Eien (987–989)\",\"Eiso (989–990)\",\"Shōryaku (990–995)\",\"Chōtoku (995–999)\",\"Chōhō (999–1004)\",\"Kankō (1004–1012)\",\"Chōwa (1012–1017)\",\"Kannin (1017–1021)\",\"Jian (1021–1024)\",\"Manju (1024–1028)\",\"Chōgen (1028–1037)\",\"Chōryaku (1037–1040)\",\"Chōkyū (1040–1044)\",\"Kantoku (1044–1046)\",\"Eishō (1046–1053)\",\"Tengi (1053–1058)\",\"Kōhei (1058–1065)\",\"Jiryaku (1065–1069)\",\"Enkyū (1069–1074)\",\"Shōho (1074–1077)\",\"Shōryaku (1077–1081)\",\"Eihō (1081–1084)\",\"Ōtoku (1084–1087)\",\"Kanji (1087–1094)\",\"Kahō (1094–1096)\",\"Eichō (1096–1097)\",\"Jōtoku (1097–1099)\",\"Kōwa (1099–1104)\",\"Chōji (1104–1106)\",\"Kashō (1106–1108)\",\"Tennin (1108–1110)\",\"Ten-ei (1110-1113)\",\"Eikyū (1113–1118)\",\"Gen’ei (1118–1120)\",\"Hōan (1120–1124)\",\"Tenji (1124–1126)\",\"Daiji (1126–1131)\",\"Tenshō (1131–1132)\",\"Chōshō (1132–1135)\",\"Hōen (1135–1141)\",\"Eiji (1141–1142)\",\"Kōji (1142–1144)\",\"Ten’yō (1144–1145)\",\"Kyūan (1145–1151)\",\"Ninpei (1151–1154)\",\"Kyūju (1154–1156)\",\"Hōgen (1156–1159)\",\"Heiji (1159–1160)\",\"Eiryaku (1160–1161)\",\"Ōho (1161–1163)\",\"Chōkan (1163–1165)\",\"Eiman (1165–1166)\",\"Nin’an (1166–1169)\",\"Kaō (1169–1171)\",\"Shōan (1171–1175)\",\"Angen (1175–1177)\",\"Jishō (1177–1181)\",\"Yōwa (1181–1182)\",\"Juei (1182–1184)\",\"Genryaku (1184–1185)\",\"Bunji (1185–1190)\",\"Kenkyū (1190–1199)\",\"Shōji (1199–1201)\",\"Kennin (1201–1204)\",\"Genkyū (1204–1206)\",\"Ken’ei (1206–1207)\",\"Jōgen (1207–1211)\",\"Kenryaku (1211–1213)\",\"Kenpō (1213–1219)\",\"Jōkyū (1219–1222)\",\"Jōō (1222–1224)\",\"Gennin (1224–1225)\",\"Karoku (1225–1227)\",\"Antei (1227–1229)\",\"Kanki (1229–1232)\",\"Jōei (1232–1233)\",\"Tenpuku (1233–1234)\",\"Bunryaku (1234–1235)\",\"Katei (1235–1238)\",\"Ryakunin (1238–1239)\",\"En’ō (1239–1240)\",\"Ninji (1240–1243)\",\"Kangen (1243–1247)\",\"Hōji (1247–1249)\",\"Kenchō (1249–1256)\",\"Kōgen (1256–1257)\",\"Shōka (1257–1259)\",\"Shōgen (1259–1260)\",\"Bun’ō (1260–1261)\",\"Kōchō (1261–1264)\",\"Bun’ei (1264–1275)\",\"Kenji (1275–1278)\",\"Kōan (1278–1288)\",\"Shōō (1288–1293)\",\"Einin (1293–1299)\",\"Shōan (1299–1302)\",\"Kengen (1302–1303)\",\"Kagen (1303–1306)\",\"Tokuji (1306–1308)\",\"Enkyō (1308–1311)\",\"Ōchō (1311–1312)\",\"Shōwa (1312–1317)\",\"Bunpō (1317–1319)\",\"Genō (1319–1321)\",\"Genkō (1321–1324)\",\"Shōchū (1324–1326)\",\"Karyaku (1326–1329)\",\"Gentoku (1329–1331)\",\"Genkō (1331–1334)\",\"Kenmu (1334–1336)\",\"Engen (1336–1340)\",\"Kōkoku (1340–1346)\",\"Shōhei (1346–1370)\",\"Kentoku (1370–1372)\",\"Bunchū (1372–1375)\",\"Tenju (1375–1379)\",\"Kōryaku (1379–1381)\",\"Kōwa (1381–1384)\",\"Genchū (1384–1392)\",\"Meitoku (1384–1387)\",\"Kakei (1387–1389)\",\"Kōō (1389–1390)\",\"Meitoku (1390–1394)\",\"Ōei (1394–1428)\",\"Shōchō (1428–1429)\",\"Eikyō (1429–1441)\",\"Kakitsu (1441–1444)\",\"Bun’an (1444–1449)\",\"Hōtoku (1449–1452)\",\"Kyōtoku (1452–1455)\",\"Kōshō (1455–1457)\",\"Chōroku (1457–1460)\",\"Kanshō (1460–1466)\",\"Bunshō (1466–1467)\",\"Ōnin (1467–1469)\",\"Bunmei (1469–1487)\",\"Chōkyō (1487–1489)\",\"Entoku (1489–1492)\",\"Meiō (1492–1501)\",\"Bunki (1501–1504)\",\"Eishō (1504–1521)\",\"Taiei (1521–1528)\",\"Kyōroku (1528–1532)\",\"Tenbun (1532–1555)\",\"Kōji (1555–1558)\",\"Eiroku (1558–1570)\",\"Genki (1570–1573)\",\"Tenshō (1573–1592)\",\"Bunroku (1592–1596)\",\"Keichō (1596–1615)\",\"Genna (1615–1624)\",\"Kan’ei (1624–1644)\",\"Shōho (1644–1648)\",\"Keian (1648–1652)\",\"Jōō (1652–1655)\",\"Meireki (1655–1658)\",\"Manji (1658–1661)\",\"Kanbun (1661–1673)\",\"Enpō (1673–1681)\",\"Tenna (1681–1684)\",\"Jōkyō (1684–1688)\",\"Genroku (1688–1704)\",\"Hōei (1704–1711)\",\"Shōtoku (1711–1716)\",\"Kyōhō (1716–1736)\",\"Genbun (1736–1741)\",\"Kanpō (1741–1744)\",\"Enkyō (1744–1748)\",\"Kan’en (1748–1751)\",\"Hōreki (1751–1764)\",\"Meiwa (1764–1772)\",\"An’ei (1772–1781)\",\"Tenmei (1781–1789)\",\"Kansei (1789–1801)\",\"Kyōwa (1801–1804)\",\"Bunka (1804–1818)\",\"Bunsei (1818–1830)\",\"Tenpō (1830–1844)\",\"Kōka (1844–1848)\",\"Kaei (1848–1854)\",\"Ansei (1854–1860)\",\"Man’en (1860–1861)\",\"Bunkyū (1861–1864)\",\"Genji (1864–1865)\",\"Keiō (1865–1868)\",\"Meiji\",\"Taishō\",\"Shōwa\",\"Heisei\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},persian:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Farvardin\",\"Ordibehesht\",\"Khordad\",\"Tir\",\"Mordad\",\"Shahrivar\",\"Mehr\",\"Aban\",\"Azar\",\"Dey\",\"Bahman\",\"Esfand\"],long:[\"Farvardin\",\"Ordibehesht\",\"Khordad\",\"Tir\",\"Mordad\",\"Shahrivar\",\"Mehr\",\"Aban\",\"Azar\",\"Dey\",\"Bahman\",\"Esfand\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"AP\"],short:[\"AP\"],long:[\"AP\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}},roc:{months:{narrow:[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],long:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]},days:{narrow:[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],short:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],long:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},eras:{narrow:[\"Before R.O.C.\",\"Minguo\"],short:[\"Before R.O.C.\",\"Minguo\"],long:[\"Before R.O.C.\",\"Minguo\"]},dayPeriods:{am:\"AM\",pm:\"PM\"}}}},number:{nu:[\"latn\"],patterns:{decimal:{positivePattern:\"{number}\",negativePattern:\"{minusSign}{number}\"},currency:{positivePattern:\"{currency}{number}\",negativePattern:\"{minusSign}{currency}{number}\"},percent:{positivePattern:\"{number}{percentSign}\",negativePattern:\"{minusSign}{number}{percentSign}\"}},symbols:{latn:{decimal:\".\",group:\",\",nan:\"NaN\",plusSign:\"+\",minusSign:\"-\",percentSign:\"%\",infinity:\"∞\"}},currencies:{AUD:\"A$\",BRL:\"R$\",CAD:\"CA$\",CNY:\"CN¥\",EUR:\"€\",GBP:\"£\",HKD:\"HK$\",ILS:\"₪\",INR:\"₹\",JPY:\"¥\",KRW:\"₩\",MXN:\"MX$\",NZD:\"NZ$\",TWD:\"NT$\",USD:\"$\",VND:\"₫\",XAF:\"FCFA\",XCD:\"EC$\",XOF:\"CFA\",XPF:\"CFPF\"}}});","IntlPolyfill.__addLocaleData({locale:\"es\",date:{ca:[\"gregory\",\"buddhist\",\"chinese\",\"coptic\",\"dangi\",\"ethioaa\",\"ethiopic\",\"generic\",\"hebrew\",\"indian\",\"islamic\",\"islamicc\",\"japanese\",\"persian\",\"roc\"],hourNo0:true,hour12:false,formats:{short:\"{1} {0}\",medium:\"{1} {0}\",full:\"{1}, {0}\",long:\"{1}, {0}\",availableFormats:{\"d\":\"d\",\"E\":\"ccc\",Ed:\"E d\",Ehm:\"E, h:mm a\",EHm:\"E, H:mm\",Ehms:\"E, h:mm:ss a\",EHms:\"E, H:mm:ss\",Gy:\"y G\",GyMMM:\"MMM y G\",GyMMMd:\"d MMM y G\",GyMMMEd:\"E, d MMM y G\",GyMMMM:\"MMMM 'de' y G\",GyMMMMd:\"d 'de' MMMM 'de' y G\",GyMMMMEd:\"E, d 'de' MMMM 'de' y G\",\"h\":\"h a\",\"H\":\"H\",hm:\"h:mm a\",Hm:\"H:mm\",hms:\"h:mm:ss a\",Hms:\"H:mm:ss\",hmsv:\"h:mm:ss a v\",Hmsv:\"H:mm:ss v\",hmsvvvv:\"h:mm:ss a (vvvv)\",Hmsvvvv:\"H:mm:ss (vvvv)\",hmv:\"h:mm a v\",Hmv:\"H:mm v\",\"M\":\"L\",Md:\"d/M\",MEd:\"E, d/M\",MMd:\"d/M\",MMdd:\"d/M\",MMM:\"LLL\",MMMd:\"d MMM\",MMMEd:\"E, d MMM\",MMMMd:\"d 'de' MMMM\",MMMMEd:\"E, d 'de' MMMM\",ms:\"mm:ss\",\"y\":\"y\",yM:\"M/y\",yMd:\"d/M/y\",yMEd:\"EEE, d/M/y\",yMM:\"M/y\",yMMM:\"MMM y\",yMMMd:\"d MMM y\",yMMMEd:\"EEE, d MMM y\",yMMMM:\"MMMM 'de' y\",yMMMMd:\"d 'de' MMMM 'de' y\",yMMMMEd:\"EEE, d 'de' MMMM 'de' y\",yQQQ:\"QQQ y\",yQQQQ:\"QQQQ 'de' y\"},dateFormats:{yMMMMEEEEd:\"EEEE, d 'de' MMMM 'de' y\",yMMMMd:\"d 'de' MMMM 'de' y\",yMMMd:\"d MMM y\",yMd:\"d/M/yy\"},timeFormats:{hmmsszzzz:\"H:mm:ss (zzzz)\",hmsz:\"H:mm:ss z\",hms:\"H:mm:ss\",hm:\"H:mm\"}},calendars:{buddhist:{months:{narrow:[\"E\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"ene.\",\"feb.\",\"mar.\",\"abr.\",\"may.\",\"jun.\",\"jul.\",\"ago.\",\"sept.\",\"oct.\",\"nov.\",\"dic.\"],long:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"BE\"],short:[\"BE\"],long:[\"BE\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},chinese:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"],long:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},coptic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"],short:[\"Tout\",\"Baba\",\"Hator\",\"Kiahk\",\"Toba\",\"Amshir\",\"Baramhat\",\"Baramouda\",\"Bashans\",\"Paona\",\"Epep\",\"Mesra\",\"Nasie\"],long:[\"Tout\",\"Baba\",\"Hator\",\"Kiahk\",\"Toba\",\"Amshir\",\"Baramhat\",\"Baramouda\",\"Bashans\",\"Paona\",\"Epep\",\"Mesra\",\"Nasie\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"ERA0\",\"ERA1\"],short:[\"ERA0\",\"ERA1\"],long:[\"ERA0\",\"ERA1\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},dangi:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"],long:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},ethiopic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"],short:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"],long:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"ERA0\",\"ERA1\"],short:[\"ERA0\",\"ERA1\"],long:[\"ERA0\",\"ERA1\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},ethioaa:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"],short:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"],long:[\"Meskerem\",\"Tekemt\",\"Hedar\",\"Tahsas\",\"Ter\",\"Yekatit\",\"Megabit\",\"Miazia\",\"Genbot\",\"Sene\",\"Hamle\",\"Nehasse\",\"Pagumen\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"ERA0\"],short:[\"ERA0\"],long:[\"ERA0\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},generic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"],long:[\"M01\",\"M02\",\"M03\",\"M04\",\"M05\",\"M06\",\"M07\",\"M08\",\"M09\",\"M10\",\"M11\",\"M12\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"ERA0\",\"ERA1\"],short:[\"ERA0\",\"ERA1\"],long:[\"ERA0\",\"ERA1\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},gregory:{months:{narrow:[\"E\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"ene.\",\"feb.\",\"mar.\",\"abr.\",\"may.\",\"jun.\",\"jul.\",\"ago.\",\"sept.\",\"oct.\",\"nov.\",\"dic.\"],long:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"a. C.\",\"d. C.\",\"a. e. c.\",\"e. c.\"],short:[\"a. C.\",\"d. C.\",\"a. e. c.\",\"e. c.\"],long:[\"antes de Cristo\",\"después de Cristo\",\"antes de la era común\",\"era común\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},hebrew:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"7\"],short:[\"Tishri\",\"Heshvan\",\"Kislev\",\"Tevet\",\"Shevat\",\"Adar I\",\"Adar\",\"Nisan\",\"Iyar\",\"Sivan\",\"Tamuz\",\"Av\",\"Elul\",\"Adar II\"],long:[\"Tishri\",\"Heshvan\",\"Kislev\",\"Tevet\",\"Shevat\",\"Adar I\",\"Adar\",\"Nisan\",\"Iyar\",\"Sivan\",\"Tamuz\",\"Av\",\"Elul\",\"Adar II\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"AM\"],short:[\"AM\"],long:[\"AM\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},indian:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Chaitra\",\"Vaisakha\",\"Jyaistha\",\"Asadha\",\"Sravana\",\"Bhadra\",\"Asvina\",\"Kartika\",\"Agrahayana\",\"Pausa\",\"Magha\",\"Phalguna\"],long:[\"Chaitra\",\"Vaisakha\",\"Jyaistha\",\"Asadha\",\"Sravana\",\"Bhadra\",\"Asvina\",\"Kartika\",\"Agrahayana\",\"Pausa\",\"Magha\",\"Phalguna\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"Saka\"],short:[\"Saka\"],long:[\"Saka\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},islamic:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Muh.\",\"Saf.\",\"Rab. I\",\"Rab. II\",\"Jum. I\",\"Jum. II\",\"Raj.\",\"Sha.\",\"Ram.\",\"Shaw.\",\"Dhuʻl-Q.\",\"Dhuʻl-H.\"],long:[\"Muharram\",\"Safar\",\"Rabiʻ I\",\"Rabiʻ II\",\"Jumada I\",\"Jumada II\",\"Rajab\",\"Shaʻban\",\"Ramadan\",\"Shawwal\",\"Dhuʻl-Qiʻdah\",\"Dhuʻl-Hijjah\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"AH\"],short:[\"AH\"],long:[\"AH\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},islamicc:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Muh.\",\"Saf.\",\"Rab. I\",\"Rab. II\",\"Jum. I\",\"Jum. II\",\"Raj.\",\"Sha.\",\"Ram.\",\"Shaw.\",\"Dhuʻl-Q.\",\"Dhuʻl-H.\"],long:[\"Muharram\",\"Safar\",\"Rabiʻ I\",\"Rabiʻ II\",\"Jumada I\",\"Jumada II\",\"Rajab\",\"Shaʻban\",\"Ramadan\",\"Shawwal\",\"Dhuʻl-Qiʻdah\",\"Dhuʻl-Hijjah\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"AH\"],short:[\"AH\"],long:[\"AH\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},japanese:{months:{narrow:[\"E\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"ene.\",\"feb.\",\"mar.\",\"abr.\",\"may.\",\"jun.\",\"jul.\",\"ago.\",\"sept.\",\"oct.\",\"nov.\",\"dic.\"],long:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"Taika (645–650)\",\"Hakuchi (650–671)\",\"Hakuhō (672–686)\",\"Shuchō (686–701)\",\"Taihō (701–704)\",\"Keiun (704–708)\",\"Wadō (708–715)\",\"Reiki (715–717)\",\"Yōrō (717–724)\",\"Jinki (724–729)\",\"Tenpyō (729–749)\",\"Tenpyō-kampō (749-749)\",\"Tenpyō-shōhō (749-757)\",\"Tenpyō-hōji (757-765)\",\"Tenpyō-jingo (765-767)\",\"Jingo-keiun (767-770)\",\"Hōki (770–780)\",\"Ten-ō (781-782)\",\"Enryaku (782–806)\",\"Daidō (806–810)\",\"Kōnin (810–824)\",\"Tenchō (824–834)\",\"Jōwa (834–848)\",\"Kajō (848–851)\",\"Ninju (851–854)\",\"Saikō (854–857)\",\"Ten-an (857-859)\",\"Jōgan (859–877)\",\"Gangyō (877–885)\",\"Ninna (885–889)\",\"Kanpyō (889–898)\",\"Shōtai (898–901)\",\"Engi (901–923)\",\"Enchō (923–931)\",\"Jōhei (931–938)\",\"Tengyō (938–947)\",\"Tenryaku (947–957)\",\"Tentoku (957–961)\",\"Ōwa (961–964)\",\"Kōhō (964–968)\",\"Anna (968–970)\",\"Tenroku (970–973)\",\"Ten’en (973–976)\",\"Jōgen (976–978)\",\"Tengen (978–983)\",\"Eikan (983–985)\",\"Kanna (985–987)\",\"Eien (987–989)\",\"Eiso (989–990)\",\"Shōryaku (990–995)\",\"Chōtoku (995–999)\",\"Chōhō (999–1004)\",\"Kankō (1004–1012)\",\"Chōwa (1012–1017)\",\"Kannin (1017–1021)\",\"Jian (1021–1024)\",\"Manju (1024–1028)\",\"Chōgen (1028–1037)\",\"Chōryaku (1037–1040)\",\"Chōkyū (1040–1044)\",\"Kantoku (1044–1046)\",\"Eishō (1046–1053)\",\"Tengi (1053–1058)\",\"Kōhei (1058–1065)\",\"Jiryaku (1065–1069)\",\"Enkyū (1069–1074)\",\"Shōho (1074–1077)\",\"Shōryaku (1077–1081)\",\"Eihō (1081–1084)\",\"Ōtoku (1084–1087)\",\"Kanji (1087–1094)\",\"Kahō (1094–1096)\",\"Eichō (1096–1097)\",\"Jōtoku (1097–1099)\",\"Kōwa (1099–1104)\",\"Chōji (1104–1106)\",\"Kashō (1106–1108)\",\"Tennin (1108–1110)\",\"Ten-ei (1110-1113)\",\"Eikyū (1113–1118)\",\"Gen’ei (1118–1120)\",\"Hōan (1120–1124)\",\"Tenji (1124–1126)\",\"Daiji (1126–1131)\",\"Tenshō (1131–1132)\",\"Chōshō (1132–1135)\",\"Hōen (1135–1141)\",\"Eiji (1141–1142)\",\"Kōji (1142–1144)\",\"Ten’yō (1144–1145)\",\"Kyūan (1145–1151)\",\"Ninpei (1151–1154)\",\"Kyūju (1154–1156)\",\"Hōgen (1156–1159)\",\"Heiji (1159–1160)\",\"Eiryaku (1160–1161)\",\"Ōho (1161–1163)\",\"Chōkan (1163–1165)\",\"Eiman (1165–1166)\",\"Nin’an (1166–1169)\",\"Kaō (1169–1171)\",\"Shōan (1171–1175)\",\"Angen (1175–1177)\",\"Jishō (1177–1181)\",\"Yōwa (1181–1182)\",\"Juei (1182–1184)\",\"Genryaku (1184–1185)\",\"Bunji (1185–1190)\",\"Kenkyū (1190–1199)\",\"Shōji (1199–1201)\",\"Kennin (1201–1204)\",\"Genkyū (1204–1206)\",\"Ken’ei (1206–1207)\",\"Jōgen (1207–1211)\",\"Kenryaku (1211–1213)\",\"Kenpō (1213–1219)\",\"Jōkyū (1219–1222)\",\"Jōō (1222–1224)\",\"Gennin (1224–1225)\",\"Karoku (1225–1227)\",\"Antei (1227–1229)\",\"Kanki (1229–1232)\",\"Jōei (1232–1233)\",\"Tenpuku (1233–1234)\",\"Bunryaku (1234–1235)\",\"Katei (1235–1238)\",\"Ryakunin (1238–1239)\",\"En’ō (1239–1240)\",\"Ninji (1240–1243)\",\"Kangen (1243–1247)\",\"Hōji (1247–1249)\",\"Kenchō (1249–1256)\",\"Kōgen (1256–1257)\",\"Shōka (1257–1259)\",\"Shōgen (1259–1260)\",\"Bun’ō (1260–1261)\",\"Kōchō (1261–1264)\",\"Bun’ei (1264–1275)\",\"Kenji (1275–1278)\",\"Kōan (1278–1288)\",\"Shōō (1288–1293)\",\"Einin (1293–1299)\",\"Shōan (1299–1302)\",\"Kengen (1302–1303)\",\"Kagen (1303–1306)\",\"Tokuji (1306–1308)\",\"Enkyō (1308–1311)\",\"Ōchō (1311–1312)\",\"Shōwa (1312–1317)\",\"Bunpō (1317–1319)\",\"Genō (1319–1321)\",\"Genkō (1321–1324)\",\"Shōchū (1324–1326)\",\"Karyaku (1326–1329)\",\"Gentoku (1329–1331)\",\"Genkō (1331–1334)\",\"Kenmu (1334–1336)\",\"Engen (1336–1340)\",\"Kōkoku (1340–1346)\",\"Shōhei (1346–1370)\",\"Kentoku (1370–1372)\",\"Bunchū (1372–1375)\",\"Tenju (1375–1379)\",\"Kōryaku (1379–1381)\",\"Kōwa (1381–1384)\",\"Genchū (1384–1392)\",\"Meitoku (1384–1387)\",\"Kakei (1387–1389)\",\"Kōō (1389–1390)\",\"Meitoku (1390–1394)\",\"Ōei (1394–1428)\",\"Shōchō (1428–1429)\",\"Eikyō (1429–1441)\",\"Kakitsu (1441–1444)\",\"Bun’an (1444–1449)\",\"Hōtoku (1449–1452)\",\"Kyōtoku (1452–1455)\",\"Kōshō (1455–1457)\",\"Chōroku (1457–1460)\",\"Kanshō (1460–1466)\",\"Bunshō (1466–1467)\",\"Ōnin (1467–1469)\",\"Bunmei (1469–1487)\",\"Chōkyō (1487–1489)\",\"Entoku (1489–1492)\",\"Meiō (1492–1501)\",\"Bunki (1501–1504)\",\"Eishō (1504–1521)\",\"Taiei (1521–1528)\",\"Kyōroku (1528–1532)\",\"Tenbun (1532–1555)\",\"Kōji (1555–1558)\",\"Eiroku (1558–1570)\",\"Genki (1570–1573)\",\"Tenshō (1573–1592)\",\"Bunroku (1592–1596)\",\"Keichō (1596–1615)\",\"Genna (1615–1624)\",\"Kan’ei (1624–1644)\",\"Shōho (1644–1648)\",\"Keian (1648–1652)\",\"Jōō (1652–1655)\",\"Meireki (1655–1658)\",\"Manji (1658–1661)\",\"Kanbun (1661–1673)\",\"Enpō (1673–1681)\",\"Tenna (1681–1684)\",\"Jōkyō (1684–1688)\",\"Genroku (1688–1704)\",\"Hōei (1704–1711)\",\"Shōtoku (1711–1716)\",\"Kyōhō (1716–1736)\",\"Genbun (1736–1741)\",\"Kanpō (1741–1744)\",\"Enkyō (1744–1748)\",\"Kan’en (1748–1751)\",\"Hōreki (1751–1764)\",\"Meiwa (1764–1772)\",\"An’ei (1772–1781)\",\"Tenmei (1781–1789)\",\"Kansei (1789–1801)\",\"Kyōwa (1801–1804)\",\"Bunka (1804–1818)\",\"Bunsei (1818–1830)\",\"Tenpō (1830–1844)\",\"Kōka (1844–1848)\",\"Kaei (1848–1854)\",\"Ansei (1854–1860)\",\"Man’en (1860–1861)\",\"Bunkyū (1861–1864)\",\"Genji (1864–1865)\",\"Keiō (1865–1868)\",\"M\",\"T\",\"S\",\"H\"],short:[\"Taika (645–650)\",\"Hakuchi (650–671)\",\"Hakuhō (672–686)\",\"Shuchō (686–701)\",\"Taihō (701–704)\",\"Keiun (704–708)\",\"Wadō (708–715)\",\"Reiki (715–717)\",\"Yōrō (717–724)\",\"Jinki (724–729)\",\"Tenpyō (729–749)\",\"Tenpyō-kampō (749-749)\",\"Tenpyō-shōhō (749-757)\",\"Tenpyō-hōji (757-765)\",\"Tenpyō-jingo (765-767)\",\"Jingo-keiun (767-770)\",\"Hōki (770–780)\",\"Ten-ō (781-782)\",\"Enryaku (782–806)\",\"Daidō (806–810)\",\"Kōnin (810–824)\",\"Tenchō (824–834)\",\"Jōwa (834–848)\",\"Kajō (848–851)\",\"Ninju (851–854)\",\"Saikō (854–857)\",\"Ten-an (857-859)\",\"Jōgan (859–877)\",\"Gangyō (877–885)\",\"Ninna (885–889)\",\"Kanpyō (889–898)\",\"Shōtai (898–901)\",\"Engi (901–923)\",\"Enchō (923–931)\",\"Jōhei (931–938)\",\"Tengyō (938–947)\",\"Tenryaku (947–957)\",\"Tentoku (957–961)\",\"Ōwa (961–964)\",\"Kōhō (964–968)\",\"Anna (968–970)\",\"Tenroku (970–973)\",\"Ten’en (973–976)\",\"Jōgen (976–978)\",\"Tengen (978–983)\",\"Eikan (983–985)\",\"Kanna (985–987)\",\"Eien (987–989)\",\"Eiso (989–990)\",\"Shōryaku (990–995)\",\"Chōtoku (995–999)\",\"Chōhō (999–1004)\",\"Kankō (1004–1012)\",\"Chōwa (1012–1017)\",\"Kannin (1017–1021)\",\"Jian (1021–1024)\",\"Manju (1024–1028)\",\"Chōgen (1028–1037)\",\"Chōryaku (1037–1040)\",\"Chōkyū (1040–1044)\",\"Kantoku (1044–1046)\",\"Eishō (1046–1053)\",\"Tengi (1053–1058)\",\"Kōhei (1058–1065)\",\"Jiryaku (1065–1069)\",\"Enkyū (1069–1074)\",\"Shōho (1074–1077)\",\"Shōryaku (1077–1081)\",\"Eihō (1081–1084)\",\"Ōtoku (1084–1087)\",\"Kanji (1087–1094)\",\"Kahō (1094–1096)\",\"Eichō (1096–1097)\",\"Jōtoku (1097–1099)\",\"Kōwa (1099–1104)\",\"Chōji (1104–1106)\",\"Kashō (1106–1108)\",\"Tennin (1108–1110)\",\"Ten-ei (1110-1113)\",\"Eikyū (1113–1118)\",\"Gen’ei (1118–1120)\",\"Hōan (1120–1124)\",\"Tenji (1124–1126)\",\"Daiji (1126–1131)\",\"Tenshō (1131–1132)\",\"Chōshō (1132–1135)\",\"Hōen (1135–1141)\",\"Eiji (1141–1142)\",\"Kōji (1142–1144)\",\"Ten’yō (1144–1145)\",\"Kyūan (1145–1151)\",\"Ninpei (1151–1154)\",\"Kyūju (1154–1156)\",\"Hōgen (1156–1159)\",\"Heiji (1159–1160)\",\"Eiryaku (1160–1161)\",\"Ōho (1161–1163)\",\"Chōkan (1163–1165)\",\"Eiman (1165–1166)\",\"Nin’an (1166–1169)\",\"Kaō (1169–1171)\",\"Shōan (1171–1175)\",\"Angen (1175–1177)\",\"Jishō (1177–1181)\",\"Yōwa (1181–1182)\",\"Juei (1182–1184)\",\"Genryaku (1184–1185)\",\"Bunji (1185–1190)\",\"Kenkyū (1190–1199)\",\"Shōji (1199–1201)\",\"Kennin (1201–1204)\",\"Genkyū (1204–1206)\",\"Ken’ei (1206–1207)\",\"Jōgen (1207–1211)\",\"Kenryaku (1211–1213)\",\"Kenpō (1213–1219)\",\"Jōkyū (1219–1222)\",\"Jōō (1222–1224)\",\"Gennin (1224–1225)\",\"Karoku (1225–1227)\",\"Antei (1227–1229)\",\"Kanki (1229–1232)\",\"Jōei (1232–1233)\",\"Tenpuku (1233–1234)\",\"Bunryaku (1234–1235)\",\"Katei (1235–1238)\",\"Ryakunin (1238–1239)\",\"En’ō (1239–1240)\",\"Ninji (1240–1243)\",\"Kangen (1243–1247)\",\"Hōji (1247–1249)\",\"Kenchō (1249–1256)\",\"Kōgen (1256–1257)\",\"Shōka (1257–1259)\",\"Shōgen (1259–1260)\",\"Bun’ō (1260–1261)\",\"Kōchō (1261–1264)\",\"Bun’ei (1264–1275)\",\"Kenji (1275–1278)\",\"Kōan (1278–1288)\",\"Shōō (1288–1293)\",\"Einin (1293–1299)\",\"Shōan (1299–1302)\",\"Kengen (1302–1303)\",\"Kagen (1303–1306)\",\"Tokuji (1306–1308)\",\"Enkyō (1308–1311)\",\"Ōchō (1311–1312)\",\"Shōwa (1312–1317)\",\"Bunpō (1317–1319)\",\"Genō (1319–1321)\",\"Genkō (1321–1324)\",\"Shōchū (1324–1326)\",\"Karyaku (1326–1329)\",\"Gentoku (1329–1331)\",\"Genkō (1331–1334)\",\"Kenmu (1334–1336)\",\"Engen (1336–1340)\",\"Kōkoku (1340–1346)\",\"Shōhei (1346–1370)\",\"Kentoku (1370–1372)\",\"Bunchū (1372–1375)\",\"Tenju (1375–1379)\",\"Kōryaku (1379–1381)\",\"Kōwa (1381–1384)\",\"Genchū (1384–1392)\",\"Meitoku (1384–1387)\",\"Kakei (1387–1389)\",\"Kōō (1389–1390)\",\"Meitoku (1390–1394)\",\"Ōei (1394–1428)\",\"Shōchō (1428–1429)\",\"Eikyō (1429–1441)\",\"Kakitsu (1441–1444)\",\"Bun’an (1444–1449)\",\"Hōtoku (1449–1452)\",\"Kyōtoku (1452–1455)\",\"Kōshō (1455–1457)\",\"Chōroku (1457–1460)\",\"Kanshō (1460–1466)\",\"Bunshō (1466–1467)\",\"Ōnin (1467–1469)\",\"Bunmei (1469–1487)\",\"Chōkyō (1487–1489)\",\"Entoku (1489–1492)\",\"Meiō (1492–1501)\",\"Bunki (1501–1504)\",\"Eishō (1504–1521)\",\"Taiei (1521–1528)\",\"Kyōroku (1528–1532)\",\"Tenbun (1532–1555)\",\"Kōji (1555–1558)\",\"Eiroku (1558–1570)\",\"Genki (1570–1573)\",\"Tenshō (1573–1592)\",\"Bunroku (1592–1596)\",\"Keichō (1596–1615)\",\"Genna (1615–1624)\",\"Kan’ei (1624–1644)\",\"Shōho (1644–1648)\",\"Keian (1648–1652)\",\"Jōō (1652–1655)\",\"Meireki (1655–1658)\",\"Manji (1658–1661)\",\"Kanbun (1661–1673)\",\"Enpō (1673–1681)\",\"Tenna (1681–1684)\",\"Jōkyō (1684–1688)\",\"Genroku (1688–1704)\",\"Hōei (1704–1711)\",\"Shōtoku (1711–1716)\",\"Kyōhō (1716–1736)\",\"Genbun (1736–1741)\",\"Kanpō (1741–1744)\",\"Enkyō (1744–1748)\",\"Kan’en (1748–1751)\",\"Hōreki (1751–1764)\",\"Meiwa (1764–1772)\",\"An’ei (1772–1781)\",\"Tenmei (1781–1789)\",\"Kansei (1789–1801)\",\"Kyōwa (1801–1804)\",\"Bunka (1804–1818)\",\"Bunsei (1818–1830)\",\"Tenpō (1830–1844)\",\"Kōka (1844–1848)\",\"Kaei (1848–1854)\",\"Ansei (1854–1860)\",\"Man’en (1860–1861)\",\"Bunkyū (1861–1864)\",\"Genji (1864–1865)\",\"Keiō (1865–1868)\",\"Meiji\",\"Taishō\",\"Shōwa\",\"Heisei\"],long:[\"Taika (645–650)\",\"Hakuchi (650–671)\",\"Hakuhō (672–686)\",\"Shuchō (686–701)\",\"Taihō (701–704)\",\"Keiun (704–708)\",\"Wadō (708–715)\",\"Reiki (715–717)\",\"Yōrō (717–724)\",\"Jinki (724–729)\",\"Tenpyō (729–749)\",\"Tenpyō-kampō (749-749)\",\"Tenpyō-shōhō (749-757)\",\"Tenpyō-hōji (757-765)\",\"Tenpyō-jingo (765-767)\",\"Jingo-keiun (767-770)\",\"Hōki (770–780)\",\"Ten-ō (781-782)\",\"Enryaku (782–806)\",\"Daidō (806–810)\",\"Kōnin (810–824)\",\"Tenchō (824–834)\",\"Jōwa (834–848)\",\"Kajō (848–851)\",\"Ninju (851–854)\",\"Saikō (854–857)\",\"Ten-an (857-859)\",\"Jōgan (859–877)\",\"Gangyō (877–885)\",\"Ninna (885–889)\",\"Kanpyō (889–898)\",\"Shōtai (898–901)\",\"Engi (901–923)\",\"Enchō (923–931)\",\"Jōhei (931–938)\",\"Tengyō (938–947)\",\"Tenryaku (947–957)\",\"Tentoku (957–961)\",\"Ōwa (961–964)\",\"Kōhō (964–968)\",\"Anna (968–970)\",\"Tenroku (970–973)\",\"Ten’en (973–976)\",\"Jōgen (976–978)\",\"Tengen (978–983)\",\"Eikan (983–985)\",\"Kanna (985–987)\",\"Eien (987–989)\",\"Eiso (989–990)\",\"Shōryaku (990–995)\",\"Chōtoku (995–999)\",\"Chōhō (999–1004)\",\"Kankō (1004–1012)\",\"Chōwa (1012–1017)\",\"Kannin (1017–1021)\",\"Jian (1021–1024)\",\"Manju (1024–1028)\",\"Chōgen (1028–1037)\",\"Chōryaku (1037–1040)\",\"Chōkyū (1040–1044)\",\"Kantoku (1044–1046)\",\"Eishō (1046–1053)\",\"Tengi (1053–1058)\",\"Kōhei (1058–1065)\",\"Jiryaku (1065–1069)\",\"Enkyū (1069–1074)\",\"Shōho (1074–1077)\",\"Shōryaku (1077–1081)\",\"Eihō (1081–1084)\",\"Ōtoku (1084–1087)\",\"Kanji (1087–1094)\",\"Kahō (1094–1096)\",\"Eichō (1096–1097)\",\"Jōtoku (1097–1099)\",\"Kōwa (1099–1104)\",\"Chōji (1104–1106)\",\"Kashō (1106–1108)\",\"Tennin (1108–1110)\",\"Ten-ei (1110-1113)\",\"Eikyū (1113–1118)\",\"Gen’ei (1118–1120)\",\"Hōan (1120–1124)\",\"Tenji (1124–1126)\",\"Daiji (1126–1131)\",\"Tenshō (1131–1132)\",\"Chōshō (1132–1135)\",\"Hōen (1135–1141)\",\"Eiji (1141–1142)\",\"Kōji (1142–1144)\",\"Ten’yō (1144–1145)\",\"Kyūan (1145–1151)\",\"Ninpei (1151–1154)\",\"Kyūju (1154–1156)\",\"Hōgen (1156–1159)\",\"Heiji (1159–1160)\",\"Eiryaku (1160–1161)\",\"Ōho (1161–1163)\",\"Chōkan (1163–1165)\",\"Eiman (1165–1166)\",\"Nin’an (1166–1169)\",\"Kaō (1169–1171)\",\"Shōan (1171–1175)\",\"Angen (1175–1177)\",\"Jishō (1177–1181)\",\"Yōwa (1181–1182)\",\"Juei (1182–1184)\",\"Genryaku (1184–1185)\",\"Bunji (1185–1190)\",\"Kenkyū (1190–1199)\",\"Shōji (1199–1201)\",\"Kennin (1201–1204)\",\"Genkyū (1204–1206)\",\"Ken’ei (1206–1207)\",\"Jōgen (1207–1211)\",\"Kenryaku (1211–1213)\",\"Kenpō (1213–1219)\",\"Jōkyū (1219–1222)\",\"Jōō (1222–1224)\",\"Gennin (1224–1225)\",\"Karoku (1225–1227)\",\"Antei (1227–1229)\",\"Kanki (1229–1232)\",\"Jōei (1232–1233)\",\"Tenpuku (1233–1234)\",\"Bunryaku (1234–1235)\",\"Katei (1235–1238)\",\"Ryakunin (1238–1239)\",\"En’ō (1239–1240)\",\"Ninji (1240–1243)\",\"Kangen (1243–1247)\",\"Hōji (1247–1249)\",\"Kenchō (1249–1256)\",\"Kōgen (1256–1257)\",\"Shōka (1257–1259)\",\"Shōgen (1259–1260)\",\"Bun’ō (1260–1261)\",\"Kōchō (1261–1264)\",\"Bun’ei (1264–1275)\",\"Kenji (1275–1278)\",\"Kōan (1278–1288)\",\"Shōō (1288–1293)\",\"Einin (1293–1299)\",\"Shōan (1299–1302)\",\"Kengen (1302–1303)\",\"Kagen (1303–1306)\",\"Tokuji (1306–1308)\",\"Enkyō (1308–1311)\",\"Ōchō (1311–1312)\",\"Shōwa (1312–1317)\",\"Bunpō (1317–1319)\",\"Genō (1319–1321)\",\"Genkō (1321–1324)\",\"Shōchū (1324–1326)\",\"Karyaku (1326–1329)\",\"Gentoku (1329–1331)\",\"Genkō (1331–1334)\",\"Kenmu (1334–1336)\",\"Engen (1336–1340)\",\"Kōkoku (1340–1346)\",\"Shōhei (1346–1370)\",\"Kentoku (1370–1372)\",\"Bunchū (1372–1375)\",\"Tenju (1375–1379)\",\"Kōryaku (1379–1381)\",\"Kōwa (1381–1384)\",\"Genchū (1384–1392)\",\"Meitoku (1384–1387)\",\"Kakei (1387–1389)\",\"Kōō (1389–1390)\",\"Meitoku (1390–1394)\",\"Ōei (1394–1428)\",\"Shōchō (1428–1429)\",\"Eikyō (1429–1441)\",\"Kakitsu (1441–1444)\",\"Bun’an (1444–1449)\",\"Hōtoku (1449–1452)\",\"Kyōtoku (1452–1455)\",\"Kōshō (1455–1457)\",\"Chōroku (1457–1460)\",\"Kanshō (1460–1466)\",\"Bunshō (1466–1467)\",\"Ōnin (1467–1469)\",\"Bunmei (1469–1487)\",\"Chōkyō (1487–1489)\",\"Entoku (1489–1492)\",\"Meiō (1492–1501)\",\"Bunki (1501–1504)\",\"Eishō (1504–1521)\",\"Taiei (1521–1528)\",\"Kyōroku (1528–1532)\",\"Tenbun (1532–1555)\",\"Kōji (1555–1558)\",\"Eiroku (1558–1570)\",\"Genki (1570–1573)\",\"Tenshō (1573–1592)\",\"Bunroku (1592–1596)\",\"Keichō (1596–1615)\",\"Genna (1615–1624)\",\"Kan’ei (1624–1644)\",\"Shōho (1644–1648)\",\"Keian (1648–1652)\",\"Jōō (1652–1655)\",\"Meireki (1655–1658)\",\"Manji (1658–1661)\",\"Kanbun (1661–1673)\",\"Enpō (1673–1681)\",\"Tenna (1681–1684)\",\"Jōkyō (1684–1688)\",\"Genroku (1688–1704)\",\"Hōei (1704–1711)\",\"Shōtoku (1711–1716)\",\"Kyōhō (1716–1736)\",\"Genbun (1736–1741)\",\"Kanpō (1741–1744)\",\"Enkyō (1744–1748)\",\"Kan’en (1748–1751)\",\"Hōreki (1751–1764)\",\"Meiwa (1764–1772)\",\"An’ei (1772–1781)\",\"Tenmei (1781–1789)\",\"Kansei (1789–1801)\",\"Kyōwa (1801–1804)\",\"Bunka (1804–1818)\",\"Bunsei (1818–1830)\",\"Tenpō (1830–1844)\",\"Kōka (1844–1848)\",\"Kaei (1848–1854)\",\"Ansei (1854–1860)\",\"Man’en (1860–1861)\",\"Bunkyū (1861–1864)\",\"Genji (1864–1865)\",\"Keiō (1865–1868)\",\"Meiji\",\"Taishō\",\"Shōwa\",\"Heisei\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},persian:{months:{narrow:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],short:[\"Farvardin\",\"Ordibehesht\",\"Khordad\",\"Tir\",\"Mordad\",\"Shahrivar\",\"Mehr\",\"Aban\",\"Azar\",\"Dey\",\"Bahman\",\"Esfand\"],long:[\"Farvardin\",\"Ordibehesht\",\"Khordad\",\"Tir\",\"Mordad\",\"Shahrivar\",\"Mehr\",\"Aban\",\"Azar\",\"Dey\",\"Bahman\",\"Esfand\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"AP\"],short:[\"AP\"],long:[\"AP\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}},roc:{months:{narrow:[\"E\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],short:[\"ene.\",\"feb.\",\"mar.\",\"abr.\",\"may.\",\"jun.\",\"jul.\",\"ago.\",\"sept.\",\"oct.\",\"nov.\",\"dic.\"],long:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"]},days:{narrow:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],short:[\"dom.\",\"lun.\",\"mar.\",\"mié.\",\"jue.\",\"vie.\",\"sáb.\"],long:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"]},eras:{narrow:[\"antes de R.O.C.\",\"R.O.C.\"],short:[\"antes de R.O.C.\",\"R.O.C.\"],long:[\"antes de R.O.C.\",\"R.O.C.\"]},dayPeriods:{am:\"a. m.\",pm:\"p. m.\"}}}},number:{nu:[\"latn\"],patterns:{decimal:{positivePattern:\"{number}\",negativePattern:\"{minusSign}{number}\"},currency:{positivePattern:\"{number} {currency}\",negativePattern:\"{minusSign}{number} {currency}\"},percent:{positivePattern:\"{number} {percentSign}\",negativePattern:\"{minusSign}{number} {percentSign}\"}},symbols:{latn:{decimal:\",\",group:\".\",nan:\"NaN\",plusSign:\"+\",minusSign:\"-\",percentSign:\"%\",infinity:\"∞\"}},currencies:{CAD:\"CA$\",ESP:\"₧\",EUR:\"€\",THB:\"฿\",USD:\"$\",VND:\"₫\",XPF:\"CFPF\"}}});","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\n\nvar testEl = doc ?\n    doc.body || doc.createElement('div') :\n    {};\n\n// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>\n// (IE7+ support) <=IE7 does not support el.hasAttribute(name)\nvar actualHasAttributeNS;\n\nif (testEl.hasAttributeNS) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttributeNS(namespaceURI, name);\n    };\n} else if (testEl.hasAttribute) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttribute(name);\n    };\n} else {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.getAttributeNode(namespaceURI, name) != null;\n    };\n}\n\nvar hasAttributeNS = actualHasAttributeNS;\n\n\nfunction toElement(str) {\n    if (!range && doc.createRange) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment;\n    if (range && range.createContextualFragment) {\n        fragment = range.createContextualFragment(str);\n    } else {\n        fragment = doc.createElement('body');\n        fragment.innerHTML = str;\n    }\n    return fragment.childNodes[0];\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    if (toEl.actualize &&\n        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */\n        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {\n        // If the target element is a virtual DOM node then we may need to normalize the tag name\n        // before comparing. Normal HTML elements that are in the \"http://www.w3.org/1999/xhtml\"\n        // are converted to upper case\n        return fromNodeName === toNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction morphAttrs(fromNode, toNode) {\n    var attrs = toNode.attributes;\n    var i;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    attrs = fromNode.attributes;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        if (attr.specified !== false) {\n            attrName = attr.name;\n            attrNamespaceURI = attr.namespaceURI;\n\n            if (attrNamespaceURI) {\n                attrName = attr.localName || attrName;\n\n                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {\n                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n                }\n            } else {\n                if (!hasAttributeNS(toNode, null, attrName)) {\n                    fromNode.removeAttribute(attrName);\n                }\n            }\n        }\n    }\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name, '');\n        }\n    }\n}\n\nvar specialElHandlers = {\n    /**\n     * Needed for IE. Apparently IE doesn't think that \"selected\" is an\n     * attribute when reading over the attributes using selectEl.attributes\n     */\n    OPTION: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!hasAttributeNS(toEl, null, 'value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!hasAttributeNS(toEl, null, 'multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            var curChild = toEl.firstChild;\n            while(curChild) {\n                var nodeName = curChild.nodeName;\n                if (nodeName && nodeName.toUpperCase() === 'OPTION') {\n                    if (hasAttributeNS(curChild, null, 'selected')) {\n                        selectedIndex = i;\n                        break;\n                    }\n                    i++;\n                }\n                curChild = curChild.nextSibling;\n            }\n\n            fromEl.selectedIndex = i;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n    return node.id;\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = {};\n        var keyedRemovalList;\n\n        function addKeyedRemoval(key) {\n            if (keyedRemovalList) {\n                keyedRemovalList.push(key);\n            } else {\n                keyedRemovalList = [key];\n            }\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    }\n                }\n\n                handleNodeAdded(curChild);\n                curChild = nextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n            var curFromNodeKey;\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it is will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {\n                return;\n            }\n\n            if (!childrenOnly) {\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                morphAttrs(fromEl, toEl);\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n                var curToNodeChild = toEl.firstChild;\n                var curFromNodeChild = fromEl.firstChild;\n                var curToNodeKey;\n\n                var fromNextSibling;\n                var toNextSibling;\n                var matchingFromEl;\n\n                outer: while (curToNodeChild) {\n                    toNextSibling = curToNodeChild.nextSibling;\n                    curToNodeKey = getNodeKey(curToNodeChild);\n\n                    while (curFromNodeChild) {\n                        fromNextSibling = curFromNodeChild.nextSibling;\n\n                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                        var curFromNodeType = curFromNodeChild.nodeType;\n\n                        var isCompatible = undefined;\n\n                        if (curFromNodeType === curToNodeChild.nodeType) {\n                            if (curFromNodeType === ELEMENT_NODE) {\n                                // Both nodes being compared are Element nodes\n\n                                if (curToNodeKey) {\n                                    // The target node has a key so we want to match it up with the correct element\n                                    // in the original DOM tree\n                                    if (curToNodeKey !== curFromNodeKey) {\n                                        // The current element in the original DOM tree does not have a matching key so\n                                        // let's check our lookup to see if there is a matching element in the original\n                                        // DOM tree\n                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                            if (curFromNodeChild.nextSibling === matchingFromEl) {\n                                                // Special case for single element removals. To avoid removing the original\n                                                // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                                // we will instead discard the current node and wait until the next\n                                                // iteration to properly match up the keyed target element with its matching\n                                                // element in the original tree\n                                                isCompatible = false;\n                                            } else {\n                                                // We found a matching keyed element somewhere in the original DOM tree.\n                                                // Let's moving the original DOM node into the current position and morph\n                                                // it.\n\n                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                                // the `removeNode()` function for the node that is being discarded so that\n                                                // all lifecycle hooks are correctly invoked\n                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                                fromNextSibling = curFromNodeChild.nextSibling;\n\n                                                if (curFromNodeKey) {\n                                                    // Since the node is keyed it might be matched up later so we defer\n                                                    // the actual removal to later\n                                                    addKeyedRemoval(curFromNodeKey);\n                                                } else {\n                                                    // NOTE: we skip nested keyed nodes from being removed since there is\n                                                    //       still a chance they will be matched up later\n                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                                }\n\n                                                curFromNodeChild = matchingFromEl;\n                                            }\n                                        } else {\n                                            // The nodes are not compatible since the \"to\" node has a key and there\n                                            // is no matching keyed node in the source tree\n                                            isCompatible = false;\n                                        }\n                                    }\n                                } else if (curFromNodeKey) {\n                                    // The original has a key\n                                    isCompatible = false;\n                                }\n\n                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                                if (isCompatible) {\n                                    // We found compatible DOM elements so transform\n                                    // the current \"from\" node to match the current\n                                    // target DOM node.\n                                    morphEl(curFromNodeChild, curToNodeChild);\n                                }\n\n                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                                // Both nodes being compared are Text or Comment nodes\n                                isCompatible = true;\n                                // Simply update nodeValue on the original node to\n                                // change the text value\n                                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                                }\n\n                            }\n                        }\n\n                        if (isCompatible) {\n                            // Advance both the \"to\" child and the \"from\" child since we found a match\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        // No compatible match so remove the old node from the DOM and continue trying to find a\n                        // match in the original DOM. However, we only do this if the from node is not keyed\n                        // since it is possible that a keyed node might match up with a node somewhere else in the\n                        // target tree and we don't want to discard it just yet since it still might find a\n                        // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                        // that didn't find a home\n                        if (curFromNodeKey) {\n                            // Since the node is keyed it might be matched up later so we defer\n                            // the actual removal to later\n                            addKeyedRemoval(curFromNodeKey);\n                        } else {\n                            // NOTE: we skip nested keyed nodes from being removed since there is\n                            //       still a chance they will be matched up later\n                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                        }\n\n                        curFromNodeChild = fromNextSibling;\n                    }\n\n                    // If we got this far then we did not find a candidate match for\n                    // our \"to node\" and we exhausted all of the children \"from\"\n                    // nodes. Therefore, we will just append the current \"to\" node\n                    // to the end\n                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                        fromEl.appendChild(matchingFromEl);\n                        morphEl(matchingFromEl, curToNodeChild);\n                    } else {\n                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                        if (onBeforeNodeAddedResult !== false) {\n                            if (onBeforeNodeAddedResult) {\n                                curToNodeChild = onBeforeNodeAddedResult;\n                            }\n\n                            if (curToNodeChild.actualize) {\n                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                            }\n                            fromEl.appendChild(curToNodeChild);\n                            handleNodeAdded(curToNodeChild);\n                        }\n                    }\n\n                    curToNodeChild = toNextSibling;\n                    curFromNodeChild = fromNextSibling;\n                }\n\n                // We have processed all of the \"to nodes\". If curFromNodeChild is\n                // non-null then we still have some from nodes left over that need\n                // to be removed\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n                    curFromNodeChild = fromNextSibling;\n                }\n            }\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphEl(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n","assert.notEqual = notEqual\nassert.notOk = notOk\nassert.equal = equal\nassert.ok = assert\n\nmodule.exports = assert\n\nfunction equal (a, b, m) {\n  assert(a == b, m) // eslint-disable-line eqeqeq\n}\n\nfunction notEqual (a, b, m) {\n  assert(a != b, m) // eslint-disable-line eqeqeq\n}\n\nfunction notOk (t, m) {\n  assert(!t, m)\n}\n\nfunction assert (t, m) {\n  if (!t) throw new Error(m || 'AssertionError')\n}\n","/* global MutationObserver */\nvar document = require('global/document')\nvar window = require('global/window')\nvar assert = require('assert')\nvar watch = Object.create(null)\nvar KEY_ID = 'onloadid' + (new Date() % 9e6).toString(36)\nvar KEY_ATTR = 'data-' + KEY_ID\nvar INDEX = 0\n\nif (window && window.MutationObserver) {\n  var observer = new MutationObserver(function (mutations) {\n    if (Object.keys(watch).length < 1) return\n    for (var i = 0; i < mutations.length; i++) {\n      if (mutations[i].attributeName === KEY_ATTR) {\n        eachAttr(mutations[i], turnon, turnoff)\n        continue\n      }\n      eachMutation(mutations[i].removedNodes, turnoff)\n      eachMutation(mutations[i].addedNodes, turnon)\n    }\n  })\n  if (document.body) {\n    beginObserve(observer)\n  } else {\n    document.addEventListener('DOMContentLoaded', function (event) {\n      beginObserve(observer)\n    })\n  }\n}\n\nfunction beginObserve (observer) {\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeOldValue: true,\n    attributeFilter: [KEY_ATTR]\n  })\n}\n\nmodule.exports = function onload (el, on, off, caller) {\n  assert(document.body, 'on-load: will not work prior to DOMContentLoaded')\n  on = on || function () {}\n  off = off || function () {}\n  el.setAttribute(KEY_ATTR, 'o' + INDEX)\n  watch['o' + INDEX] = [on, off, 0, caller || onload.caller]\n  INDEX += 1\n  return el\n}\n\nmodule.exports.KEY_ATTR = KEY_ATTR\nmodule.exports.KEY_ID = KEY_ID\n\nfunction turnon (index, el) {\n  if (watch[index][0] && watch[index][2] === 0) {\n    watch[index][0](el)\n    watch[index][2] = 1\n  }\n}\n\nfunction turnoff (index, el) {\n  if (watch[index][1] && watch[index][2] === 1) {\n    watch[index][1](el)\n    watch[index][2] = 0\n  }\n}\n\nfunction eachAttr (mutation, on, off) {\n  var newValue = mutation.target.getAttribute(KEY_ATTR)\n  if (sameOrigin(mutation.oldValue, newValue)) {\n    watch[newValue] = watch[mutation.oldValue]\n    return\n  }\n  if (watch[mutation.oldValue]) {\n    off(mutation.oldValue, mutation.target)\n  }\n  if (watch[newValue]) {\n    on(newValue, mutation.target)\n  }\n}\n\nfunction sameOrigin (oldValue, newValue) {\n  if (!oldValue || !newValue) return false\n  return watch[oldValue][3] === watch[newValue][3]\n}\n\nfunction eachMutation (nodes, fn) {\n  var keys = Object.keys(watch)\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] && nodes[i].getAttribute && nodes[i].getAttribute(KEY_ATTR)) {\n      var onloadid = nodes[i].getAttribute(KEY_ATTR)\n      keys.forEach(function (k) {\n        if (onloadid === k) {\n          fn(k, nodes[i])\n        }\n      })\n    }\n    if (nodes[i].childNodes.length > 0) {\n      eachMutation(nodes[i].childNodes, fn)\n    }\n  }\n}\n","  /* globals require, module */\n\n  'use strict';\n\n  /**\n   * Module dependencies.\n   */\n\n  var pathtoRegexp = require('path-to-regexp');\n\n  /**\n   * Module exports.\n   */\n\n  module.exports = page;\n  page.default = page;\n  page.Context = Context;\n  page.Route = Route;\n  page.sameOrigin = sameOrigin;\n\n  /**\n   * Short-cuts for global-object checks\n   */\n\n  var hasDocument = ('undefined' !== typeof document);\n  var hasWindow = ('undefined' !== typeof window);\n  var hasHistory = ('undefined' !== typeof history);\n  var hasProcess = typeof process !== 'undefined';\n\n  /**\n   * Detect click event\n   */\n  var clickEvent = hasDocument && document.ontouchstart ? 'touchstart' : 'click';\n\n  /**\n   * To work properly with the URL\n   * history.location generated polyfill in https://github.com/devote/HTML5-History-API\n   */\n\n  var isLocation = hasWindow && !!(window.history.location || window.location);\n\n  /**\n   * Perform initial dispatch.\n   */\n\n  var dispatch = true;\n\n\n  /**\n   * Decode URL components (query string, pathname, hash).\n   * Accommodates both regular percent encoding and x-www-form-urlencoded format.\n   */\n  var decodeURLComponents = true;\n\n  /**\n   * Base path.\n   */\n\n  var base = '';\n\n  /**\n   * Strict path matching.\n   */\n\n  var strict = false;\n\n  /**\n   * Running flag.\n   */\n\n  var running;\n\n  /**\n   * HashBang option\n   */\n\n  var hashbang = false;\n\n  /**\n   * Previous context, for capturing\n   * page exit events.\n   */\n\n  var prevContext;\n\n  /**\n   * The window for which this `page` is running\n   */\n  var pageWindow;\n\n  /**\n   * Register `path` with callback `fn()`,\n   * or route `path`, or redirection,\n   * or `page.start()`.\n   *\n   *   page(fn);\n   *   page('*', fn);\n   *   page('/user/:id', load, user);\n   *   page('/user/' + user.id, { some: 'thing' });\n   *   page('/user/' + user.id);\n   *   page('/from', '/to')\n   *   page();\n   *\n   * @param {string|!Function|!Object} path\n   * @param {Function=} fn\n   * @api public\n   */\n\n  function page(path, fn) {\n    // <callback>\n    if ('function' === typeof path) {\n      return page('*', path);\n    }\n\n    // route <path> to <callback ...>\n    if ('function' === typeof fn) {\n      var route = new Route(/** @type {string} */ (path));\n      for (var i = 1; i < arguments.length; ++i) {\n        page.callbacks.push(route.middleware(arguments[i]));\n      }\n      // show <path> with [state]\n    } else if ('string' === typeof path) {\n      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);\n      // start [options]\n    } else {\n      page.start(path);\n    }\n  }\n\n  /**\n   * Callback functions.\n   */\n\n  page.callbacks = [];\n  page.exits = [];\n\n  /**\n   * Current path being processed\n   * @type {string}\n   */\n  page.current = '';\n\n  /**\n   * Number of pages navigated to.\n   * @type {number}\n   *\n   *     page.len == 0;\n   *     page('/login');\n   *     page.len == 1;\n   */\n\n  page.len = 0;\n\n  /**\n   * Get or set basepath to `path`.\n   *\n   * @param {string} path\n   * @api public\n   */\n\n  page.base = function(path) {\n    if (0 === arguments.length) return base;\n    base = path;\n  };\n\n  /**\n   * Get or set strict path matching to `enable`\n   *\n   * @param {boolean} enable\n   * @api public\n   */\n\n  page.strict = function(enable) {\n    if (0 === arguments.length) return strict;\n    strict = enable;\n  };\n\n  /**\n   * Bind with the given `options`.\n   *\n   * Options:\n   *\n   *    - `click` bind to click events [true]\n   *    - `popstate` bind to popstate [true]\n   *    - `dispatch` perform initial dispatch [true]\n   *\n   * @param {Object} options\n   * @api public\n   */\n\n  page.start = function(options) {\n    options = options || {};\n    if (running) return;\n    running = true;\n    pageWindow = options.window || (hasWindow && window);\n    if (false === options.dispatch) dispatch = false;\n    if (false === options.decodeURLComponents) decodeURLComponents = false;\n    if (false !== options.popstate && hasWindow) pageWindow.addEventListener('popstate', onpopstate, false);\n    if (false !== options.click && hasDocument) {\n      pageWindow.document.addEventListener(clickEvent, onclick, false);\n    }\n    hashbang = !!options.hashbang;\n    if(hashbang && hasWindow && !hasHistory) {\n      pageWindow.addEventListener('hashchange', onpopstate, false);\n    }\n    if (!dispatch) return;\n\n    var url;\n    if(isLocation) {\n      var loc = pageWindow.location;\n\n      if(hashbang && ~loc.hash.indexOf('#!')) {\n        url = loc.hash.substr(2) + loc.search;\n      } else if (hashbang) {\n        url = loc.search + loc.hash;\n      } else {\n        url = loc.pathname + loc.search + loc.hash;\n      }\n    }\n\n    page.replace(url, null, true, dispatch);\n  };\n\n  /**\n   * Unbind click and popstate event handlers.\n   *\n   * @api public\n   */\n\n  page.stop = function() {\n    if (!running) return;\n    page.current = '';\n    page.len = 0;\n    running = false;\n    hasDocument && pageWindow.document.removeEventListener(clickEvent, onclick, false);\n    hasWindow && pageWindow.removeEventListener('popstate', onpopstate, false);\n    hasWindow && pageWindow.removeEventListener('hashchange', onpopstate, false);\n  };\n\n  /**\n   * Show `path` with optional `state` object.\n   *\n   * @param {string} path\n   * @param {Object=} state\n   * @param {boolean=} dispatch\n   * @param {boolean=} push\n   * @return {!Context}\n   * @api public\n   */\n\n  page.show = function(path, state, dispatch, push) {\n    var ctx = new Context(path, state),\n      prev = prevContext;\n    prevContext = ctx;\n    page.current = ctx.path;\n    if (false !== dispatch) page.dispatch(ctx, prev);\n    if (false !== ctx.handled && false !== push) ctx.pushState();\n    return ctx;\n  };\n\n  /**\n   * Goes back in the history\n   * Back should always let the current route push state and then go back.\n   *\n   * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base\n   * @param {Object=} state\n   * @api public\n   */\n\n  page.back = function(path, state) {\n    if (page.len > 0) {\n      // this may need more testing to see if all browsers\n      // wait for the next tick to go back in history\n      hasHistory && pageWindow.history.back();\n      page.len--;\n    } else if (path) {\n      setTimeout(function() {\n        page.show(path, state);\n      });\n    }else{\n      setTimeout(function() {\n        page.show(getBase(), state);\n      });\n    }\n  };\n\n\n  /**\n   * Register route to redirect from one path to other\n   * or just redirect to another route\n   *\n   * @param {string} from - if param 'to' is undefined redirects to 'from'\n   * @param {string=} to\n   * @api public\n   */\n  page.redirect = function(from, to) {\n    // Define route from a path to another\n    if ('string' === typeof from && 'string' === typeof to) {\n      page(from, function(e) {\n        setTimeout(function() {\n          page.replace(/** @type {!string} */ (to));\n        }, 0);\n      });\n    }\n\n    // Wait for the push state and replace it with another\n    if ('string' === typeof from && 'undefined' === typeof to) {\n      setTimeout(function() {\n        page.replace(from);\n      }, 0);\n    }\n  };\n\n  /**\n   * Replace `path` with optional `state` object.\n   *\n   * @param {string} path\n   * @param {Object=} state\n   * @param {boolean=} init\n   * @param {boolean=} dispatch\n   * @return {!Context}\n   * @api public\n   */\n\n\n  page.replace = function(path, state, init, dispatch) {\n    var ctx = new Context(path, state),\n      prev = prevContext;\n    prevContext = ctx;\n    page.current = ctx.path;\n    ctx.init = init;\n    ctx.save(); // save before dispatching, which may redirect\n    if (false !== dispatch) page.dispatch(ctx, prev);\n    return ctx;\n  };\n\n  /**\n   * Dispatch the given `ctx`.\n   *\n   * @param {Context} ctx\n   * @api private\n   */\n\n  page.dispatch = function(ctx, prev) {\n    var i = 0,\n      j = 0;\n\n    function nextExit() {\n      var fn = page.exits[j++];\n      if (!fn) return nextEnter();\n      fn(prev, nextExit);\n    }\n\n    function nextEnter() {\n      var fn = page.callbacks[i++];\n\n      if (ctx.path !== page.current) {\n        ctx.handled = false;\n        return;\n      }\n      if (!fn) return unhandled(ctx);\n      fn(ctx, nextEnter);\n    }\n\n    if (prev) {\n      nextExit();\n    } else {\n      nextEnter();\n    }\n  };\n\n  /**\n   * Unhandled `ctx`. When it's not the initial\n   * popstate then redirect. If you wish to handle\n   * 404s on your own use `page('*', callback)`.\n   *\n   * @param {Context} ctx\n   * @api private\n   */\n  function unhandled(ctx) {\n    if (ctx.handled) return;\n    var current;\n\n    if (hashbang) {\n      current = isLocation && getBase() + pageWindow.location.hash.replace('#!', '');\n    } else {\n      current = isLocation && pageWindow.location.pathname + pageWindow.location.search;\n    }\n\n    if (current === ctx.canonicalPath) return;\n    page.stop();\n    ctx.handled = false;\n    isLocation && (pageWindow.location.href = ctx.canonicalPath);\n  }\n\n  /**\n   * Register an exit route on `path` with\n   * callback `fn()`, which will be called\n   * on the previous context when a new\n   * page is visited.\n   */\n  page.exit = function(path, fn) {\n    if (typeof path === 'function') {\n      return page.exit('*', path);\n    }\n\n    var route = new Route(path);\n    for (var i = 1; i < arguments.length; ++i) {\n      page.exits.push(route.middleware(arguments[i]));\n    }\n  };\n\n  /**\n   * Remove URL encoding from the given `str`.\n   * Accommodates whitespace in both x-www-form-urlencoded\n   * and regular percent-encoded form.\n   *\n   * @param {string} val - URL component to decode\n   */\n  function decodeURLEncodedURIComponent(val) {\n    if (typeof val !== 'string') { return val; }\n    return decodeURLComponents ? decodeURIComponent(val.replace(/\\+/g, ' ')) : val;\n  }\n\n  /**\n   * Initialize a new \"request\" `Context`\n   * with the given `path` and optional initial `state`.\n   *\n   * @constructor\n   * @param {string} path\n   * @param {Object=} state\n   * @api public\n   */\n\n  function Context(path, state) {\n    var pageBase = getBase();\n    if ('/' === path[0] && 0 !== path.indexOf(pageBase)) path = pageBase + (hashbang ? '#!' : '') + path;\n    var i = path.indexOf('?');\n\n    this.canonicalPath = path;\n    this.path = path.replace(pageBase, '') || '/';\n    if (hashbang) this.path = this.path.replace('#!', '') || '/';\n\n    this.title = (hasDocument && pageWindow.document.title);\n    this.state = state || {};\n    this.state.path = path;\n    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';\n    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);\n    this.params = {};\n\n    // fragment\n    this.hash = '';\n    if (!hashbang) {\n      if (!~this.path.indexOf('#')) return;\n      var parts = this.path.split('#');\n      this.path = this.pathname = parts[0];\n      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';\n      this.querystring = this.querystring.split('#')[0];\n    }\n  }\n\n  /**\n   * Expose `Context`.\n   */\n\n  page.Context = Context;\n\n  /**\n   * Push state.\n   *\n   * @api private\n   */\n\n  Context.prototype.pushState = function() {\n    page.len++;\n    if (hasHistory) {\n        pageWindow.history.pushState(this.state, this.title,\n          hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n    }\n  };\n\n  /**\n   * Save the context state.\n   *\n   * @api public\n   */\n\n  Context.prototype.save = function() {\n    if (hasHistory && pageWindow.location.protocol !== 'file:') {\n        pageWindow.history.replaceState(this.state, this.title,\n          hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);\n    }\n  };\n\n  /**\n   * Initialize `Route` with the given HTTP `path`,\n   * and an array of `callbacks` and `options`.\n   *\n   * Options:\n   *\n   *   - `sensitive`    enable case-sensitive routes\n   *   - `strict`       enable strict matching for trailing slashes\n   *\n   * @constructor\n   * @param {string} path\n   * @param {Object=} options\n   * @api private\n   */\n\n  function Route(path, options) {\n    options = options || {};\n    options.strict = options.strict || strict;\n    this.path = (path === '*') ? '(.*)' : path;\n    this.method = 'GET';\n    this.regexp = pathtoRegexp(this.path,\n      this.keys = [],\n      options);\n  }\n\n  /**\n   * Expose `Route`.\n   */\n\n  page.Route = Route;\n\n  /**\n   * Return route middleware with\n   * the given callback `fn()`.\n   *\n   * @param {Function} fn\n   * @return {Function}\n   * @api public\n   */\n\n  Route.prototype.middleware = function(fn) {\n    var self = this;\n    return function(ctx, next) {\n      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);\n      next();\n    };\n  };\n\n  /**\n   * Check if this route matches `path`, if so\n   * populate `params`.\n   *\n   * @param {string} path\n   * @param {Object} params\n   * @return {boolean}\n   * @api private\n   */\n\n  Route.prototype.match = function(path, params) {\n    var keys = this.keys,\n      qsIndex = path.indexOf('?'),\n      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,\n      m = this.regexp.exec(decodeURIComponent(pathname));\n\n    if (!m) return false;\n\n    for (var i = 1, len = m.length; i < len; ++i) {\n      var key = keys[i - 1];\n      var val = decodeURLEncodedURIComponent(m[i]);\n      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {\n        params[key.name] = val;\n      }\n    }\n\n    return true;\n  };\n\n\n  /**\n   * Handle \"populate\" events.\n   */\n\n  var onpopstate = (function () {\n    var loaded = false;\n    if ( ! hasWindow ) {\n      return;\n    }\n    if (hasDocument && document.readyState === 'complete') {\n      loaded = true;\n    } else {\n      window.addEventListener('load', function() {\n        setTimeout(function() {\n          loaded = true;\n        }, 0);\n      });\n    }\n    return function onpopstate(e) {\n      if (!loaded) return;\n      if (e.state) {\n        var path = e.state.path;\n        page.replace(path, e.state);\n      } else if (isLocation) {\n        var loc = pageWindow.location;\n        page.show(loc.pathname + loc.hash, undefined, undefined, false);\n      }\n    };\n  })();\n  /**\n   * Handle \"click\" events.\n   */\n\n  /* jshint +W054 */\n  function onclick(e) {\n    if (1 !== which(e)) return;\n\n    if (e.metaKey || e.ctrlKey || e.shiftKey) return;\n    if (e.defaultPrevented) return;\n\n    // ensure link\n    // use shadow dom when available\n    var el = e.path ? e.path[0] : e.target;\n\n    // continue ensure link\n    // el.nodeName for svg links are 'a' instead of 'A'\n    while (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;\n    if (!el || 'A' !== el.nodeName.toUpperCase()) return;\n\n    // check if link is inside an svg\n    // in this case, both href and target are always inside an object\n    var svg = (typeof el.href === 'object') && el.href.constructor.name === 'SVGAnimatedString';\n\n    // Ignore if tag has\n    // 1. \"download\" attribute\n    // 2. rel=\"external\" attribute\n    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;\n\n    // ensure non-hash for the same path\n    var link = el.getAttribute('href');\n    if(!hashbang && samePath(el) && (el.hash || '#' === link)) return;\n\n    // Check for mailto: in the href\n    if (link && link.indexOf('mailto:') > -1) return;\n\n    // check target\n    // svg target is an object and its desired value is in .baseVal property\n    if (svg ? el.target.baseVal : el.target) return;\n\n    // x-origin\n    // note: svg links that are not relative don't call click events (and skip page.js)\n    // consequently, all svg links tested inside page.js are relative and in the same origin\n    if (!svg && !sameOrigin(el.href)) return;\n\n    // rebuild path\n    // There aren't .pathname and .search properties in svg links, so we use href\n    // Also, svg href is an object and its desired value is in .baseVal property\n    var path = svg ? el.href.baseVal : (el.pathname + el.search + (el.hash || ''));\n\n    path = path[0] !== '/' ? '/' + path : path;\n\n    // strip leading \"/[drive letter]:\" on NW.js on Windows\n    if (hasProcess && path.match(/^\\/[a-zA-Z]:\\//)) {\n      path = path.replace(/^\\/[a-zA-Z]:\\//, '/');\n    }\n\n    // same page\n    var orig = path;\n    var pageBase = getBase();\n\n    if (path.indexOf(pageBase) === 0) {\n      path = path.substr(base.length);\n    }\n\n    if (hashbang) path = path.replace('#!', '');\n\n    if (pageBase && orig === path) return;\n\n    e.preventDefault();\n    page.show(orig);\n  }\n\n  /**\n   * Event button.\n   */\n\n  function which(e) {\n    e = e || (hasWindow && window.event);\n    return null == e.which ? e.button : e.which;\n  }\n\n  /**\n   * Convert to a URL object\n   */\n  function toURL(href) {\n    if(typeof URL === 'function' && isLocation) {\n      return new URL(href, location.toString());\n    } else if (hasDocument) {\n      var anc = document.createElement('a');\n      anc.href = href;\n      return anc;\n    }\n  }\n\n  /**\n   * Check if `href` is the same origin.\n   */\n\n  function sameOrigin(href) {\n    if(!href || !isLocation) return false;\n    var url = toURL(href);\n\n    var loc = pageWindow.location;\n    return loc.protocol === url.protocol &&\n      loc.hostname === url.hostname &&\n      loc.port === url.port;\n  }\n\n  function samePath(url) {\n    if(!isLocation) return false;\n    var loc = pageWindow.location;\n    return url.pathname === loc.pathname &&\n      url.search === loc.search;\n  }\n\n  /**\n   * Gets the `base`, which depends on whether we are using History or\n   * hashbang routing.\n   */\n  function getBase() {\n    if(!!base) return base;\n    var loc = hasWindow && pageWindow.location;\n    return (hasWindow && hashbang && loc.protocol === 'file:') ? loc.pathname : base;\n  }\n\n  page.sameOrigin = sameOrigin;\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {String} str\n * @return {Array}\n */\nfunction parse (str) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var suffix = res[6]\n    var asterisk = res[7]\n\n    var repeat = suffix === '+' || suffix === '*'\n    var optional = suffix === '?' || suffix === '*'\n    var delimiter = prefix || '/'\n    var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?')\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: escapeGroup(pattern)\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {String}   str\n * @return {Function}\n */\nfunction compile (str) {\n  return tokensToFunction(parse(str))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^' + tokens[i].pattern + '$')\n    }\n  }\n\n  return function (obj) {\n    var path = ''\n    var data = obj || {}\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received \"' + value + '\"')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encodeURIComponent(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = encodeURIComponent(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {String} str\n * @return {String}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {String} group\n * @return {String}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {RegExp} re\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {String}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {RegExp} path\n * @param  {Array}  keys\n * @return {RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {Array}  path\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {String} path\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  var tokens = parse(path)\n  var re = tokensToRegExp(tokens, options)\n\n  // Attach keys back to the regexp.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] !== 'string') {\n      keys.push(tokens[i])\n    }\n  }\n\n  return attachKeys(re, keys)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {Array}  tokens\n * @param  {Array}  keys\n * @param  {Object} options\n * @return {RegExp}\n */\nfunction tokensToRegExp (tokens, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n  var lastToken = tokens[tokens.length - 1]\n  var endsWithSlash = typeof lastToken === 'string' && /\\/$/.test(lastToken)\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = token.pattern\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (prefix) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithSlash ? '' : '(?=\\\\/|$)'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(String|RegExp|Array)} path\n * @param  {Array}                 [keys]\n * @param  {Object}                [options]\n * @return {RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  keys = keys || []\n\n  if (!isarray(keys)) {\n    options = keys\n    keys = []\n  } else if (!options) {\n    options = {}\n  }\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys, options)\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(path, keys, options)\n  }\n\n  return stringToRegexp(path, keys, options)\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var bel = require('bel') // turns template tag into DOM elements\nvar morphdom = require('morphdom') // efficiently diffs + morphs two DOM elements\nvar defaultEvents = require('./update-events.js') // default events to be copied when dom elements update\n\nmodule.exports = bel\n\n// TODO move this + defaultEvents to a new module once we receive more feedback\nmodule.exports.update = function (fromNode, toNode, opts) {\n  if (!opts) opts = {}\n  if (opts.events !== false) {\n    if (!opts.onBeforeElUpdated) opts.onBeforeElUpdated = copier\n  }\n\n  return morphdom(fromNode, toNode, opts)\n\n  // morphdom only copies attributes. we decided we also wanted to copy events\n  // that can be set via attributes\n  function copier (f, t) {\n    // copy events:\n    var events = opts.events || defaultEvents\n    for (var i = 0; i < events.length; i++) {\n      var ev = events[i]\n      if (t[ev]) { // if new element has a whitelisted attribute\n        f[ev] = t[ev] // update existing element\n      } else if (f[ev]) { // if existing element has it and new one doesnt\n        f[ev] = undefined // remove it from existing element\n      }\n    }\n    var oldValue = f.value\n    var newValue = t.value\n    // copy values for form elements\n    if ((f.nodeName === 'INPUT' && f.type !== 'file') || f.nodeName === 'SELECT') {\n      if (!newValue && !t.hasAttribute('value')) {\n        t.value = f.value\n      } else if (newValue !== oldValue) {\n        f.value = newValue\n      }\n    } else if (f.nodeName === 'TEXTAREA') {\n      if (t.getAttribute('value') === null) f.value = t.value\n    }\n  }\n}\n","module.exports = [\n  // attribute events (can be set with attributes)\n  'onclick',\n  'ondblclick',\n  'onmousedown',\n  'onmouseup',\n  'onmouseover',\n  'onmousemove',\n  'onmouseout',\n  'ondragstart',\n  'ondrag',\n  'ondragenter',\n  'ondragleave',\n  'ondragover',\n  'ondrop',\n  'ondragend',\n  'onkeydown',\n  'onkeypress',\n  'onkeyup',\n  'onunload',\n  'onabort',\n  'onerror',\n  'onresize',\n  'onscroll',\n  'onselect',\n  'onchange',\n  'onsubmit',\n  'onreset',\n  'onfocus',\n  'onblur',\n  'oninput',\n  // other common events\n  'oncontextmenu',\n  'onfocusin',\n  'onfocusout'\n]\n","var yo = require('yo-yo')\r\nvar translate = require('../translate')\r\n\r\nvar el = yo `\r\n<footer class=\"site-footer\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col s12 l3 center-aling\"><a href=\"#\" data-activates=\"dropdown1\" class=\"dropdown-button btn\">${translate.message('language')}</a>\r\n        <ul id=\"dropdown1\" class=\"dropdown-content\">\r\n          <li><a href=\"#!\">${translate.message('spanish')}</a></li>\r\n          <li><a href=\"#!\">${translate.message('english')}</a></li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"col s12 l3 push-l6 center-aling\">© 2018 Platzigram</div>\r\n    </div>\r\n  </div>\r\n</footer>`\r\n\r\ndocument.body.appendChild(el)","var page = require('page')\r\nvar empty = require('empty-element')\r\nvar template = require('./template')\r\n\r\n\r\n\r\n\r\npage('/', function (ctx,next){\r\n    // title('Platzigram-Signin')\r\n    document.title='Platzigram'\r\n    var main = document.getElementById('main-container')\r\n\r\n    var pictures = [{\r\n        user: {\r\n            username: 'andres',\r\n            avatar: 'https://cdn.hobbyconsolas.com/sites/navi.axelspringer.es/public/media/image/2016/12/iron-man-armadura.jpg'\r\n\r\n        },\r\n        url: 'office.jpg',\r\n        likes: 0,\r\n        liked: false,\r\n        createdAt: new Date()\r\n    },\r\n    {\r\n        user: {\r\n            username: 'pedro',\r\n            avatar: 'https://cdn.hobbyconsolas.com/sites/navi.axelspringer.es/public/media/image/2016/12/iron-man-armadura.jpg'\r\n\r\n        },\r\n        url: 'office.jpg',\r\n        likes: 1,\r\n        liked: true,\r\n        createdAt: new Date().setDate(new Date().getDate() - 10)\r\n    }\r\n\r\n]\r\n\r\n    empty(main).appendChild(template(pictures))\r\n})","var yo = require('yo-yo')\r\nvar layout = require('../layout')\r\nvar picture = require('../picture-card')\r\n\r\n\r\nmodule.exports = function (pictures){\r\nvar el =  yo`\r\n<div class=\"container timeline\">\r\n    <div class=\"row\">\r\n        <div class=\"col s12 m10 offset-m1 l6 offset-l3\">\r\n            ${pictures.map(function (pic){\r\n                return picture (pic)\r\n            })}\r\n        </div>\r\n    </div>\r\n</div>`\r\n\r\nreturn layout(el)\r\n} \r\n\r\n ","var page = require('page')\r\n\r\nrequire('./homepage')\r\nrequire('./signup')\r\nrequire('./signin')\r\nrequire('./footer')\r\n\r\npage()","var yo = require('yo-yo')\r\n\r\nmodule.exports = function landing (box) {\r\n    return yo `<div class=\"container landing\">\r\n    <div class=\"row\">\r\n      <div class=\"col s10 push-s1\">\r\n        <div class=\"row\">\r\n          <div class=\"col m5 hiden-on-small-only\">\r\n            <div class=\"iphone\">\r\n              <img src=\"https://bdt.computerhoy.com/sites/default/files/styles/image_scale_150x300/public/iphone-x-apple.png?itok=jhcA8_WD\" alt=\"img-telefono\">\r\n            </div>\r\n          </div>\r\n         ${box}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>`\r\n}","var yo = require('yo-yo')\r\nvar translate = require('../translate')\r\n\r\nmodule.exports = function layout (content){\r\nreturn yo`\r\n<div>\r\n    <nav class=\"header\">\r\n        <div class=\"nav-wrapper\">\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    <div class=\"col s12 m6 offset-m1\">\r\n                        <a href=\"/\" class=\"brand-logo platzigram\">Platzigram</a>\r\n                    </div>\r\n                    <div class=\"col s2 m6 push-s10 push-m10\">\r\n                        <a href=\"#\" class=\"btn btn-large btn-flat dropdown-button\" data-activates=\"drop-user\">\r\n                            <i class=\"fa fa-user\" aria-hidden=\"true\"></i>\r\n                        </a>\r\n                        <ul id=\"drop-user\" class=\"dropdown-content\">\r\n                            <li><a href=\"#\">${translate.message('logout')}</a></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n    <div class=\"content\">\r\n        ${content}\r\n    </div>\r\n</div>`\r\n\r\n}\r\n","var yo = require('yo-yo')\r\nvar translate = require('../translate')\r\n\r\nmodule.exports = function pictuareCard(pic){\r\n  var el \r\n\r\n  function render(picture) {\r\n    return yo`\r\n    <div class=\"card ${picture.liked ? 'liked' : ''}\">\r\n        <div class=\"card-image\">\r\n          <img class=\"activator\" src=\"${pic.url}\">\r\n        </div>\r\n        <div class=\"card-content\">\r\n        <a href=\"/user/${pic.user.username}\" class=\"card-title\">\r\n          <img src=\"${pic.user.avatar}\" alt=\"avatar\" class=\"avatar\">\r\n          <span class=\"username\">${pic.user.username}</span>\r\n        </a>\r\n        <small class=\"right time\">${translate.date.format(picture.createdAt)}</small>\r\n        <p>\r\n          <a class=\"left\" href=\"\" onclick=${like.bind(false, true)}><i class=\"fa fa-heart-o\" aria-hidden=\"true\"></i></a>\r\n          <a class=\"left\" href=\"\" onclick=${like.bind(false, false)}><i class=\"fa fa-heart-o dis\" aria-hidden=\"true\"></i></a>\r\n          <span class=\"left likes\">${translate.message('likes', {likes : picture.likes})}</span>\r\n        </p>\r\n        </div>    \r\n      </div>\r\n      `\r\n      \r\n  }\r\n  function like(liked){\r\n    pic.liked = liked\r\n    pic.likes += liked ? 1 : -1\r\n    var newEl = render(pic)\r\n    yo.update(el, newEl)\r\n    return false\r\n  }\r\n\r\n  el = render(pic)\r\n  return el\r\n} \r\n\r\n","var page = require('page')\r\nvar empty = require('empty-element')\r\nvar template = require('./template')\r\n\r\n\r\n\r\n\r\npage('/signin', function (ctx,next){\r\n    // title('Platzigram-Signin')\r\n    document.title='Platzigram-Signin'\r\n    var main = document.getElementById('main-container')\r\n    empty(main).appendChild(template)\r\n})","var yo = require('yo-yo')\r\nvar landing = require('../landing')\r\nvar translate = require('../translate')\r\n\r\n\r\nvar signinForm = yo` <div class=\"col s12 m7\">\r\n<div class=\"row\">\r\n  <div class=\"signup-box\">\r\n    <h1 class=\"platzigram\">Platzigram</h1>\r\n    <form class=\"signup-form\" action=\"index.html\" method=\"post\">\r\n      <div class=\"section\">\r\n        <a class=\"btn btn-fb hide-on-small-only\" href=\"#\">${translate.message('signup.facebook')}</a>\r\n        <a class=\"btn btn-fb hide-on-med-and-up\" href=\"#\"><i class=\"fa fa-facebook-official\"></i>${translate.message('signup.text')}</a>\r\n      </div>\r\n      <div class=\"divider\"></div>\r\n      <div class=\"section\">\r\n        <input type=\"text\" name=\"username\" placeholder=\"${translate.message('username')}\">\r\n        <input type=\"password\" name=\"password\" placeholder=\"${translate.message('password')}\">\r\n        <button class=\"btn waves-effect waves-ligth btn-signup\" type=\"submit\" name=\"button\">${translate.message('signup.text')}</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"login-box\">\r\n  ${translate.message('signin.not-have-account')} <a href=\"/signup\">${translate.message('signup.call-to-action')}</a>\r\n  </div>\r\n</div>\r\n</div>`\r\n\r\nmodule.exports = landing(signinForm)","var page = require('page')\r\nvar empty = require('empty-element')\r\nvar template = require('./template')\r\n\r\n\r\n\r\npage('/signup', function (ctx,next){\r\n    // title('Platzigram-Signup')\r\n    document.title='Platzigram-Signup'\r\n    var main = document.getElementById('main-container')\r\n    empty(main).appendChild(template)\r\n})","var yo = require('yo-yo')\r\nvar landing = require('../landing')\r\nvar translate = require('../translate')\r\n\r\nvar signupForm = yo` <div class=\"col s12 m7\">\r\n<div class=\"row\">\r\n  <div class=\"signup-box\">\r\n    <h1 class=\"platzigram\">Platzigram</h1>\r\n    <form class=\"signup-form\" action=\"index.html\" method=\"post\">\r\n      <h2>${translate.message('signup.subheading')}</h2>\r\n      <div class=\"section\">\r\n        <a class=\"btn btn-fb hide-on-small-only\" href=\"#\">${translate.message('signup.facebook')}</a>\r\n        <a class=\"btn btn-fb hide-on-med-and-up\" href=\"#\"><i class=\"fa fa-facebook-official\"></i>${translate.message('signup.text')}</a>\r\n      </div>\r\n      <div class=\"divider\"></div>\r\n      <div class=\"section\">\r\n        <input type=\"email\" name=\"email\" placeholder=\"${translate.message('email')}\">\r\n        <input type=\"text\" name=\"name\" placeholder=\"${translate.message('fullname')}\">\r\n        <input type=\"text\" name=\"username\" placeholder=\"${translate.message('username')}\">\r\n        <input type=\"password\" name=\"password\" placeholder=\"${translate.message('password')}\">\r\n        <button class=\"btn waves-effect waves-ligth btn-signup\" type=\"submit\" name=\"button\">${translate.message('signup.call-to-action')}</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"login-box\">\r\n  ${translate.message('signup.have-account')} <a href=\"/signin\">${translate.message('signin')}</a>\r\n  </div>\r\n</div>\r\n</div>`\r\n\r\n// module.exports = signupForm;\r\nvar x = landing(signupForm)\r\n// console.log(x)\r\nmodule.exports = x\r\n","module.exports = {\r\n    likes: '{ likes, plural, ' +\r\n            '=0 { no likes }' +\r\n            '=1 { # like }' +\r\n            'other { # likes }}',\r\n    'logout': 'Logout',\r\n    'english': 'English',\r\n    'spanish': 'Spanish',\r\n    'signup.subheading': 'Signup to watch your friends\\' pictures studying at Platzi',\r\n    'signup.facebook': 'Signup with Facebook',\r\n    'signup.text': 'Signup',\r\n    'email': 'Email',\r\n    'username': 'Username',\r\n    'fullname': 'Fullname',\r\n    'password': 'Password',\r\n    'signup.call-to-action': 'Signup',\r\n    'signup.have-account': 'Already have an account?',\r\n    'signin': 'Signin',\r\n    'signin.not-have-account': '¿Don\\'t have an account?',\r\n    'language': 'Language'\r\n  }","module.exports = {\r\n    'likes': '{ likes, number } me gusta',\r\n    'logout': 'Salir',\r\n    'english': 'Inglés',\r\n    'spanish': 'Español',\r\n    'signup.subheading': 'Regístrate para ver fotos de tus amigos estudiando en Platzi',\r\n    'signup.facebook': 'Iniciar sesión con Facebook',\r\n    'signup.text': 'Iniciar sesión',\r\n    'email': 'Correo electrónico',\r\n    'username': 'Nombre de usuario',\r\n    'fullname': 'Nombre completo',\r\n    'password': 'Contraseña',\r\n    'signup.call-to-action': 'Regístrate',\r\n    'signup.have-account': '¿Tienes una cuenta?',\r\n    'signin': 'Entrar',\r\n    'signin.not-have-account': '¿No tienes una cuenta?',\r\n    'language': 'Idioma'\r\n  }","if (!window.Intl){\r\n    window.Intl = require('intl')\r\n    require('intl/locale-data/jsonp/en-US.js')\r\n    require('intl/locale-data/jsonp/es.js')\r\n  }\r\n\r\nvar IntlRelativeFormat = window.IntlRelativeFormat = require('intl-relativeformat')\r\nvar IntlMessageFormat = require('intl-messageformat')\r\nrequire('intl-relativeformat/dist/locale-data/en.js')\r\nrequire('intl-relativeformat/dist/locale-data/es.js')\r\n  \r\n\r\nvar es = require('./es')\r\nvar en = require('./en-US')\r\n\r\nvar MESSAGES = {}\r\nMESSAGES.es = es\r\nMESSAGES['en-US'] = en\r\n\r\nvar locale = 'es'\r\n\r\nmodule.exports = {\r\n    message: function (text, opts) {\r\n        opts = opts || {}\r\n        var msg = new IntlMessageFormat(MESSAGES[locale][text], locale, null)\r\n        return msg.format(opts)\r\n    },\r\n    date: new IntlRelativeFormat(locale) \r\n}\r\n\r\n\r\n  \r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}